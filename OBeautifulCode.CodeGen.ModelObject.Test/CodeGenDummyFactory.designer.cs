// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.Math.Recipes;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
#if !OBeautifulCodeCodeGenSolution
    internal
#else
    public
#endif
    abstract class DefaultCodeGenDummyFactory : IDummyFactory
    {
        public DefaultCodeGenDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArrayOfNullable(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArrayOfNullableChild1(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArrayOfNullableChild2(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetArrayOfNullableChild1),
                        typeof(ModelAllPrivateSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArray(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArrayChild1(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetArrayChild2(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetArrayChild1),
                        typeof(ModelAllPrivateSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetMisc(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetMiscChild1(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetMiscChild2(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetMiscChild1),
                        typeof(ModelAllPrivateSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNone(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNoneChild1(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNoneChild2(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetNoneChild1),
                        typeof(ModelAllPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNullable(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNullableChild1(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetNullableChild2(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetNullableChild1),
                        typeof(ModelAllPrivateSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollectionOfNullable(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollectionOfNullableChild1(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelAllPrivateSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollection(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollectionChild1(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyCollectionChild2(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyCollectionChild1),
                        typeof(ModelAllPrivateSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild2(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionary(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionaryChild1(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyDictionaryChild1),
                        typeof(ModelAllPrivateSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyListOfNullable(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyListOfNullableChild1(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyListOfNullableChild1),
                        typeof(ModelAllPrivateSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyList(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyListChild1(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPrivateSetReadOnlyListChild2(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPrivateSetReadOnlyListChild1),
                        typeof(ModelAllPrivateSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPrivateSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetArrayOfNullableChild1),
                        typeof(ModelAllPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetArrayChild1),
                        typeof(ModelAllPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetMiscChild1),
                        typeof(ModelAllPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetNoneChild1),
                        typeof(ModelAllPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetNullableChild1),
                        typeof(ModelAllPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelAllPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyCollectionChild1),
                        typeof(ModelAllPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelAllPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelAllPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelAllPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelAllPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelAllPublicSetReadOnlyListChild1),
                        typeof(ModelAllPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelAllPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArrayOfNullable(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArrayOfNullableChild1(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArrayOfNullableChild2(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetArrayOfNullableChild1),
                        typeof(ModelCloningPrivateSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArray(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArrayChild1(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetArrayChild2(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetArrayChild1),
                        typeof(ModelCloningPrivateSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetMisc(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetMiscChild1(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetMiscChild2(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetMiscChild1),
                        typeof(ModelCloningPrivateSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNone(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNoneChild1(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNoneChild2(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetNoneChild1),
                        typeof(ModelCloningPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNullable(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNullableChild1(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetNullableChild2(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetNullableChild1),
                        typeof(ModelCloningPrivateSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollectionOfNullable(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollectionOfNullableChild1(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollectionOfNullableChild2(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelCloningPrivateSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollection(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollectionChild1(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyCollectionChild2(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyCollectionChild1),
                        typeof(ModelCloningPrivateSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionaryOfNullable(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionaryOfNullableChild1(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionaryOfNullableChild2(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelCloningPrivateSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionary(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionaryChild1(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyDictionaryChild2(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyDictionaryChild1),
                        typeof(ModelCloningPrivateSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyListOfNullable(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyListOfNullableChild1(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyListOfNullableChild2(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyListOfNullableChild1),
                        typeof(ModelCloningPrivateSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyList(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyListChild1(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPrivateSetReadOnlyListChild2(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPrivateSetReadOnlyListChild1),
                        typeof(ModelCloningPrivateSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPrivateSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetArrayOfNullableChild1),
                        typeof(ModelCloningPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetArrayChild1),
                        typeof(ModelCloningPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetMiscChild1),
                        typeof(ModelCloningPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetNoneChild1),
                        typeof(ModelCloningPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetNullableChild1),
                        typeof(ModelCloningPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelCloningPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyCollectionChild1),
                        typeof(ModelCloningPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelCloningPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelCloningPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelCloningPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelCloningPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelCloningPublicSetReadOnlyListChild1),
                        typeof(ModelCloningPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelCloningPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPrivateSetNone(
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPrivateSetNoneChild1(
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPrivateSetNoneChild2(
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelComparingPrivateSetNoneChild1),
                        typeof(ModelComparingPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelComparingPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPublicSetNone
                             {
                                 IntProperty = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPublicSetNoneChild1
                             {
                                 ParentIntProperty = A.Dummy<int>(),
                                 Child1IntProperty = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelComparingPublicSetNoneChild2
                             {
                                 ParentIntProperty = A.Dummy<int>(),
                                 Child2IntProperty = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelComparingPublicSetNoneChild1),
                        typeof(ModelComparingPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelComparingPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArrayOfNullable(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArrayOfNullableChild1(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArrayOfNullableChild2(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetArrayOfNullableChild1),
                        typeof(ModelEqualityPrivateSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArray(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArrayChild1(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetArrayChild2(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetArrayChild1),
                        typeof(ModelEqualityPrivateSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetMisc(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetMiscChild1(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetMiscChild2(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetMiscChild1),
                        typeof(ModelEqualityPrivateSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNone(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNoneChild1(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNoneChild2(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetNoneChild1),
                        typeof(ModelEqualityPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNullable(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNullableChild1(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetNullableChild2(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetNullableChild1),
                        typeof(ModelEqualityPrivateSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollectionOfNullable(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollectionOfNullableChild1(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollectionOfNullableChild2(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollection(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollectionChild1(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyCollectionChild2(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyCollectionChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionaryOfNullable(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionaryOfNullableChild1(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionaryOfNullableChild2(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionary(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionaryChild1(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyDictionaryChild2(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyDictionaryChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyListOfNullable(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyListOfNullableChild1(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyListOfNullableChild2(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyListOfNullableChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyList(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyListChild1(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPrivateSetReadOnlyListChild2(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPrivateSetReadOnlyListChild1),
                        typeof(ModelEqualityPrivateSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPrivateSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetArrayOfNullableChild1),
                        typeof(ModelEqualityPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetArrayChild1),
                        typeof(ModelEqualityPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetMiscChild1),
                        typeof(ModelEqualityPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetNoneChild1),
                        typeof(ModelEqualityPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetNullableChild1),
                        typeof(ModelEqualityPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelEqualityPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyCollectionChild1),
                        typeof(ModelEqualityPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelEqualityPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelEqualityPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelEqualityPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelEqualityPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelEqualityPublicSetReadOnlyListChild1),
                        typeof(ModelEqualityPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelEqualityPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArrayOfNullable(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArrayOfNullableChild1(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArrayOfNullableChild2(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetArrayOfNullableChild1),
                        typeof(ModelHashingPrivateSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArray(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArrayChild1(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetArrayChild2(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetArrayChild1),
                        typeof(ModelHashingPrivateSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetMisc(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetMiscChild1(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetMiscChild2(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetMiscChild1),
                        typeof(ModelHashingPrivateSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNone(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNoneChild1(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNoneChild2(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetNoneChild1),
                        typeof(ModelHashingPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNullable(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNullableChild1(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetNullableChild2(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetNullableChild1),
                        typeof(ModelHashingPrivateSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollectionOfNullable(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollectionOfNullableChild1(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollectionOfNullableChild2(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelHashingPrivateSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollection(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollectionChild1(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyCollectionChild2(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyCollectionChild1),
                        typeof(ModelHashingPrivateSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionaryOfNullable(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionaryOfNullableChild1(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionaryOfNullableChild2(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelHashingPrivateSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionary(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionaryChild1(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyDictionaryChild2(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyDictionaryChild1),
                        typeof(ModelHashingPrivateSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyListOfNullable(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyListOfNullableChild1(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyListOfNullableChild2(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyListOfNullableChild1),
                        typeof(ModelHashingPrivateSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyList(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyListChild1(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPrivateSetReadOnlyListChild2(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPrivateSetReadOnlyListChild1),
                        typeof(ModelHashingPrivateSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPrivateSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetArrayOfNullableChild1),
                        typeof(ModelHashingPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetArrayChild1),
                        typeof(ModelHashingPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetMiscChild1),
                        typeof(ModelHashingPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetNoneChild1),
                        typeof(ModelHashingPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetNullableChild1),
                        typeof(ModelHashingPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelHashingPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyCollectionChild1),
                        typeof(ModelHashingPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelHashingPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelHashingPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelHashingPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelHashingPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelHashingPublicSetReadOnlyListChild1),
                        typeof(ModelHashingPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelHashingPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArrayOfNullable(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArrayOfNullableChild1(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArrayOfNullableChild2(
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>(),
                                 A.Dummy<bool?[]>(),
                                 A.Dummy<int?[]>(),
                                 A.Dummy<Guid?[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<CustomEnum?[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 A.Dummy<CustomFlagsEnum?[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetArrayOfNullableChild1),
                        typeof(ModelStringRepresentationPrivateSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArray(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArrayChild1(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetArrayChild2(
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 A.Dummy<bool[]>(),
                                 A.Dummy<int[]>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<Guid[]>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<CustomEnum[]>(),
                                 A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 A.Dummy<CustomFlagsEnum[]>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<CustomBaseClass[]>(),
                                 A.Dummy<CustomGenericClass<CustomClass>[]>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetArrayChild1),
                        typeof(ModelStringRepresentationPrivateSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetMisc(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetMiscChild1(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetMiscChild2(
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 A.Dummy<ICollection<string>>(),
                                 A.Dummy<IList<string>>(),
                                 A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 A.Dummy<IList<ICollection<string>>>(),
                                 A.Dummy<IReadOnlyList<IList<string>>>(),
                                 A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetMiscChild1),
                        typeof(ModelStringRepresentationPrivateSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNone(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNoneChild1(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNoneChild2(
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<Guid>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomFlagsEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomBaseClass>(),
                                 A.Dummy<CustomGenericClass<CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetNoneChild1),
                        typeof(ModelStringRepresentationPrivateSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNullable(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNullableChild1(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetNullableChild2(
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>(),
                                 A.Dummy<bool?>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 A.Dummy<CustomFlagsEnum?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetNullableChild1),
                        typeof(ModelStringRepresentationPrivateSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullable(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullableChild1(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullableChild2(
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<bool?>>(),
                                 A.Dummy<IReadOnlyCollection<int?>>(),
                                 A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollection(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollectionChild1(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyCollectionChild2(
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyCollection<bool>>(),
                                 A.Dummy<IReadOnlyCollection<int>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyCollectionChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullable(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullableChild1(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullableChild2(
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionary(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionaryChild1(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyDictionaryChild2(
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyDictionaryChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyListOfNullable(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyListOfNullableChild1(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyListOfNullableChild2(
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 A.Dummy<IReadOnlyList<bool?>>(),
                                 A.Dummy<IReadOnlyList<int?>>(),
                                 A.Dummy<IReadOnlyList<Guid?>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyListOfNullableChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyList(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyListChild1(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPrivateSetReadOnlyListChild2(
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 A.Dummy<IReadOnlyList<bool>>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<Guid>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPrivateSetReadOnlyListChild1),
                        typeof(ModelStringRepresentationPrivateSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPrivateSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetArrayOfNullableChild1),
                        typeof(ModelStringRepresentationPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetArrayChild1),
                        typeof(ModelStringRepresentationPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetMiscChild1),
                        typeof(ModelStringRepresentationPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetNoneChild1),
                        typeof(ModelStringRepresentationPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetNullableChild1),
                        typeof(ModelStringRepresentationPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyCollectionChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelStringRepresentationPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelStringRepresentationPublicSetReadOnlyListChild1),
                        typeof(ModelStringRepresentationPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelStringRepresentationPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArrayOfNullable
                             {
                                 ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArrayOfNullableChild1
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child1ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child1ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child1ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child1ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child1ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child1ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArrayOfNullableChild2
                             {
                                 ParentArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 ParentArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 ParentArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 ParentArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 ParentArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 ParentArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                                 Child2ArrayOfNullableBoolProperty                          = A.Dummy<bool?[]>(),
                                 Child2ArrayOfNullableIntProperty                           = A.Dummy<int?[]>(),
                                 Child2ArrayOfNullableGuidProperty                          = A.Dummy<Guid?[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                      = A.Dummy<DateTime?[]>(),
                                 Child2ArrayOfNullableCustomEnumProperty                    = A.Dummy<CustomEnum?[]>(),
                                 Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?[]>(),
                                 Child2ArrayOfNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetArrayOfNullableChild1),
                        typeof(ModelValidationPublicSetArrayOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetArrayOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArray
                             {
                                 ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArrayChild1
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child1ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child1ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child1ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child1ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child1ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child1ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child1ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child1ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child1ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child1ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetArrayChild2
                             {
                                 ParentArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 ParentArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 ParentArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 ParentArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 ParentArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 ParentArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 ParentArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 ParentArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                                 Child2ArrayOfBoolProperty                            = A.Dummy<bool[]>(),
                                 Child2ArrayOfIntProperty                             = A.Dummy<int[]>(),
                                 Child2ArrayOfStringProperty                          = A.Dummy<string[]>(),
                                 Child2ArrayOfGuidProperty                            = A.Dummy<Guid[]>(),
                                 Child2ArrayOfDateTimeProperty                        = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfCustomEnumProperty                      = A.Dummy<CustomEnum[]>(),
                                 Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault[]>(),
                                 Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum[]>(),
                                 Child2ArrayOfCustomClassProperty                     = A.Dummy<CustomClass[]>(),
                                 Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<CustomBaseClass[]>(),
                                 Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>[]>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetArrayChild1),
                        typeof(ModelValidationPublicSetArrayChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetArrayParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetMiscChild1
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child1CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child1ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child1ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetMiscChild2
                             {
                                 ParentCollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 ParentListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 ParentListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                                 Child2CollectionInterfaceOfStringProperty                                                                                    = A.Dummy<ICollection<string>>(),
                                 Child2ListInterfaceOfStringProperty                                                                                          = A.Dummy<IList<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = A.Dummy<IReadOnlyCollection<ICollection<string>>>(),
                                 Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = A.Dummy<ICollection<IReadOnlyList<string>>>(),
                                 Child2ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = A.Dummy<IList<ICollection<string>>>(),
                                 Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = A.Dummy<IReadOnlyList<IList<string>>>(),
                                 Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = A.Dummy<IDictionary<string, IReadOnlyList<DateTime>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<string, ICollection<DateTime>>>(),
                                 Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = A.Dummy<IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetMiscChild1),
                        typeof(ModelValidationPublicSetMiscChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetMiscParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNone
                             {
                                 BoolProperty                            = A.Dummy<bool>(),
                                 IntProperty                             = A.Dummy<int>(),
                                 StringProperty                          = A.Dummy<string>(),
                                 GuidProperty                            = A.Dummy<Guid>(),
                                 DateTimeProperty                        = A.Dummy<DateTime>(),
                                 CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNoneChild1
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child1BoolProperty                            = A.Dummy<bool>(),
                                 Child1IntProperty                             = A.Dummy<int>(),
                                 Child1StringProperty                          = A.Dummy<string>(),
                                 Child1GuidProperty                            = A.Dummy<Guid>(),
                                 Child1DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child1CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child1CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child1CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child1CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child1CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child1CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNoneChild2
                             {
                                 ParentBoolProperty                            = A.Dummy<bool>(),
                                 ParentIntProperty                             = A.Dummy<int>(),
                                 ParentStringProperty                          = A.Dummy<string>(),
                                 ParentGuidProperty                            = A.Dummy<Guid>(),
                                 ParentDateTimeProperty                        = A.Dummy<DateTime>(),
                                 ParentCustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 ParentCustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 ParentCustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 ParentCustomClassProperty                     = A.Dummy<CustomClass>(),
                                 ParentCustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 ParentCustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                                 Child2BoolProperty                            = A.Dummy<bool>(),
                                 Child2IntProperty                             = A.Dummy<int>(),
                                 Child2StringProperty                          = A.Dummy<string>(),
                                 Child2GuidProperty                            = A.Dummy<Guid>(),
                                 Child2DateTimeProperty                        = A.Dummy<DateTime>(),
                                 Child2CustomEnumProperty                      = A.Dummy<CustomEnum>(),
                                 Child2CustomEnumValidatedNotDefaultProperty   = A.Dummy<CustomEnumValidatedNotDefault>(),
                                 Child2CustomFlagsEnumProperty                 = A.Dummy<CustomFlagsEnum>(),
                                 Child2CustomClassProperty                     = A.Dummy<CustomClass>(),
                                 Child2CustomBaseClassProperty                 = A.Dummy<CustomBaseClass>(),
                                 Child2CustomGenericClassOfCustomClassProperty = A.Dummy<CustomGenericClass<CustomClass>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetNoneChild1),
                        typeof(ModelValidationPublicSetNoneChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetNoneParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNullable
                             {
                                 NullableBoolProperty                          = A.Dummy<bool?>(),
                                 NullableIntProperty                           = A.Dummy<int?>(),
                                 NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNullableChild1
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child1NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child1NullableIntProperty                           = A.Dummy<int?>(),
                                 Child1NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child1NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child1NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child1NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child1NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetNullableChild2
                             {
                                 ParentNullableBoolProperty                          = A.Dummy<bool?>(),
                                 ParentNullableIntProperty                           = A.Dummy<int?>(),
                                 ParentNullableGuidProperty                          = A.Dummy<Guid?>(),
                                 ParentNullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 ParentNullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 ParentNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 ParentNullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                                 Child2NullableBoolProperty                          = A.Dummy<bool?>(),
                                 Child2NullableIntProperty                           = A.Dummy<int?>(),
                                 Child2NullableGuidProperty                          = A.Dummy<Guid?>(),
                                 Child2NullableDateTimeProperty                      = A.Dummy<DateTime?>(),
                                 Child2NullableCustomEnumProperty                    = A.Dummy<CustomEnum?>(),
                                 Child2NullableCustomEnumValidatedNotDefaultProperty = A.Dummy<CustomEnumValidatedNotDefault?>(),
                                 Child2NullableCustomFlagsEnumProperty               = A.Dummy<CustomFlagsEnum?>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetNullableChild1),
                        typeof(ModelValidationPublicSetNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollectionOfNullable
                             {
                                 ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollectionOfNullableChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollectionOfNullableChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyCollection<bool?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyCollection<int?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyCollection<Guid?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyCollection<CustomEnum?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyCollection<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyCollectionOfNullableChild1),
                        typeof(ModelValidationPublicSetReadOnlyCollectionOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyCollectionOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollectionChild1
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyCollectionChild2
                             {
                                 ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyCollection<bool>>(),
                                 Child2ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<IReadOnlyCollection<int>>(),
                                 Child2ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<IReadOnlyCollection<string>>(),
                                 Child2ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyCollection<Guid>>(),
                                 Child2ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyCollection<CustomEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyCollection<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyCollection<CustomFlagsEnum>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyCollection<CustomBaseClass>>(),
                                 Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyCollection<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyCollectionChild1),
                        typeof(ModelValidationPublicSetReadOnlyCollectionChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyCollectionParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionaryOfNullable
                             {
                                 ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionaryOfNullableChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyDictionary<bool?, bool?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyDictionary<int?, int?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyDictionary<Guid?, Guid?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyDictionary<CustomEnum?, CustomEnum?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum?, CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyDictionaryOfNullableChild1),
                        typeof(ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyDictionaryOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionary
                             {
                                 ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionaryChild1
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyDictionaryChild2
                             {
                                 ParentReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 ParentReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 ParentReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ParentReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyDictionary<bool, bool>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfIntProperty                             = A.Dummy<IReadOnlyDictionary<int, int>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfStringProperty                          = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyDictionary<Guid, Guid>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyDictionary<CustomEnum, CustomEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyDictionary<CustomEnumValidatedNotDefault, CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyDictionary<CustomFlagsEnum, CustomFlagsEnum>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyDictionary<CustomClass, CustomClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyDictionary<CustomBaseClass, CustomBaseClass>>(),
                                 Child2ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyDictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyDictionaryChild1),
                        typeof(ModelValidationPublicSetReadOnlyDictionaryChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyDictionaryParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyListOfNullable
                             {
                                 ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyListOfNullableChild1
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child1ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyListOfNullableChild2
                             {
                                 ParentReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 ParentReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 ParentReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 ParentReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableBoolProperty                          = A.Dummy<IReadOnlyList<bool?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableIntProperty                           = A.Dummy<IReadOnlyList<int?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableGuidProperty                          = A.Dummy<IReadOnlyList<Guid?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableDateTimeProperty                      = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty                    = A.Dummy<IReadOnlyList<CustomEnum?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault?>>(),
                                 Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty               = A.Dummy<IReadOnlyList<CustomFlagsEnum?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyListOfNullableChild1),
                        typeof(ModelValidationPublicSetReadOnlyListOfNullableChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyListOfNullableParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyList
                             {
                                 ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyListChild1
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child1ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child1ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child1ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child1ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelValidationPublicSetReadOnlyListChild2
                             {
                                 ParentReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 ParentReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 ParentReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 ParentReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                                 Child2ReadOnlyListInterfaceOfBoolProperty                            = A.Dummy<IReadOnlyList<bool>>(),
                                 Child2ReadOnlyListInterfaceOfIntProperty                             = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListInterfaceOfStringProperty                          = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListInterfaceOfGuidProperty                            = A.Dummy<IReadOnlyList<Guid>>(),
                                 Child2ReadOnlyListInterfaceOfDateTimeProperty                        = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumProperty                      = A.Dummy<IReadOnlyList<CustomEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<IReadOnlyList<CustomEnumValidatedNotDefault>>(),
                                 Child2ReadOnlyListInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<IReadOnlyList<CustomFlagsEnum>>(),
                                 Child2ReadOnlyListInterfaceOfCustomClassProperty                     = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomBaseClassProperty                 = A.Dummy<IReadOnlyList<CustomBaseClass>>(),
                                 Child2ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<IReadOnlyList<CustomGenericClass<CustomClass>>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelValidationPublicSetReadOnlyListChild1),
                        typeof(ModelValidationPublicSetReadOnlyListChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelValidationPublicSetReadOnlyListParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorMoreDerivedThanPropertyChild1(
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomMultilevelChildClass>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorMoreDerivedThanPropertyChild2(
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomMultilevelChildBaseClass>(),
                                 A.Dummy<CustomClass>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetConstructorMoreDerivedThanPropertyChild1),
                        typeof(ModelPrivateSetConstructorMoreDerivedThanPropertyChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetConstructorMoreDerivedThanPropertyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Version>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetGenericParentGenericChild<Version, Guid>(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetGenericParentNonGenericChild(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<CustomClass[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyList<CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<CustomClass, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<decimal?>(),
                                 A.Dummy<CustomGenericClass<string>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetGenericParentGenericChild<Version, Guid>),
                        typeof(ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetGenericParent<Version, Guid>)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetNonGenericParentGenericChild<Version, Guid>(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<string[]>(),
                                 A.Dummy<decimal?>(),
                                 A.Dummy<CustomGenericClass<string>>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetNonGenericParentGenericChild<Version, Guid>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetNonGenericParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetGeneric<Version, Guid>(
                                 A.Dummy<string>(),
                                 A.Dummy<int>(),
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomClass>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<Version[]>(),
                                 A.Dummy<Guid?>(),
                                 A.Dummy<CustomGenericClass<Guid>>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<IReadOnlyList<Version>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 A.Dummy<IReadOnlyDictionary<Version, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetGenericParentGenericChild<Version, Guid>
                             {
                                 ParentStringProperty                                    = A.Dummy<string>(),
                                 ParentIntProperty                                       = A.Dummy<int>(),
                                 ParentEnumProperty                                      = A.Dummy<CustomEnum>(),
                                 ParentCustomClassProperty                               = A.Dummy<CustomClass>(),
                                 ParentGenericArgumentProperty                           = A.Dummy<Version>(),
                                 ParentGenericArrayProperty                              = A.Dummy<Version[]>(),
                                 ParentGenericNullableProperty                           = A.Dummy<Guid?>(),
                                 ParentGenericCustomGenericClassProperty                 = A.Dummy<CustomGenericClass<Guid>>(),
                                 ParentGenericReadOnlyCollectionProperty                 = A.Dummy<IReadOnlyCollection<Version>>(),
                                 ParentGenericReadOnlyListProperty                       = A.Dummy<IReadOnlyList<Version>>(),
                                 ParentGenericReadOnlyDictionaryProperty1                = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 ParentGenericReadOnlyDictionaryProperty2                = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                                 ChildStringProperty                                     = A.Dummy<string>(),
                                 ChildIntProperty                                        = A.Dummy<int>(),
                                 ChildEnumProperty                                       = A.Dummy<CustomEnum>(),
                                 ChildCustomClassProperty                                = A.Dummy<CustomClass>(),
                                 ChildGenericArgumentProperty                            = A.Dummy<Version>(),
                                 ChildGenericArrayProperty                               = A.Dummy<Version[]>(),
                                 ChildGenericNullableProperty                            = A.Dummy<Guid?>(),
                                 ChildGenericCustomGenericClassProperty                  = A.Dummy<CustomGenericClass<Guid>>(),
                                 ChildGenericReadOnlyCollectionProperty                  = A.Dummy<IReadOnlyCollection<Version>>(),
                                 ChildGenericReadOnlyListProperty                        = A.Dummy<IReadOnlyList<Version>>(),
                                 ChildGenericReadOnlyDictionaryProperty1                 = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 ChildGenericReadOnlyDictionaryProperty2                 = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                             {
                                 ParentStringProperty                                    = A.Dummy<string>(),
                                 ParentIntProperty                                       = A.Dummy<int>(),
                                 ParentEnumProperty                                      = A.Dummy<CustomEnum>(),
                                 ParentCustomClassProperty                               = A.Dummy<CustomClass>(),
                                 ParentGenericArgumentProperty                           = A.Dummy<Version>(),
                                 ParentGenericArrayProperty                              = A.Dummy<Version[]>(),
                                 ParentGenericNullableProperty                           = A.Dummy<Guid?>(),
                                 ParentGenericCustomGenericClassProperty                 = A.Dummy<CustomGenericClass<Guid>>(),
                                 ParentGenericReadOnlyCollectionProperty                 = A.Dummy<IReadOnlyCollection<Version>>(),
                                 ParentGenericReadOnlyListProperty                       = A.Dummy<IReadOnlyList<Version>>(),
                                 ParentGenericReadOnlyDictionaryProperty1                = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 ParentGenericReadOnlyDictionaryProperty2                = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                                 ChildStringProperty                                     = A.Dummy<string>(),
                                 ChildIntProperty                                        = A.Dummy<int>(),
                                 ChildEnumProperty                                       = A.Dummy<CustomEnum>(),
                                 ChildCustomClassProperty                                = A.Dummy<CustomClass>(),
                                 ChildGenericArgumentProperty                            = A.Dummy<Version>(),
                                 ChildGenericArrayProperty                               = A.Dummy<Version[]>(),
                                 ChildGenericNullableProperty                            = A.Dummy<Guid?>(),
                                 ChildGenericCustomGenericClassProperty                  = A.Dummy<CustomGenericClass<Version>>(),
                                 ChildGenericReadOnlyCollectionProperty                  = A.Dummy<IReadOnlyCollection<Version>>(),
                                 ChildGenericReadOnlyListProperty                        = A.Dummy<IReadOnlyList<Version>>(),
                                 ChildGenericReadOnlyDictionaryProperty1                 = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 ChildGenericReadOnlyDictionaryProperty2                 = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = A.Dummy<IReadOnlyDictionary<string, Version>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = A.Dummy<string>(),
                                 ParentIntProperty                                       = A.Dummy<int>(),
                                 ParentEnumProperty                                      = A.Dummy<CustomEnum>(),
                                 ParentCustomClassProperty                               = A.Dummy<CustomClass>(),
                                 ParentGenericArgumentProperty                           = A.Dummy<CustomClass>(),
                                 ParentGenericArrayProperty                              = A.Dummy<CustomClass[]>(),
                                 ParentGenericNullableProperty                           = A.Dummy<Guid?>(),
                                 ParentGenericCustomGenericClassProperty                 = A.Dummy<CustomGenericClass<Guid>>(),
                                 ParentGenericReadOnlyCollectionProperty                 = A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 ParentGenericReadOnlyListProperty                       = A.Dummy<IReadOnlyList<CustomClass>>(),
                                 ParentGenericReadOnlyDictionaryProperty1                = A.Dummy<IReadOnlyDictionary<CustomClass, Guid>>(),
                                 ParentGenericReadOnlyDictionaryProperty2                = A.Dummy<IReadOnlyDictionary<Guid, CustomClass>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<IReadOnlyDictionary<CustomClass, string>>(),
                                 ChildStringProperty                                     = A.Dummy<string>(),
                                 ChildIntProperty                                        = A.Dummy<int>(),
                                 ChildEnumProperty                                       = A.Dummy<CustomEnum>(),
                                 ChildCustomClassProperty                                = A.Dummy<CustomClass>(),
                                 ChildArrayProperty                                      = A.Dummy<string[]>(),
                                 ChildNullableProperty                                   = A.Dummy<decimal?>(),
                                 ChildCustomGenericClassProperty                         = A.Dummy<CustomGenericClass<string>>(),
                                 ChildReadOnlyCollectionProperty                         = A.Dummy<IReadOnlyCollection<string>>(),
                                 ChildReadOnlyDictionaryProperty                         = A.Dummy<IReadOnlyDictionary<string, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetGenericParentGenericChild<Version, Guid>),
                        typeof(ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetGenericParent<Version, Guid>)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetGeneric<Version, Guid>
                             {
                                 StringProperty                                    = A.Dummy<string>(),
                                 IntProperty                                       = A.Dummy<int>(),
                                 EnumProperty                                      = A.Dummy<CustomEnum>(),
                                 CustomClassProperty                               = A.Dummy<CustomClass>(),
                                 GenericArgumentProperty                           = A.Dummy<Version>(),
                                 GenericArrayProperty                              = A.Dummy<Version[]>(),
                                 GenericNullableProperty                           = A.Dummy<Guid?>(),
                                 GenericCustomGenericClassProperty                 = A.Dummy<CustomGenericClass<Guid>>(),
                                 GenericReadOnlyCollectionProperty                 = A.Dummy<IReadOnlyCollection<Version>>(),
                                 GenericReadOnlyListProperty                       = A.Dummy<IReadOnlyList<Version>>(),
                                 GenericReadOnlyDictionaryProperty1                = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 GenericReadOnlyDictionaryProperty2                = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 GenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 GenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetNonGenericParentGenericChild<Version, Guid>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetNonGenericParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                             {
                                 ParentStringProperty                                   = A.Dummy<string>(),
                                 ParentIntProperty                                      = A.Dummy<int>(),
                                 ParentEnumProperty                                     = A.Dummy<CustomEnum>(),
                                 ParentCustomClassProperty                              = A.Dummy<CustomClass>(),
                                 ParentArrayProperty                                    = A.Dummy<string[]>(),
                                 ParentNullableProperty                                 = A.Dummy<decimal?>(),
                                 ParentCustomGenericClassProperty                       = A.Dummy<CustomGenericClass<string>>(),
                                 ParentReadOnlyCollectionProperty                       = A.Dummy<IReadOnlyCollection<string>>(),
                                 ParentReadOnlyDictionaryProperty                       = A.Dummy<IReadOnlyDictionary<string, string>>(),
                                 ChildStringProperty                                    = A.Dummy<string>(),
                                 ChildIntProperty                                       = A.Dummy<int>(),
                                 ChildEnumProperty                                      = A.Dummy<CustomEnum>(),
                                 ChildClassProperty                                     = A.Dummy<CustomClass>(),
                                 ChildGenericArgumentProperty                           = A.Dummy<Version>(),
                                 ChildGenericArrayProperty                              = A.Dummy<Version[]>(),
                                 ChildGenericNullableProperty                           = A.Dummy<Guid?>(),
                                 ChildGenericCustomGenericClassProperty                 = A.Dummy<CustomGenericClass<Guid>>(),
                                 ChildGenericReadOnlyCollectionProperty                 = A.Dummy<IReadOnlyCollection<Version>>(),
                                 ChildGenericReadOnlyListProperty                       = A.Dummy<IReadOnlyList<Version>>(),
                                 ChildGenericReadOnlyDictionaryProperty1                = A.Dummy<IReadOnlyDictionary<Version, Guid>>(),
                                 ChildGenericReadOnlyDictionaryProperty2                = A.Dummy<IReadOnlyDictionary<Guid, Version>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<IReadOnlyDictionary<string, Guid>>(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<IReadOnlyDictionary<Version, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorParameterEnumValueNamedUnknown(
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<CustomEnum?>(),
                                 A.Dummy<CustomEnumValidatedNotDefault>(),
                                 A.Dummy<CustomEnumValidatedNotDefault?>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild1A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild1B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation1Child1)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild2A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation1Child2)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation1Grandchild1A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation1Grandchild1B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation1Grandchild2A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation1Grandchild2B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild1A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild1B),
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild2A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation1Grandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation1Parent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild1A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild1B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation2Child1)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild2A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation2Child2)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation2Grandchild1A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation2Grandchild1B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation2Grandchild2A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelDeclaredValidation2Grandchild2B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild1A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild1B),
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild2A),
                        typeof(ModelPublicSetMultilevelDeclaredValidation2Grandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelDeclaredValidation2Parent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetUtcDateTime(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetUtcDateTime
                             {
                                 Item1    = A.Dummy<DateTime>(),
                                 Item2    = A.Dummy<DateTime?>(),
                                 Item3Utc = A.Dummy<UtcDateTime>(),
                                 Item4Utc = A.Dummy<UtcDateTime>(),
                                 Item5Utc = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Item6Utc = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Item7    = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Item8    = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetOptionalConstructorParameters(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<CustomDerivedClass>(),
                                 A.Dummy<IReadOnlyCollection<CustomClass>>(),
                                 A.Dummy<IReadOnlyDictionary<string, CustomClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultipleConstructors(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultipleConstructorsChild1(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultipleConstructorsChild2(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetMultipleConstructorsChild1),
                        typeof(ModelPrivateSetMultipleConstructorsChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetMultipleConstructorsParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultilevelGrandchild2B(
                                 A.Dummy<int>(),
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultilevelGrandchild2A(
                                 A.Dummy<int>(),
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultilevelGrandchild1B(
                                 A.Dummy<int>(),
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetMultilevelGrandchild1A(
                                 A.Dummy<int>(),
                                 A.Dummy<int>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetMultilevelGrandchild2A),
                        typeof(ModelPrivateSetMultilevelGrandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetMultilevelChild2)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetMultilevelGrandchild1A),
                        typeof(ModelPrivateSetMultilevelGrandchild1B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetMultilevelChild1)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetMultilevelGrandchild1A),
                        typeof(ModelPrivateSetMultilevelGrandchild1B),
                        typeof(ModelPrivateSetMultilevelGrandchild2A),
                        typeof(ModelPrivateSetMultilevelGrandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetMultilevelParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelGrandchild1A),
                        typeof(ModelPublicSetMultilevelGrandchild1B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelChild1)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelGrandchild2A),
                        typeof(ModelPublicSetMultilevelGrandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelChild2)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelGrandchild1A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelGrandchild1B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child1Int       = A.Dummy<int>(),
                                 Grandchild1BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelGrandchild2A
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2AInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetMultilevelGrandchild2B
                             {
                                 ParentInt       = A.Dummy<int>(),
                                 Child2Int       = A.Dummy<int>(),
                                 Grandchild2BInt = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetMultilevelGrandchild1A),
                        typeof(ModelPublicSetMultilevelGrandchild1B),
                        typeof(ModelPublicSetMultilevelGrandchild2A),
                        typeof(ModelPublicSetMultilevelGrandchild2B)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetMultilevelParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetEmpty());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetEmptyParentEmptyChild());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetNotEmptyParentEmptyChild(
                                 A.Dummy<IReadOnlyDictionary<string, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetEmptyParentNotEmptyChild(
                                 A.Dummy<IReadOnlyDictionary<string, string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetNotEmptyParentEmptyChild)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetNotEmptyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetEmptyParentEmptyChild),
                        typeof(ModelPrivateSetEmptyParentNotEmptyChild)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetEmptyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetEmpty());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetEmptyParentEmptyChild),
                        typeof(ModelPublicSetEmptyParentNotEmptyChild)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetEmptyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetEmptyParentEmptyChild());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetEmptyParentNotEmptyChild
                             {
                                 ChildReadOnlyDictionaryOfStringString = A.Dummy<IReadOnlyDictionary<string, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetNotEmptyParentEmptyChild)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetNotEmptyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetNotEmptyParentEmptyChild
                             {
                                 ParentReadOnlyDictionaryOfStringString = A.Dummy<IReadOnlyDictionary<string, string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetExpressionBody(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetExpressionBodyChild1(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetExpressionBodyChild2(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetExpressionBodyChild1),
                        typeof(ModelPrivateSetExpressionBodyChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetExpressionBodyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetExpressionBody
                             {
                                 IntProperty                        = A.Dummy<int>(),
                                 StringProperty                     = A.Dummy<string>(),
                                 ReadOnlyCollectionOfStringProperty = A.Dummy<IReadOnlyCollection<string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetExpressionBodyChild1
                             {
                                 ParentIntProperty                        = A.Dummy<int>(),
                                 ParentStringProperty                     = A.Dummy<string>(),
                                 ParentReadOnlyCollectionOfStringProperty = A.Dummy<IReadOnlyCollection<string>>(),
                                 ChildIntProperty                         = A.Dummy<int>(),
                                 ChildStringProperty                      = A.Dummy<string>(),
                                 ChildReadOnlyCollectionOfStringProperty  = A.Dummy<IReadOnlyCollection<string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPublicSetExpressionBodyChild2
                             {
                                 ParentIntProperty                        = A.Dummy<int>(),
                                 ParentStringProperty                     = A.Dummy<string>(),
                                 ParentReadOnlyCollectionOfStringProperty = A.Dummy<IReadOnlyCollection<string>>(),
                                 ChildIntProperty                         = A.Dummy<int>(),
                                 ChildStringProperty                      = A.Dummy<string>(),
                                 ChildReadOnlyCollectionOfStringProperty  = A.Dummy<IReadOnlyCollection<string>>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPublicSetExpressionBodyChild1),
                        typeof(ModelPublicSetExpressionBodyChild2)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPublicSetExpressionBodyParent)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorMissingPropertyChild1(
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<IReadOnlyCollection<string>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorMissingPropertyChild3(
                                 A.Dummy<CustomEnum>(),
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ModelPrivateSetConstructorMissingPropertyChild2(
                                 A.Dummy<IReadOnlyCollection<string>>(),
                                 A.Dummy<CustomClass>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ModelPrivateSetConstructorMissingPropertyChild1),
                        typeof(ModelPrivateSetConstructorMissingPropertyChild2),
                        typeof(ModelPrivateSetConstructorMissingPropertyChild3)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ModelPrivateSetConstructorMissingPropertyParent)AD.ummy(randomType);

                    return result;
                });
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}
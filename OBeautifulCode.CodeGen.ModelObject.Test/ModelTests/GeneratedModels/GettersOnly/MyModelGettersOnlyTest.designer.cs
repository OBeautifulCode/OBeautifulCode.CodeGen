// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Collection.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelGettersOnlyTest
    {
        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer<CodeGenModelObjectTestJsonConfiguration>();

        private static readonly MyModelGettersOnly ObjectForEquatableTests = A.Dummy<MyModelGettersOnly>();

        private static readonly MyModelGettersOnly ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests =
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

        private static readonly MyModelGettersOnly[] ObjectsThatAreNotEqualToObjectForEquatableTests =
        {
            new MyModelGettersOnly(
                    A.Dummy<DateTime>().ThatIsNot(ObjectForEquatableTests.DateTimeProperty),
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    A.Dummy<DateTime?>().ThatIsNot(ObjectForEquatableTests.NullableDateTimeProperty),
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    A.Dummy<DateTime[]>().ThatIsNot(ObjectForEquatableTests.ArrayOfDateTimeProperty),
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    A.Dummy<DateTime?[]>().ThatIsNot(ObjectForEquatableTests.ArrayOfNullableDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    A.Dummy<IReadOnlyCollection<DateTime>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    A.Dummy<IReadOnlyCollection<DateTime?>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    A.Dummy<IReadOnlyList<DateTime>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    A.Dummy<IReadOnlyList<DateTime?>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty),
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
                    ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty),
            new MyModelGettersOnly(
                    ObjectForEquatableTests.DateTimeProperty,
                    ObjectForEquatableTests.NullableDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfDateTimeProperty,
                    ObjectForEquatableTests.ArrayOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyCollectionOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyListOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfNullableDateTimeProperty,
                    ObjectForEquatableTests.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                    A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)),
        };

        private static readonly string ObjectThatIsNotTheSameTypeAsObjectForEquatableTests = A.Dummy<string>();
    
        [Fact]
        public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
        {
            // Arrange
            var systemUnderTest = A.Dummy<MyModelGettersOnly>();

            var expected = Invariant($"{nameof(OBeautifulCode.CodeGen.ModelObject.Test)}.{nameof(MyModelGettersOnly)}: DateTimeProperty = {systemUnderTest.DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, NullableDateTimeProperty = {systemUnderTest.NullableDateTimeProperty?.ToString() ?? "<null>"}, ArrayOfDateTimeProperty = {systemUnderTest.ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ArrayOfNullableDateTimeProperty = {systemUnderTest.ArrayOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionOfDateTimeProperty = {systemUnderTest.ReadOnlyCollectionOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionOfNullableDateTimeProperty = {systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyListOfDateTimeProperty = {systemUnderTest.ReadOnlyListOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyListOfNullableDateTimeProperty = {systemUnderTest.ReadOnlyListOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfDateTimeProperty = {systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfNullableDateTimeProperty = {systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = {systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = {systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToString() ?? "<null>"}.");

            // Act
            var actual = systemUnderTest.ToString();

            // Assert
            actual.AsTest().Must().BeEqualTo(expected);
        }
    
        public static class Constructing
        {
            [Fact]
            public static void MyModelGettersOnly___Should_implement_IModel___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelGettersOnly);
                var expectedModelMethods = typeof(IModel<MyModelGettersOnly>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();
                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelGettersOnly>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_arrayOfDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  null,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("arrayOfDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_arrayOfNullableDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("arrayOfNullableDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyCollectionOfDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyCollectionOfDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyCollectionOfNullableDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyCollectionOfNullableDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfNullableDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfNullableDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyDictionaryOfDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyDictionaryOfDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyDictionaryOfNullableDateTimeProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyDictionaryOfNullableDateTimeProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_is_null()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelGettersOnly(
                                  referenceObject.DateTimeProperty,
                                  referenceObject.NullableDateTimeProperty,
                                  referenceObject.ArrayOfDateTimeProperty,
                                  referenceObject.ArrayOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                  referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyListOfDateTimeProperty,
                                  referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                  referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                  null));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty");
            }

            [Fact]
            public static void DateTimeProperty___Should_return_same_dateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.DateTimeProperty;
                
                // Act
                var actual = systemUnderTest.DateTimeProperty;

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void NullableDateTimeProperty___Should_return_same_nullableDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.NullableDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.NullableDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void ArrayOfDateTimeProperty___Should_return_same_arrayOfDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ArrayOfDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ArrayOfDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ArrayOfNullableDateTimeProperty___Should_return_same_arrayOfNullableDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ArrayOfNullableDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ArrayOfNullableDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyCollectionOfDateTimeProperty___Should_return_same_readOnlyCollectionOfDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyCollectionOfDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyCollectionOfDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyCollectionOfNullableDateTimeProperty___Should_return_same_readOnlyCollectionOfNullableDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfDateTimeProperty___Should_return_same_readOnlyListOfDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyListOfDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfNullableDateTimeProperty___Should_return_same_readOnlyListOfNullableDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyListOfNullableDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfNullableDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyDictionaryOfDateTimeProperty___Should_return_same_readOnlyDictionaryOfDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyDictionaryOfDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyDictionaryOfNullableDateTimeProperty___Should_return_same_readOnlyDictionaryOfNullableDateTimeProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_return_same_readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_return_same_readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange
                var referenceObject = A.Dummy<MyModelGettersOnly>();

                var systemUnderTest = new MyModelGettersOnly(
                                              referenceObject.DateTimeProperty,
                                              referenceObject.NullableDateTimeProperty,
                                              referenceObject.ArrayOfDateTimeProperty,
                                              referenceObject.ArrayOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfDateTimeProperty,
                                              referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyListOfDateTimeProperty,
                                              referenceObject.ReadOnlyListOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty,
                                              referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                var expected = referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }
        }
    
        public static class Cloning
        {
            [Fact]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithDateTimeProperty___Should_deep_clone_object_and_replace_DateTimeProperty_with_the_provided_dateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithDateTimeProperty(referenceObject.DateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithNullableDateTimeProperty___Should_deep_clone_object_and_replace_NullableDateTimeProperty_with_the_provided_nullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithNullableDateTimeProperty(referenceObject.NullableDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithArrayOfDateTimeProperty___Should_deep_clone_object_and_replace_ArrayOfDateTimeProperty_with_the_provided_arrayOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithArrayOfDateTimeProperty(referenceObject.ArrayOfDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithArrayOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ArrayOfNullableDateTimeProperty_with_the_provided_arrayOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithArrayOfNullableDateTimeProperty(referenceObject.ArrayOfNullableDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyCollectionOfDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyCollectionOfDateTimeProperty_with_the_provided_readOnlyCollectionOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyCollectionOfDateTimeProperty(referenceObject.ReadOnlyCollectionOfDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyCollectionOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyCollectionOfNullableDateTimeProperty_with_the_provided_readOnlyCollectionOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyCollectionOfNullableDateTimeProperty(referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfDateTimeProperty_with_the_provided_readOnlyListOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfDateTimeProperty(referenceObject.ReadOnlyListOfDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfNullableDateTimeProperty_with_the_provided_readOnlyListOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfNullableDateTimeProperty(referenceObject.ReadOnlyListOfNullableDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyDictionaryOfDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyDictionaryOfDateTimeProperty_with_the_provided_readOnlyDictionaryOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyDictionaryOfDateTimeProperty(referenceObject.ReadOnlyDictionaryOfDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyDictionaryOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ReadOnlyDictionaryOfNullableDateTimeProperty_with_the_provided_readOnlyDictionaryOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyDictionaryOfNullableDateTimeProperty(referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_with_the_provided_readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_with_the_provided_readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnly>();

                var referenceObject = A.Dummy<MyModelGettersOnly>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                // Assert
                actual.DateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.DateTimeProperty);
                actual.NullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.NullableDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }
        }
    
        public static class Serialization
        {
            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelGettersOnly>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelGettersOnly>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }
    
        public static class Equality
        {
            [Fact]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelGettersOnly systemUnderTest1 = null;
                MyModelGettersOnly systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 == systemUnderTest2;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelGettersOnly systemUnderTest = null;

                // Act
                var result1 = systemUnderTest == ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests == systemUnderTest;

                // Assert
                result1.AsTest().Must().BeFalse();
                result2.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests == ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests == _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() == _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests == ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelGettersOnly systemUnderTest1 = null;
                MyModelGettersOnly systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 != systemUnderTest2;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelGettersOnly systemUnderTest = null;

                // Act
                var result1 = systemUnderTest != ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests != systemUnderTest;

                // Assert
                result1.AsTest().Must().BeTrue();
                result2.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests != ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests != _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() != _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeTrue();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests != ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnly___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange
                MyModelGettersOnly systemUnderTest = null;

                // Act
                var result = ObjectForEquatableTests.Equals(systemUnderTest);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnly___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnly___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals(_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=> _.First().Equals(_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnly___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(null);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsNotTheSameTypeAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals((object)_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First().Equals((object)_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                // Arrange, Act
                var actualHashCodeOfReference = ObjectForEquatableTests.GetHashCode();
                var actualHashCodesInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => _.GetHashCode()).ToList();
                var actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select(_ => _.First().GetHashCode() == _.Last().GetHashCode()).ToList();

                // Assert
                actualHashCodesInNotEqualSet.AsTest().Must().NotContainElement(actualHashCodeOfReference);
                actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                // Arrange, Act
                var hash1 = ObjectForEquatableTests.GetHashCode();
                var hash2 = ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests.GetHashCode();

                // Assert
                hash1.AsTest().Must().BeEqualTo(hash2);
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Collection.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelGettersOnlyParentTest
    {
        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer<CodeGenModelObjectTestJsonConfiguration>();

        private static readonly MyModelGettersOnlyParent ObjectForEquatableTests = A.Dummy<MyModelGettersOnlyParent>();

        private static readonly MyModelGettersOnlyParent ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests = ObjectForEquatableTests.DeepClone();

        private static readonly MyModelGettersOnlyParent[] ObjectsThatAreNotEqualToObjectForEquatableTests =
        {
            ObjectForEquatableTests.DeepCloneWithParentDateTimeProperty(A.Dummy<DateTime>().ThatIsNot(ObjectForEquatableTests.ParentDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentNullableDateTimeProperty(A.Dummy<DateTime?>().ThatIsNot(ObjectForEquatableTests.ParentNullableDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentArrayOfDateTimeProperty(A.Dummy<DateTime[]>().ThatIsNot(ObjectForEquatableTests.ParentArrayOfDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentArrayOfNullableDateTimeProperty(A.Dummy<DateTime?[]>().ThatIsNot(ObjectForEquatableTests.ParentArrayOfNullableDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyCollectionOfDateTimeProperty(A.Dummy<IReadOnlyCollection<DateTime>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyCollectionOfDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyCollectionOfNullableDateTimeProperty(A.Dummy<IReadOnlyCollection<DateTime?>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyCollectionOfNullableDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfDateTimeProperty(A.Dummy<IReadOnlyList<DateTime>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfNullableDateTimeProperty(A.Dummy<IReadOnlyList<DateTime?>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfNullableDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyDictionaryOfDateTimeProperty(A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyDictionaryOfDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyDictionaryOfNullableDateTimeProperty(A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyDictionaryOfNullableDateTimeProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)),
        };

        private static readonly string ObjectThatIsNotTheSameTypeAsObjectForEquatableTests = A.Dummy<string>();
    
        public static class Constructing
        {
            [Fact]
            public static void MyModelGettersOnlyParent___Should_implement_IModel___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelGettersOnlyParent);
                var expectedModelMethods = typeof(IModel<MyModelGettersOnlyParent>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();
                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelGettersOnlyParent>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }
        }
    
        public static class Cloning
        {
            [Fact]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentDateTimeProperty___Should_deep_clone_object_and_replace_ParentDateTimeProperty_with_the_provided_parentDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentDateTimeProperty(referenceObject.ParentDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentNullableDateTimeProperty___Should_deep_clone_object_and_replace_ParentNullableDateTimeProperty_with_the_provided_parentNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentNullableDateTimeProperty(referenceObject.ParentNullableDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentArrayOfDateTimeProperty___Should_deep_clone_object_and_replace_ParentArrayOfDateTimeProperty_with_the_provided_parentArrayOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentArrayOfDateTimeProperty(referenceObject.ParentArrayOfDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentArrayOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ParentArrayOfNullableDateTimeProperty_with_the_provided_parentArrayOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentArrayOfNullableDateTimeProperty(referenceObject.ParentArrayOfNullableDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyCollectionOfDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyCollectionOfDateTimeProperty_with_the_provided_parentReadOnlyCollectionOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyCollectionOfDateTimeProperty(referenceObject.ParentReadOnlyCollectionOfDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyCollectionOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyCollectionOfNullableDateTimeProperty_with_the_provided_parentReadOnlyCollectionOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyCollectionOfNullableDateTimeProperty(referenceObject.ParentReadOnlyCollectionOfNullableDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfDateTimeProperty_with_the_provided_parentReadOnlyListOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfDateTimeProperty(referenceObject.ParentReadOnlyListOfDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfNullableDateTimeProperty_with_the_provided_parentReadOnlyListOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfNullableDateTimeProperty(referenceObject.ParentReadOnlyListOfNullableDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyDictionaryOfDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyDictionaryOfDateTimeProperty_with_the_provided_parentReadOnlyDictionaryOfDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyDictionaryOfDateTimeProperty(referenceObject.ParentReadOnlyDictionaryOfDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyDictionaryOfNullableDateTimeProperty___Should_deep_clone_object_and_replace_ParentReadOnlyDictionaryOfNullableDateTimeProperty_with_the_provided_parentReadOnlyDictionaryOfNullableDateTimeProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyDictionaryOfNullableDateTimeProperty(referenceObject.ParentReadOnlyDictionaryOfNullableDateTimeProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_with_the_provided_parentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(referenceObject.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty_with_the_provided_parentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelGettersOnlyParent>();

                var referenceObject = A.Dummy<MyModelGettersOnlyParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(referenceObject.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

                // Assert
                actual.ParentDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentDateTimeProperty);
                actual.ParentNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentNullableDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyListOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfNullableDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            }
        }
    
        public static class Serialization
        {
            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelGettersOnlyParent>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelGettersOnlyParent>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }
    
        public static class Equality
        {
            [Fact]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelGettersOnlyParent systemUnderTest1 = null;
                MyModelGettersOnlyParent systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 == systemUnderTest2;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelGettersOnlyParent systemUnderTest = null;

                // Act
                var result1 = systemUnderTest == ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests == systemUnderTest;

                // Assert
                result1.AsTest().Must().BeFalse();
                result2.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests == ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests == _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() == _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests == ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelGettersOnlyParent systemUnderTest1 = null;
                MyModelGettersOnlyParent systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 != systemUnderTest2;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelGettersOnlyParent systemUnderTest = null;

                // Act
                var result1 = systemUnderTest != ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests != systemUnderTest;

                // Assert
                result1.AsTest().Must().BeTrue();
                result2.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests != ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests != _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() != _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeTrue();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests != ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnlyParent___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange
                MyModelGettersOnlyParent systemUnderTest = null;

                // Act
                var result = ObjectForEquatableTests.Equals(systemUnderTest);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnlyParent___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnlyParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals(_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=> _.First().Equals(_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelGettersOnlyParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(null);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsNotTheSameTypeAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals((object)_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First().Equals((object)_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                // Arrange, Act
                var actualHashCodeOfReference = ObjectForEquatableTests.GetHashCode();
                var actualHashCodesInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => _.GetHashCode()).ToList();
                var actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select(_ => _.First().GetHashCode() == _.Last().GetHashCode()).ToList();

                // Assert
                actualHashCodesInNotEqualSet.AsTest().Must().NotContainElement(actualHashCodeOfReference);
                actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                // Arrange, Act
                var hash1 = ObjectForEquatableTests.GetHashCode();
                var hash2 = ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests.GetHashCode();

                // Assert
                hash1.AsTest().Must().BeEqualTo(hash2);
            }
        }
    }
}
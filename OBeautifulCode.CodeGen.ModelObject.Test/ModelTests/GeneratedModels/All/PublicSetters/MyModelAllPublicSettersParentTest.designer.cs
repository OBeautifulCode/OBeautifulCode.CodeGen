// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.CodeGen.ModelObject.Recipes;
    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Math.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    public static partial class MyModelAllPublicSettersParentTest
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer(SerializationConfigurationTypes.BsonConfigurationType);

        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer(SerializationConfigurationTypes.JsonConfigurationType);

        private static readonly DeepCloneWithTestScenarios<MyModelAllPublicSettersParent> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<MyModelAllPublicSettersParent>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentBoolProperty.IsEqualTo(_.ParentBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentGuidProperty.IsEqualTo(_.ParentGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentDateTimeProperty.IsEqualTo(_.ParentDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentModelEnumProperty.IsEqualTo(_.ParentModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentModelFlagsEnumProperty.IsEqualTo(_.ParentModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentModelClassProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentModelClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentModelClassProperty.IsEqualTo(_.ParentModelClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentModelClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableBoolProperty.IsEqualTo(_.ParentNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableIntProperty.IsEqualTo(_.ParentNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableGuidProperty.IsEqualTo(_.ParentNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableDateTimeProperty.IsEqualTo(_.ParentNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableModelEnumProperty.IsEqualTo(_.ParentNullableModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentNullableModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentNullableModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentNullableModelFlagsEnumProperty.IsEqualTo(_.ParentNullableModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfBoolProperty.IsEqualTo(_.ParentArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfIntProperty.IsEqualTo(_.ParentArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfStringProperty.IsEqualTo(_.ParentArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfGuidProperty.IsEqualTo(_.ParentArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfDateTimeProperty.IsEqualTo(_.ParentArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfModelEnumProperty.IsEqualTo(_.ParentArrayOfModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfModelFlagsEnumProperty.IsEqualTo(_.ParentArrayOfModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfModelClassProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfModelClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfModelClassProperty.IsEqualTo(_.ParentArrayOfModelClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfModelClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableBoolProperty.IsEqualTo(_.ParentArrayOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableIntProperty.IsEqualTo(_.ParentArrayOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableGuidProperty.IsEqualTo(_.ParentArrayOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableDateTimeProperty.IsEqualTo(_.ParentArrayOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableModelEnumProperty.IsEqualTo(_.ParentArrayOfNullableModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentArrayOfNullableModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableModelFlagsEnumProperty.IsEqualTo(_.ParentArrayOfNullableModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfModelClassProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfModelClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfModelClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfModelClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfModelEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfModelClassProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfModelClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfModelClassProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfModelClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfModelClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableModelEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelClassProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfModelClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelClassProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfModelClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfModelClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableIntProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableGuidProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentCollectionOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentCollectionOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentCollectionOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentCollectionOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCollectionOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentListInterfaceOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentListInterfaceOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentListInterfaceOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentListOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentListOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentListOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentListOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentListOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                        var referenceObject = A.Dummy<MyModelAllPublicSettersParent>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<MyModelAllPublicSettersParent>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                });

        private static readonly MyModelAllPublicSettersParent ReferenceObjectForEquatableTestScenarios = A.Dummy<MyModelAllPublicSettersParent>();

        private static readonly EquatableTestScenarios<MyModelAllPublicSettersParent> EquatableTestScenarios = new EquatableTestScenarios<MyModelAllPublicSettersParent>()
            .AddScenario(() =>
                new EquatableTestScenario<MyModelAllPublicSettersParent>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new MyModelAllPublicSettersParent[]
                    {
                        ReferenceObjectForEquatableTestScenarios.DeepClone(),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new MyModelAllPublicSettersParent[]
                    {
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentBoolProperty)).ParentBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGuidProperty)).ParentGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty)).ParentDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentModelEnumProperty)).ParentModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentModelFlagsEnumProperty)).ParentModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentModelClassProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentModelClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentModelClassProperty)).ParentModelClassProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableBoolProperty)).ParentNullableBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableIntProperty)).ParentNullableIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableGuidProperty)).ParentNullableGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableDateTimeProperty)).ParentNullableDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableModelEnumProperty)).ParentNullableModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentNullableModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentNullableModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableModelFlagsEnumProperty)).ParentNullableModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty)).ParentArrayOfBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty)).ParentArrayOfIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty)).ParentArrayOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty)).ParentArrayOfGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty)).ParentArrayOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfModelEnumProperty)).ParentArrayOfModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfModelFlagsEnumProperty)).ParentArrayOfModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfModelClassProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfModelClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfModelClassProperty)).ParentArrayOfModelClassProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty)).ParentArrayOfNullableBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty)).ParentArrayOfNullableIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty)).ParentArrayOfNullableGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty)).ParentArrayOfNullableDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableModelEnumProperty)).ParentArrayOfNullableModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentArrayOfNullableModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentArrayOfNullableModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableModelFlagsEnumProperty)).ParentArrayOfNullableModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty)).ParentReadOnlyCollectionInterfaceOfBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty)).ParentReadOnlyCollectionInterfaceOfIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty)).ParentReadOnlyCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty)).ParentReadOnlyCollectionInterfaceOfGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty)).ParentReadOnlyCollectionInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfModelEnumProperty)).ParentReadOnlyCollectionInterfaceOfModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty)).ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfModelClassProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfModelClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfModelClassProperty)).ParentReadOnlyCollectionInterfaceOfModelClassProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty)).ParentReadOnlyCollectionInterfaceOfNullableBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty)).ParentReadOnlyCollectionInterfaceOfNullableIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty)).ParentReadOnlyCollectionInterfaceOfNullableGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty)).ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty)).ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty)).ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty)).ParentReadOnlyListInterfaceOfBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty)).ParentReadOnlyListInterfaceOfIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty)).ParentReadOnlyListInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty)).ParentReadOnlyListInterfaceOfGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfModelEnumProperty)).ParentReadOnlyListInterfaceOfModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty)).ParentReadOnlyListInterfaceOfModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfModelClassProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfModelClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfModelClassProperty)).ParentReadOnlyListInterfaceOfModelClassProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty)).ParentReadOnlyListInterfaceOfNullableBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty)).ParentReadOnlyListInterfaceOfNullableIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty)).ParentReadOnlyListInterfaceOfNullableGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty)).ParentReadOnlyListInterfaceOfNullableDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableModelEnumProperty)).ParentReadOnlyListInterfaceOfNullableModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty)).ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty)).ParentReadOnlyDictionaryInterfaceOfBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty)).ParentReadOnlyDictionaryInterfaceOfIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty)).ParentReadOnlyDictionaryInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty)).ParentReadOnlyDictionaryInterfaceOfGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty)).ParentReadOnlyDictionaryInterfaceOfModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty)).ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfModelClassProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfModelClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfModelClassProperty)).ParentReadOnlyDictionaryInterfaceOfModelClassProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableBoolProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty)).ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableIntProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty)).ParentReadOnlyDictionaryInterfaceOfNullableIntProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableGuidProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty)).ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty)).ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty)).ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty)).ParentCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentCollectionOfCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentCollectionOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCollectionOfCollectionInterfaceOfStringProperty)).ParentCollectionOfCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentListInterfaceOfCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty)).ParentListInterfaceOfCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentListOfCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentListOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentListOfCollectionInterfaceOfStringProperty)).ParentListOfCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty)).ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty)).ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty)).ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        ReferenceObjectForEquatableTestScenarios.DeepCloneWithParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty(A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty),
                    },
                    ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject = new MyModelAllPublicSettersParent[]
                    {
                        A.Dummy<MyModelAllPublicSettersParent>().Whose(_ => _.GetType() != ReferenceObjectForEquatableTestScenarios.GetType()),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void MyModelAllPublicSettersParent___Should_implement_IModel_of_MyModelAllPublicSettersParent___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelAllPublicSettersParent);

                var expectedModelMethods = typeof(IModel<MyModelAllPublicSettersParent>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelAllPublicSettersParent>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                // Act
                var actual = (MyModelAllPublicSettersParent)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelAllPublicSettersParent>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ParentModelClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelClassProperty);
                actual.ParentArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfBoolProperty);
                actual.ParentArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfIntProperty);
                actual.ParentArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfStringProperty);
                actual.ParentArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfGuidProperty);
                actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                actual.ParentArrayOfModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfModelEnumProperty);
                actual.ParentArrayOfModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfModelFlagsEnumProperty);
                actual.ParentArrayOfModelClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfModelClassProperty);
                actual.ParentArrayOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableBoolProperty);
                actual.ParentArrayOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableIntProperty);
                actual.ParentArrayOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableGuidProperty);
                actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                actual.ParentArrayOfNullableModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableModelEnumProperty);
                actual.ParentArrayOfNullableModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableModelFlagsEnumProperty);
                actual.ParentReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty);
                actual.ParentReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty);
                actual.ParentReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty);
                actual.ParentReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty);
                actual.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty);
                actual.ParentReadOnlyCollectionInterfaceOfModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelEnumProperty);
                actual.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty);
                actual.ParentReadOnlyCollectionInterfaceOfModelClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfModelClassProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty);
                actual.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty);
                actual.ParentReadOnlyListInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty);
                actual.ParentReadOnlyListInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty);
                actual.ParentReadOnlyListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty);
                actual.ParentReadOnlyListInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty);
                actual.ParentReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentReadOnlyListInterfaceOfModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfModelEnumProperty);
                actual.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfModelFlagsEnumProperty);
                actual.ParentReadOnlyListInterfaceOfModelClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfModelClassProperty);
                actual.ParentReadOnlyListInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty);
                actual.ParentReadOnlyListInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty);
                actual.ParentReadOnlyListInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty);
                actual.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty);
                actual.ParentReadOnlyListInterfaceOfNullableModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableModelEnumProperty);
                actual.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelEnumProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfModelClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfModelClassProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty);
                actual.ParentCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCollectionInterfaceOfStringProperty);
                actual.ParentCollectionOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCollectionOfCollectionInterfaceOfStringProperty);
                actual.ParentListInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty);
                actual.ParentListOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentListOfCollectionInterfaceOfStringProperty);
                actual.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty);
                actual.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                actual.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentBoolProperty", "ParentIntProperty", "ParentStringProperty", "ParentGuidProperty", "ParentDateTimeProperty", "ParentModelEnumProperty", "ParentModelFlagsEnumProperty", "ParentModelClassProperty", "ParentNullableBoolProperty", "ParentNullableIntProperty", "ParentNullableGuidProperty", "ParentNullableDateTimeProperty", "ParentNullableModelEnumProperty", "ParentNullableModelFlagsEnumProperty", "ParentArrayOfBoolProperty", "ParentArrayOfIntProperty", "ParentArrayOfStringProperty", "ParentArrayOfGuidProperty", "ParentArrayOfDateTimeProperty", "ParentArrayOfModelEnumProperty", "ParentArrayOfModelFlagsEnumProperty", "ParentArrayOfModelClassProperty", "ParentArrayOfNullableBoolProperty", "ParentArrayOfNullableIntProperty", "ParentArrayOfNullableGuidProperty", "ParentArrayOfNullableDateTimeProperty", "ParentArrayOfNullableModelEnumProperty", "ParentArrayOfNullableModelFlagsEnumProperty", "ParentReadOnlyCollectionInterfaceOfBoolProperty", "ParentReadOnlyCollectionInterfaceOfIntProperty", "ParentReadOnlyCollectionInterfaceOfStringProperty", "ParentReadOnlyCollectionInterfaceOfGuidProperty", "ParentReadOnlyCollectionInterfaceOfDateTimeProperty", "ParentReadOnlyCollectionInterfaceOfModelEnumProperty", "ParentReadOnlyCollectionInterfaceOfModelFlagsEnumProperty", "ParentReadOnlyCollectionInterfaceOfModelClassProperty", "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty", "ParentReadOnlyCollectionInterfaceOfNullableIntProperty", "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty", "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty", "ParentReadOnlyCollectionInterfaceOfNullableModelEnumProperty", "ParentReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty", "ParentReadOnlyListInterfaceOfBoolProperty", "ParentReadOnlyListInterfaceOfIntProperty", "ParentReadOnlyListInterfaceOfStringProperty", "ParentReadOnlyListInterfaceOfGuidProperty", "ParentReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyListInterfaceOfModelEnumProperty", "ParentReadOnlyListInterfaceOfModelFlagsEnumProperty", "ParentReadOnlyListInterfaceOfModelClassProperty", "ParentReadOnlyListInterfaceOfNullableBoolProperty", "ParentReadOnlyListInterfaceOfNullableIntProperty", "ParentReadOnlyListInterfaceOfNullableGuidProperty", "ParentReadOnlyListInterfaceOfNullableDateTimeProperty", "ParentReadOnlyListInterfaceOfNullableModelEnumProperty", "ParentReadOnlyListInterfaceOfNullableModelFlagsEnumProperty", "ParentReadOnlyDictionaryInterfaceOfBoolProperty", "ParentReadOnlyDictionaryInterfaceOfIntProperty", "ParentReadOnlyDictionaryInterfaceOfStringProperty", "ParentReadOnlyDictionaryInterfaceOfGuidProperty", "ParentReadOnlyDictionaryInterfaceOfModelEnumProperty", "ParentReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty", "ParentReadOnlyDictionaryInterfaceOfModelClassProperty", "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty", "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty", "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty", "ParentReadOnlyDictionaryInterfaceOfNullableModelEnumProperty", "ParentReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty", "ParentCollectionInterfaceOfStringProperty", "ParentCollectionOfCollectionInterfaceOfStringProperty", "ParentListInterfaceOfCollectionInterfaceOfStringProperty", "ParentListOfCollectionInterfaceOfStringProperty", "ParentReadOnlyCollectionOfCollectionInterfaceOfStringProperty", "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "ParentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty", "ParentConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (MyModelAllPublicSettersParent)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(MyModelAllPublicSettersParent).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here because OBC Assertion uses declared types and not runtime types to identify the contract to use.
                            // In this unit test we fetch property values using PropertyInfo.GetValue(), and as such the declared type is Object and its
                            // contract is to determine equality based on reference equality.  The type we want to use is the property's real type, PropertyInfo.PropertyType.
                            // For example, these two arrays of boolean are NOT equal if they are declared as objects:
                            // object x = new[] { true, false };
                            // object y = new[] { true, false };
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();
                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);
                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelAllPublicSettersParent>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelAllPublicSettersParent>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelAllPublicSettersParent>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<MyModelAllPublicSettersParent>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelAllPublicSettersParent>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelAllPublicSettersParent>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelAllPublicSettersParent>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<MyModelAllPublicSettersParent>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelAllPublicSettersParent systemUnderTest1 = null;
                MyModelAllPublicSettersParent systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    MyModelAllPublicSettersParent systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelAllPublicSettersParent systemUnderTest1 = null;
                MyModelAllPublicSettersParent systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    MyModelAllPublicSettersParent systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_MyModelAllPublicSettersParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    MyModelAllPublicSettersParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_MyModelAllPublicSettersParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_MyModelAllPublicSettersParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_MyModelAllPublicSettersParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_MyModelAllPublicSettersParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
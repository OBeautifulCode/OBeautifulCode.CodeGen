// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Collection.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPublicSettersParentTest
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer<CodeGenModelObjectTestBsonConfiguration>();
        
        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer<CodeGenModelObjectTestJsonConfiguration>();

        private static readonly MyModelPublicSettersParent ObjectForEquatableTests = A.Dummy<MyModelPublicSettersParent>();

        private static readonly MyModelPublicSettersParent ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests = ObjectForEquatableTests.DeepClone();

        private static readonly MyModelPublicSettersParent[] ObjectsThatAreNotEqualToObjectForEquatableTests =
        {
            ObjectForEquatableTests.DeepCloneWithParentIntProperty(A.Dummy<int>().ThatIsNot(ObjectForEquatableTests.ParentIntProperty)),
            ObjectForEquatableTests.DeepCloneWithParentStringProperty(A.Dummy<string>().ThatIsNot(ObjectForEquatableTests.ParentStringProperty)),
            ObjectForEquatableTests.DeepCloneWithParentModelEquatableClassProperty(A.Dummy<ModelEquatableClass>().ThatIsNot(ObjectForEquatableTests.ParentModelEquatableClassProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfIntProperty(A.Dummy<IReadOnlyList<int>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfIntProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfStringProperty(A.Dummy<IReadOnlyList<string>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfStringProperty)),
            ObjectForEquatableTests.DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty(A.Dummy<IReadOnlyList<ModelEquatableClass>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty)),
        };

        private static readonly string ObjectThatIsNotTheSameTypeAsObjectForEquatableTests = A.Dummy<string>();
    
        public static class Constructing
        {
            [Fact]
            public static void MyModelPublicSettersParent___Should_implement_IModel___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelPublicSettersParent);
                var expectedModelMethods = typeof(IModel<MyModelPublicSettersParent>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();
                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelPublicSettersParent>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }
        }
    
        public static class Cloning
        {
            [Fact]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentIntProperty___Should_deep_clone_object_and_replace_ParentIntProperty_with_the_provided_parentIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentIntProperty(referenceObject.ParentIntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(referenceObject.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentStringProperty___Should_deep_clone_object_and_replace_ParentStringProperty_with_the_provided_parentStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentStringProperty(referenceObject.ParentStringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentModelEquatableClassProperty___Should_deep_clone_object_and_replace_ParentModelEquatableClassProperty_with_the_provided_parentModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentModelEquatableClassProperty(referenceObject.ParentModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfIntProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfIntProperty_with_the_provided_parentReadOnlyListOfIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfIntProperty(referenceObject.ParentReadOnlyListOfIntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfStringProperty_with_the_provided_parentReadOnlyListOfStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfStringProperty(referenceObject.ParentReadOnlyListOfStringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfModelEquatableClassProperty_with_the_provided_parentReadOnlyListOfModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPublicSettersParent>();

                var referenceObject = A.Dummy<MyModelPublicSettersParent>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty(referenceObject.ParentReadOnlyListOfModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfModelEquatableClassProperty);
            }
        }
    
        public static class Serialization
        {
            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPublicSettersParent>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPublicSettersParent>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPublicSettersParent>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPublicSettersParent>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }
    
        public static class Equality
        {
            [Fact]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPublicSettersParent systemUnderTest1 = null;
                MyModelPublicSettersParent systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 == systemUnderTest2;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPublicSettersParent systemUnderTest = null;

                // Act
                var result1 = systemUnderTest == ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests == systemUnderTest;

                // Assert
                result1.AsTest().Must().BeFalse();
                result2.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests == ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests == _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() == _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests == ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPublicSettersParent systemUnderTest1 = null;
                MyModelPublicSettersParent systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 != systemUnderTest2;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPublicSettersParent systemUnderTest = null;

                // Act
                var result1 = systemUnderTest != ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests != systemUnderTest;

                // Assert
                result1.AsTest().Must().BeTrue();
                result2.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests != ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests != _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() != _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeTrue();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests != ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPublicSettersParent___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange
                MyModelPublicSettersParent systemUnderTest = null;

                // Act
                var result = ObjectForEquatableTests.Equals(systemUnderTest);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPublicSettersParent___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_MyModelPublicSettersParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals(_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=> _.First().Equals(_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPublicSettersParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(null);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsNotTheSameTypeAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals((object)_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First().Equals((object)_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                // Arrange, Act
                var actualHashCodeOfReference = ObjectForEquatableTests.GetHashCode();
                var actualHashCodesInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => _.GetHashCode()).ToList();
                var actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select(_ => _.First().GetHashCode() == _.Last().GetHashCode()).ToList();

                // Assert
                actualHashCodesInNotEqualSet.AsTest().Must().NotContainElement(actualHashCodeOfReference);
                actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                // Arrange, Act
                var hash1 = ObjectForEquatableTests.GetHashCode();
                var hash2 = ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests.GetHashCode();

                // Assert
                hash1.AsTest().Must().BeEqualTo(hash2);
            }
        }
    }
}
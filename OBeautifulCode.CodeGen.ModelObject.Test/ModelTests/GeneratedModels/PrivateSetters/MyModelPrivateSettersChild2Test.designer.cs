// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Collection.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPrivateSettersChild2Test
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer<CodeGenModelObjectTestBsonConfiguration>();
        
        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer<CodeGenModelObjectTestJsonConfiguration>();

        private static readonly MyModelPrivateSettersChild2 ObjectForEquatableTests = A.Dummy<MyModelPrivateSettersChild2>();

        private static readonly MyModelPrivateSettersChild2 ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests =
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty);

        private static readonly MyModelPrivateSettersChild2[] ObjectsThatAreNotEqualToObjectForEquatableTests =
        {
            new MyModelPrivateSettersChild2(
                    A.Dummy<int>().ThatIsNot(ObjectForEquatableTests.ParentIntProperty),
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    A.Dummy<string>().ThatIsNot(ObjectForEquatableTests.ParentStringProperty),
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    A.Dummy<ModelEquatableClass>().ThatIsNot(ObjectForEquatableTests.ParentModelEquatableClassProperty),
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    A.Dummy<IReadOnlyList<int>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfIntProperty),
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    A.Dummy<IReadOnlyList<string>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfStringProperty),
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    A.Dummy<IReadOnlyList<ModelEquatableClass>>().ThatIsNot(ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty),
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    A.Dummy<int>().ThatIsNot(ObjectForEquatableTests.Child2IntProperty),
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    A.Dummy<string>().ThatIsNot(ObjectForEquatableTests.Child2StringProperty),
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    A.Dummy<ModelEquatableClass>().ThatIsNot(ObjectForEquatableTests.Child2ModelEquatableClassProperty),
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    A.Dummy<IReadOnlyList<int>>().ThatIsNot(ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty),
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    A.Dummy<IReadOnlyList<string>>().ThatIsNot(ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty),
                    ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSettersChild2(
                    ObjectForEquatableTests.ParentIntProperty,
                    ObjectForEquatableTests.ParentStringProperty,
                    ObjectForEquatableTests.ParentModelEquatableClassProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ParentReadOnlyListOfModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2IntProperty,
                    ObjectForEquatableTests.Child2StringProperty,
                    ObjectForEquatableTests.Child2ModelEquatableClassProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.Child2ReadOnlyListOfStringProperty,
                    A.Dummy<IReadOnlyList<ModelEquatableClass>>().ThatIsNot(ObjectForEquatableTests.Child2ReadOnlyListOfModelEquatableClassProperty)),
        };

        private static readonly string ObjectThatIsNotTheSameTypeAsObjectForEquatableTests = A.Dummy<string>();
    
        [Fact]
        public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
        {
            // Arrange
            var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

            var expected = Invariant($"Test.MyModelPrivateSettersChild2: ParentIntProperty = {systemUnderTest.ParentIntProperty}, ParentStringProperty = {systemUnderTest.ParentStringProperty}, ParentModelEquatableClassProperty = {systemUnderTest.ParentModelEquatableClassProperty}, ParentReadOnlyListOfIntProperty = {systemUnderTest.ParentReadOnlyListOfIntProperty}, ParentReadOnlyListOfStringProperty = {systemUnderTest.ParentReadOnlyListOfStringProperty}, ParentReadOnlyListOfModelEquatableClassProperty = {systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty}, Child2IntProperty = {systemUnderTest.Child2IntProperty}, Child2StringProperty = {systemUnderTest.Child2StringProperty}, Child2ModelEquatableClassProperty = {systemUnderTest.Child2ModelEquatableClassProperty}, Child2ReadOnlyListOfIntProperty = {systemUnderTest.Child2ReadOnlyListOfIntProperty}, Child2ReadOnlyListOfStringProperty = {systemUnderTest.Child2ReadOnlyListOfStringProperty}, Child2ReadOnlyListOfModelEquatableClassProperty = {systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty}.");

            // Act
            var actual = systemUnderTest.ToString();

            // Assert
            actual.AsTest().Must().BeEqualTo(expected);
        }
    
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Grouping construct for unit test runner.")]
        public static class Constructing
        {
            [Fact]
            public static void MyModelPrivateSettersChild2___Should_implement_IModel___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelPrivateSettersChild2);
                var expectedModelMethods = typeof(IModel<MyModelPrivateSettersChild2>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();
                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelPrivateSettersChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_parentStringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  null,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("parentStringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentException___When_parameter_parentStringProperty_is_white_space()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  Invariant($"  {Environment.NewLine}  "),
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentException>();
                actual.Message.AsTest().Must().ContainString("parentStringProperty");
                actual.Message.AsTest().Must().ContainString("white space");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_parentModelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  null,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("parentModelEquatableClassProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_parentReadOnlyListOfIntProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  null,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("parentReadOnlyListOfIntProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_parentReadOnlyListOfStringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  null,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("parentReadOnlyListOfStringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_parentReadOnlyListOfModelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  null,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("parentReadOnlyListOfModelEquatableClassProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_child2StringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  null,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("child2StringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentException___When_parameter_child2StringProperty_is_white_space()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  Invariant($"  {Environment.NewLine}  "),
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentException>();
                actual.Message.AsTest().Must().ContainString("child2StringProperty");
                actual.Message.AsTest().Must().ContainString("white space");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_child2ModelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  null,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("child2ModelEquatableClassProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_child2ReadOnlyListOfIntProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  null,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("child2ReadOnlyListOfIntProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_child2ReadOnlyListOfStringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  null,
                                  referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("child2ReadOnlyListOfStringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_child2ReadOnlyListOfModelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSettersChild2(
                                  referenceObject.ParentIntProperty,
                                  referenceObject.ParentStringProperty,
                                  referenceObject.ParentModelEquatableClassProperty,
                                  referenceObject.ParentReadOnlyListOfIntProperty,
                                  referenceObject.ParentReadOnlyListOfStringProperty,
                                  referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                  referenceObject.Child2IntProperty,
                                  referenceObject.Child2StringProperty,
                                  referenceObject.Child2ModelEquatableClassProperty,
                                  referenceObject.Child2ReadOnlyListOfIntProperty,
                                  referenceObject.Child2ReadOnlyListOfStringProperty,
                                  null));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("child2ReadOnlyListOfModelEquatableClassProperty");
            }

            [Fact]
            public static void ParentIntProperty___Should_return_same_parentIntProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentIntProperty;
                
                // Act
                var actual = systemUnderTest.ParentIntProperty;

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void ParentStringProperty___Should_return_same_parentStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentStringProperty;
                
                // Act
                var actual = systemUnderTest.ParentStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ParentModelEquatableClassProperty___Should_return_same_parentModelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.ParentModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ParentReadOnlyListOfIntProperty___Should_return_same_parentReadOnlyListOfIntProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentReadOnlyListOfIntProperty;
                
                // Act
                var actual = systemUnderTest.ParentReadOnlyListOfIntProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ParentReadOnlyListOfStringProperty___Should_return_same_parentReadOnlyListOfStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentReadOnlyListOfStringProperty;
                
                // Act
                var actual = systemUnderTest.ParentReadOnlyListOfStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ParentReadOnlyListOfModelEquatableClassProperty___Should_return_same_parentReadOnlyListOfModelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ParentReadOnlyListOfModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void Child2IntProperty___Should_return_same_child2IntProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2IntProperty;
                
                // Act
                var actual = systemUnderTest.Child2IntProperty;

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void Child2StringProperty___Should_return_same_child2StringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2StringProperty;
                
                // Act
                var actual = systemUnderTest.Child2StringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void Child2ModelEquatableClassProperty___Should_return_same_child2ModelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2ModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.Child2ModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void Child2ReadOnlyListOfIntProperty___Should_return_same_child2ReadOnlyListOfIntProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2ReadOnlyListOfIntProperty;
                
                // Act
                var actual = systemUnderTest.Child2ReadOnlyListOfIntProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void Child2ReadOnlyListOfStringProperty___Should_return_same_child2ReadOnlyListOfStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2ReadOnlyListOfStringProperty;
                
                // Act
                var actual = systemUnderTest.Child2ReadOnlyListOfStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void Child2ReadOnlyListOfModelEquatableClassProperty___Should_return_same_child2ReadOnlyListOfModelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>();

                var systemUnderTest = new MyModelPrivateSettersChild2(
                                              referenceObject.ParentIntProperty,
                                              referenceObject.ParentStringProperty,
                                              referenceObject.ParentModelEquatableClassProperty,
                                              referenceObject.ParentReadOnlyListOfIntProperty,
                                              referenceObject.ParentReadOnlyListOfStringProperty,
                                              referenceObject.ParentReadOnlyListOfModelEquatableClassProperty,
                                              referenceObject.Child2IntProperty,
                                              referenceObject.Child2StringProperty,
                                              referenceObject.Child2ModelEquatableClassProperty,
                                              referenceObject.Child2ReadOnlyListOfIntProperty,
                                              referenceObject.Child2ReadOnlyListOfStringProperty,
                                              referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }
        }
    
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Grouping construct for unit test runner.")]
        public static class Cloning
        {
            [Fact]
            public static void DeepClone_override___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepClone_explicit_interface___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                // Act
                var actual = ((IDeepCloneable<MyModelPrivateSettersChild2>)systemUnderTest).DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentIntProperty___Should_deep_clone_object_and_replace_ParentIntProperty_with_the_provided_parentIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentIntProperty(referenceObject.ParentIntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(referenceObject.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentStringProperty___Should_deep_clone_object_and_replace_ParentStringProperty_with_the_provided_parentStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentStringProperty(referenceObject.ParentStringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentModelEquatableClassProperty___Should_deep_clone_object_and_replace_ParentModelEquatableClassProperty_with_the_provided_parentModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentModelEquatableClassProperty(referenceObject.ParentModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfIntProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfIntProperty_with_the_provided_parentReadOnlyListOfIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentReadOnlyListOfIntProperty(referenceObject.ParentReadOnlyListOfIntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfStringProperty_with_the_provided_parentReadOnlyListOfStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentReadOnlyListOfStringProperty(referenceObject.ParentReadOnlyListOfStringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty___Should_deep_clone_object_and_replace_ParentReadOnlyListOfModelEquatableClassProperty_with_the_provided_parentReadOnlyListOfModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = (MyModelPrivateSettersChild2)systemUnderTest.DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty(referenceObject.ParentReadOnlyListOfModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2IntProperty___Should_deep_clone_object_and_replace_Child2IntProperty_with_the_provided_child2IntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2IntProperty(referenceObject.Child2IntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(referenceObject.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2StringProperty___Should_deep_clone_object_and_replace_Child2StringProperty_with_the_provided_child2StringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2StringProperty(referenceObject.Child2StringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(referenceObject.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2ModelEquatableClassProperty___Should_deep_clone_object_and_replace_Child2ModelEquatableClassProperty_with_the_provided_child2ModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2ModelEquatableClassProperty(referenceObject.Child2ModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2ReadOnlyListOfIntProperty___Should_deep_clone_object_and_replace_Child2ReadOnlyListOfIntProperty_with_the_provided_child2ReadOnlyListOfIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2ReadOnlyListOfIntProperty(referenceObject.Child2ReadOnlyListOfIntProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(referenceObject.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2ReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_Child2ReadOnlyListOfStringProperty_with_the_provided_child2ReadOnlyListOfStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2ReadOnlyListOfStringProperty(referenceObject.Child2ReadOnlyListOfStringProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithChild2ReadOnlyListOfModelEquatableClassProperty___Should_deep_clone_object_and_replace_Child2ReadOnlyListOfModelEquatableClassProperty_with_the_provided_child2ReadOnlyListOfModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSettersChild2>();

                var referenceObject = A.Dummy<MyModelPrivateSettersChild2>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithChild2ReadOnlyListOfModelEquatableClassProperty(referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);

                // Assert
                actual.ParentIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentIntProperty);
                actual.ParentStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentStringProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentModelEquatableClassProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfIntProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfStringProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.ParentReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListOfModelEquatableClassProperty);
                actual.Child2IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2IntProperty);
                actual.Child2StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2StringProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ModelEquatableClassProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfIntProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListOfStringProperty);
                actual.Child2ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.Child2ReadOnlyListOfModelEquatableClassProperty);
            }
        }
    
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces", Justification = "Name is correct.")]
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Grouping construct for unit test runner.")]
        public static class Serialization
        {
            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPrivateSettersChild2>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPrivateSettersChild2>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPrivateSettersChild2>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPrivateSettersChild2>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }
    
        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", Justification = "Grouping construct for unit test runner.")]
        public static class Equality
        {
            [Fact]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPrivateSettersChild2 systemUnderTest1 = null;
                MyModelPrivateSettersChild2 systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 == systemUnderTest2;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPrivateSettersChild2 systemUnderTest = null;

                // Act
                var result1 = systemUnderTest == ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests == systemUnderTest;

                // Assert
                result1.AsTest().Must().BeFalse();
                result2.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests == ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests == _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() == _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests == ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPrivateSettersChild2 systemUnderTest1 = null;
                MyModelPrivateSettersChild2 systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 != systemUnderTest2;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPrivateSettersChild2 systemUnderTest = null;

                // Act
                var result1 = systemUnderTest != ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests != systemUnderTest;

                // Assert
                result1.AsTest().Must().BeTrue();
                result2.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests != ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests != _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() != _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeTrue();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests != ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSettersChild2___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange
                MyModelPrivateSettersChild2 systemUnderTest = null;

                // Act
                var result = ObjectForEquatableTests.Equals(systemUnderTest);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSettersChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSettersChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals(_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=> _.First().Equals(_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSettersChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(null);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsNotTheSameTypeAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals((object)_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First().Equals((object)_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                // Arrange, Act
                var actualHashCodeOfReference = ObjectForEquatableTests.GetHashCode();
                var actualHashCodesInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => _.GetHashCode()).ToList();
                var actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select(_ => _.First().GetHashCode() == _.Last().GetHashCode()).ToList();

                // Assert
                actualHashCodesInNotEqualSet.AsTest().Must().NotContainElement(actualHashCodeOfReference);
                actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                // Arrange, Act
                var hash1 = ObjectForEquatableTests.GetHashCode();
                var hash2 = ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests.GetHashCode();

                // Assert
                hash1.AsTest().Must().BeEqualTo(hash2);
            }
        }
    }
}
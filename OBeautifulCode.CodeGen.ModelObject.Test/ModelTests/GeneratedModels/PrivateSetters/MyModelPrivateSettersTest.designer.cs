// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Reflection;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.AutoFakeItEasy;
    using OBeautifulCode.Collection.Recipes;
    using OBeautifulCode.Representation.System;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Type;

    using Xunit;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPrivateSettersTest
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer<CodeGenModelObjectTestBsonConfiguration>();
        
        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer<CodeGenModelObjectTestJsonConfiguration>();

        private static readonly MyModelPrivateSetters ObjectForEquatableTests = A.Dummy<MyModelPrivateSetters>();

        private static readonly MyModelPrivateSetters ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests =
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    ObjectForEquatableTests.StringProperty,
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty);

        private static readonly MyModelPrivateSetters[] ObjectsThatAreNotEqualToObjectForEquatableTests =
        {
            new MyModelPrivateSetters(
                    A.Dummy<int>().ThatIsNot(ObjectForEquatableTests.IntProperty),
                    ObjectForEquatableTests.StringProperty,
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    A.Dummy<string>().ThatIsNot(ObjectForEquatableTests.StringProperty),
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    ObjectForEquatableTests.StringProperty,
                    A.Dummy<ModelEquatableClass>().ThatIsNot(ObjectForEquatableTests.ModelEquatableClassProperty),
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    ObjectForEquatableTests.StringProperty,
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    A.Dummy<IReadOnlyList<int>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfIntProperty),
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    ObjectForEquatableTests.StringProperty,
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    A.Dummy<IReadOnlyList<string>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfStringProperty),
                    ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty),
            new MyModelPrivateSetters(
                    ObjectForEquatableTests.IntProperty,
                    ObjectForEquatableTests.StringProperty,
                    ObjectForEquatableTests.ModelEquatableClassProperty,
                    ObjectForEquatableTests.ReadOnlyListOfIntProperty,
                    ObjectForEquatableTests.ReadOnlyListOfStringProperty,
                    A.Dummy<IReadOnlyList<ModelEquatableClass>>().ThatIsNot(ObjectForEquatableTests.ReadOnlyListOfModelEquatableClassProperty)),
        };

        private static readonly string ObjectThatIsNotTheSameTypeAsObjectForEquatableTests = A.Dummy<string>();
    
        [Fact]
        public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
        {
            // Arrange
            var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

            var expected = Invariant($"Test.MyModelPrivateSetters: IntProperty = {systemUnderTest.IntProperty}, StringProperty = {systemUnderTest.StringProperty}, ModelEquatableClassProperty = {systemUnderTest.ModelEquatableClassProperty}, ReadOnlyListOfIntProperty = {systemUnderTest.ReadOnlyListOfIntProperty}, ReadOnlyListOfStringProperty = {systemUnderTest.ReadOnlyListOfStringProperty}, ReadOnlyListOfModelEquatableClassProperty = {systemUnderTest.ReadOnlyListOfModelEquatableClassProperty}.");

            // Act
            var actual = systemUnderTest.ToString();

            // Assert
            actual.AsTest().Must().BeEqualTo(expected);
        }
    
        public static class Constructing
        {
            [Fact]
            public static void MyModelPrivateSetters___Should_implement_IModel___When_reflecting()
            {
                // Arrange
                var type = typeof(MyModelPrivateSetters);
                var expectedModelMethods = typeof(IModel<MyModelPrivateSetters>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();
                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<MyModelPrivateSetters>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_stringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  null,
                                  referenceObject.ModelEquatableClassProperty,
                                  referenceObject.ReadOnlyListOfIntProperty,
                                  referenceObject.ReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("stringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentException___When_parameter_stringProperty_is_white_space()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  Invariant($"  {Environment.NewLine}  "),
                                  referenceObject.ModelEquatableClassProperty,
                                  referenceObject.ReadOnlyListOfIntProperty,
                                  referenceObject.ReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentException>();
                actual.Message.AsTest().Must().ContainString("stringProperty");
                actual.Message.AsTest().Must().ContainString("white space");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_modelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  referenceObject.StringProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfIntProperty,
                                  referenceObject.ReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("modelEquatableClassProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfIntProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  referenceObject.StringProperty,
                                  referenceObject.ModelEquatableClassProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfStringProperty,
                                  referenceObject.ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfIntProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfStringProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  referenceObject.StringProperty,
                                  referenceObject.ModelEquatableClassProperty,
                                  referenceObject.ReadOnlyListOfIntProperty,
                                  null,
                                  referenceObject.ReadOnlyListOfModelEquatableClassProperty));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfStringProperty");
            }

            [Fact]
            public static void Constructor___Should_throw_ArgumentNullException___When_parameter_readOnlyListOfModelEquatableClassProperty_is_null()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = Record.Exception(
                    () => new MyModelPrivateSetters(
                                  referenceObject.IntProperty,
                                  referenceObject.StringProperty,
                                  referenceObject.ModelEquatableClassProperty,
                                  referenceObject.ReadOnlyListOfIntProperty,
                                  referenceObject.ReadOnlyListOfStringProperty,
                                  null));

                // Assert
                actual.AsTest().Must().BeOfType<ArgumentNullException>();
                actual.Message.AsTest().Must().ContainString("readOnlyListOfModelEquatableClassProperty");
            }

            [Fact]
            public static void IntProperty___Should_return_same_intProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.IntProperty;
                
                // Act
                var actual = systemUnderTest.IntProperty;

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void StringProperty___Should_return_same_stringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.StringProperty;
                
                // Act
                var actual = systemUnderTest.StringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ModelEquatableClassProperty___Should_return_same_modelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.ModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfIntProperty___Should_return_same_readOnlyListOfIntProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ReadOnlyListOfIntProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfIntProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfStringProperty___Should_return_same_readOnlyListOfStringProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ReadOnlyListOfStringProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfStringProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }

            [Fact]
            public static void ReadOnlyListOfModelEquatableClassProperty___Should_return_same_readOnlyListOfModelEquatableClassProperty_parameter_passed_to_constructor___When_getting()
            {
                // Arrange,
                var referenceObject = A.Dummy<MyModelPrivateSetters>();

                var systemUnderTest = new MyModelPrivateSetters(
                                              referenceObject.IntProperty,
                                              referenceObject.StringProperty,
                                              referenceObject.ModelEquatableClassProperty,
                                              referenceObject.ReadOnlyListOfIntProperty,
                                              referenceObject.ReadOnlyListOfStringProperty,
                                              referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                var expected = referenceObject.ReadOnlyListOfModelEquatableClassProperty;
                
                // Act
                var actual = systemUnderTest.ReadOnlyListOfModelEquatableClassProperty;

                // Assert
                actual.AsTest().Must().BeSameReferenceAs(expected);
            }
        }
    
        public static class Cloning
        {
            [Fact]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithIntProperty___Should_deep_clone_object_and_replace_IntProperty_with_the_provided_intProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithIntProperty(referenceObject.IntProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(referenceObject.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ModelEquatableClassProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithStringProperty___Should_deep_clone_object_and_replace_StringProperty_with_the_provided_stringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithStringProperty(referenceObject.StringProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(referenceObject.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ModelEquatableClassProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithModelEquatableClassProperty___Should_deep_clone_object_and_replace_ModelEquatableClassProperty_with_the_provided_modelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithModelEquatableClassProperty(referenceObject.ModelEquatableClassProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfIntProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfIntProperty_with_the_provided_readOnlyListOfIntProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfIntProperty(referenceObject.ReadOnlyListOfIntProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ModelEquatableClassProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfStringProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfStringProperty_with_the_provided_readOnlyListOfStringProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfStringProperty(referenceObject.ReadOnlyListOfStringProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ModelEquatableClassProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfModelEquatableClassProperty);
            }

            [Fact]
            public static void DeepCloneWithReadOnlyListOfModelEquatableClassProperty___Should_deep_clone_object_and_replace_ReadOnlyListOfModelEquatableClassProperty_with_the_provided_readOnlyListOfModelEquatableClassProperty___When_called()
            {
                // Arrange,
                var systemUnderTest = A.Dummy<MyModelPrivateSetters>();

                var referenceObject = A.Dummy<MyModelPrivateSetters>().ThatIsNot(systemUnderTest);
                
                // Act
                var actual = systemUnderTest.DeepCloneWithReadOnlyListOfModelEquatableClassProperty(referenceObject.ReadOnlyListOfModelEquatableClassProperty);

                // Assert
                actual.IntProperty.AsTest().Must().BeEqualTo(systemUnderTest.IntProperty);
                actual.StringProperty.AsTest().Must().BeEqualTo(systemUnderTest.StringProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().BeEqualTo(systemUnderTest.ModelEquatableClassProperty);
                actual.ModelEquatableClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModelEquatableClassProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfIntProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().BeEqualTo(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyListOfStringProperty);
                actual.ReadOnlyListOfModelEquatableClassProperty.AsTest().Must().BeEqualTo(referenceObject.ReadOnlyListOfModelEquatableClassProperty);
            }
        }
    
        public static class Serialization
        {
            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPrivateSetters>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPrivateSetters>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            public static void Deserialize___Should_roundtrip_object___When_serializing_and_deserializing_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<MyModelPrivateSetters>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<MyModelPrivateSetters>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }
    
        public static class Equality
        {
            [Fact]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPrivateSetters systemUnderTest1 = null;
                MyModelPrivateSetters systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 == systemUnderTest2;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPrivateSetters systemUnderTest = null;

                // Act
                var result1 = systemUnderTest == ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests == systemUnderTest;

                // Assert
                result1.AsTest().Must().BeFalse();
                result2.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests == ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests == _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() == _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests == ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                MyModelPrivateSetters systemUnderTest1 = null;
                MyModelPrivateSetters systemUnderTest2 = null;

                // Act
                var result = systemUnderTest1 != systemUnderTest2;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                // Arrange
                MyModelPrivateSetters systemUnderTest = null;

                // Act
                var result1 = systemUnderTest != ObjectForEquatableTests;
                var result2 = ObjectForEquatableTests != systemUnderTest;

                // Assert
                result1.AsTest().Must().BeTrue();
                result2.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                // Arrange, Act
    #pragma warning disable CS1718 // Comparison made to same variable
                var result = ObjectForEquatableTests != ObjectForEquatableTests;
    #pragma warning restore CS1718 // Comparison made to same variable

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests != _).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First() != _.Last()).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeTrue();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeTrue();
            }

            [Fact]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests != ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests;

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSetters___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange
                MyModelPrivateSetters systemUnderTest = null;

                // Act
                var result = ObjectForEquatableTests.Equals(systemUnderTest);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSetters___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSetters___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals(_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=> _.First().Equals(_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_MyModelPrivateSetters___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals(null);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsNotTheSameTypeAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                // Arrange, Act
                var actualCheckReferenceAgainstUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => ObjectForEquatableTests.Equals((object)_)).ToList();
                var actualCheckAgainstOthersInUnequalSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select( _=>_ .First().Equals((object)_.Last())).ToList();

                // Assert
                actualCheckReferenceAgainstUnequalSet.AsTest().Must().Each().BeFalse();
                actualCheckAgainstOthersInUnequalSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                // Arrange, Act
                var result = ObjectForEquatableTests.Equals((object)ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests);

                // Assert
                result.AsTest().Must().BeTrue();
            }

            [Fact]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                // Arrange, Act
                var actualHashCodeOfReference = ObjectForEquatableTests.GetHashCode();
                var actualHashCodesInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.Select(_ => _.GetHashCode()).ToList();
                var actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet = ObjectsThatAreNotEqualToObjectForEquatableTests.GetCombinations(2, 2).Select(_ => _.First().GetHashCode() == _.Last().GetHashCode()).ToList();

                // Assert
                actualHashCodesInNotEqualSet.AsTest().Must().NotContainElement(actualHashCodeOfReference);
                actualEqualityCheckOfHashCodesAgainstOthersInNotEqualSet.AsTest().Must().Each().BeFalse();
            }

            [Fact]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                // Arrange, Act
                var hash1 = ObjectForEquatableTests.GetHashCode();
                var hash2 = ObjectThatIsEqualToButNotTheSameAsObjectForEquatableTests.GetHashCode();

                // Assert
                hash1.AsTest().Must().BeEqualTo(hash2);
            }
        }
    }
}
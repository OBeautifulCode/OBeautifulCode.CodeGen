// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyCollectionOfNullableChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyCollectionOfNullableChild2: ParentReadOnlyCollectionInterfaceOfNullableBoolProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableIntProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableGuidProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableIntProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             new List<bool?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             new List<int?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             new List<Guid?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             new List<DateTime?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             new List<CustomEnum?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault?>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             new List<bool?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             new List<int?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             new List<Guid?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             new List<DateTime?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             new List<CustomEnum?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault?>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum?>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableIntProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty should return same 'parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableIntProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty should return same 'child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableBoolProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableBoolProperty with the provided parentReadOnlyCollectionInterfaceOfNullableBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableIntProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableIntProperty with the provided parentReadOnlyCollectionInterfaceOfNullableIntProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableGuidProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableGuidProperty with the provided parentReadOnlyCollectionInterfaceOfNullableGuidProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty with the provided parentReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty with the provided parentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty with the provided parentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty with the provided parentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableBoolProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableBoolProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableIntProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableIntProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableIntProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableGuidProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableGuidProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty with the provided child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty)).ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty)).ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty)).ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty)).ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty)).ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty)).ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty)).ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty)).Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty)).Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty)).Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty)).Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty)).Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty)).Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyCollectionOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty)).Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild1>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollectionOfNullableChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollectionOfNullableChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyCollectionOfNullableChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyCollectionInterfaceOfNullableBoolProperty", "ParentReadOnlyCollectionInterfaceOfNullableIntProperty", "ParentReadOnlyCollectionInterfaceOfNullableGuidProperty", "ParentReadOnlyCollectionInterfaceOfNullableDateTimeProperty", "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", "ParentReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "ParentReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty", "Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty", "Child2ReadOnlyCollectionInterfaceOfNullableIntProperty", "Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty", "Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty", "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumProperty", "Child2ReadOnlyCollectionInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "Child2ReadOnlyCollectionInterfaceOfNullableCustomFlagsEnumProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyCollectionOfNullableChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyCollectionOfNullableChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionOfNullableParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionOfNullableParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionOfNullableParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionOfNullableChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
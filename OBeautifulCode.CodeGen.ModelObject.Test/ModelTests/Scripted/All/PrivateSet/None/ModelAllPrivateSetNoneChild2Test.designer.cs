// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetNoneChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetNoneChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetNoneChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetNoneChild2: ParentBoolProperty = {systemUnderTest.ParentBoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentGuidProperty = {systemUnderTest.ParentGuidProperty.ToString() ?? "<null>"}, ParentDateTimeProperty = {systemUnderTest.ParentDateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomEnumProperty = {systemUnderTest.ParentCustomEnumProperty.ToString() ?? "<null>"}, ParentCustomFlagsEnumProperty = {systemUnderTest.ParentCustomFlagsEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentCustomBaseClassProperty = {systemUnderTest.ParentCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child2BoolProperty = {systemUnderTest.Child2BoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2IntProperty = {systemUnderTest.Child2IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2StringProperty = {systemUnderTest.Child2StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2GuidProperty = {systemUnderTest.Child2GuidProperty.ToString() ?? "<null>"}, Child2DateTimeProperty = {systemUnderTest.Child2DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2CustomEnumProperty = {systemUnderTest.Child2CustomEnumProperty.ToString() ?? "<null>"}, Child2CustomFlagsEnumProperty = {systemUnderTest.Child2CustomFlagsEnumProperty.ToString() ?? "<null>"}, Child2CustomClassProperty = {systemUnderTest.Child2CustomClassProperty?.ToString() ?? "<null>"}, Child2CustomBaseClassProperty = {systemUnderTest.Child2CustomBaseClassProperty?.ToString() ?? "<null>"}, Child2CustomGenericClassOfCustomClassProperty = {systemUnderTest.Child2CustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetNoneChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetNoneChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             null,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentStringProperty' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentStringProperty", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             null,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             null,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2StringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             null,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2StringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2StringProperty' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2StringProperty", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2CustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2CustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2CustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             null,
                                             referenceObject.Child2CustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2CustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2CustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new ModelAllPrivateSetNoneChild2(
                                             referenceObject.ParentBoolProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentGuidProperty,
                                             referenceObject.ParentDateTimeProperty,
                                             referenceObject.ParentCustomEnumProperty,
                                             referenceObject.ParentCustomFlagsEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentCustomBaseClassProperty,
                                             referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2BoolProperty,
                                             referenceObject.Child2IntProperty,
                                             referenceObject.Child2StringProperty,
                                             referenceObject.Child2GuidProperty,
                                             referenceObject.Child2DateTimeProperty,
                                             referenceObject.Child2CustomEnumProperty,
                                             referenceObject.Child2CustomFlagsEnumProperty,
                                             referenceObject.Child2CustomClassProperty,
                                             referenceObject.Child2CustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2CustomGenericClassOfCustomClassProperty" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetNoneChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetNoneChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentBoolProperty should return same 'parentBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentIntProperty should return same 'parentIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentStringProperty should return same 'parentStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentGuidProperty should return same 'parentGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentDateTimeProperty should return same 'parentDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentCustomEnumProperty should return same 'parentCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentCustomFlagsEnumProperty should return same 'parentCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentCustomClassProperty should return same 'parentCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentCustomBaseClassProperty should return same 'parentCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "ParentCustomGenericClassOfCustomClassProperty should return same 'parentCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomGenericClassOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2BoolProperty should return same 'child2BoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2BoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2BoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2IntProperty should return same 'child2IntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2IntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2IntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2StringProperty should return same 'child2StringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2StringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2StringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2GuidProperty should return same 'child2GuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2GuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2GuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2DateTimeProperty should return same 'child2DateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2DateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2DateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2CustomEnumProperty should return same 'child2CustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2CustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2CustomFlagsEnumProperty should return same 'child2CustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2CustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2CustomClassProperty should return same 'child2CustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2CustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2CustomBaseClassProperty should return same 'child2CustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2CustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Child2CustomGenericClassOfCustomClassProperty should return same 'child2CustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetNoneChild2(
                                                      referenceObject.ParentBoolProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentGuidProperty,
                                                      referenceObject.ParentDateTimeProperty,
                                                      referenceObject.ParentCustomEnumProperty,
                                                      referenceObject.ParentCustomFlagsEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentCustomBaseClassProperty,
                                                      referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2BoolProperty,
                                                      referenceObject.Child2IntProperty,
                                                      referenceObject.Child2StringProperty,
                                                      referenceObject.Child2GuidProperty,
                                                      referenceObject.Child2DateTimeProperty,
                                                      referenceObject.Child2CustomEnumProperty,
                                                      referenceObject.Child2CustomFlagsEnumProperty,
                                                      referenceObject.Child2CustomClassProperty,
                                                      referenceObject.Child2CustomBaseClassProperty,
                                                      referenceObject.Child2CustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2CustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetNoneChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetNoneChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentBoolProperty.IsEqualTo(_.ParentBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentGuidProperty should deep clone object and replace ParentGuidProperty with the provided parentGuidProperty",
                    WithPropertyName = "ParentGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentGuidProperty.IsEqualTo(_.ParentGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentDateTimeProperty should deep clone object and replace ParentDateTimeProperty with the provided parentDateTimeProperty",
                    WithPropertyName = "ParentDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentDateTimeProperty.IsEqualTo(_.ParentDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomEnumProperty should deep clone object and replace ParentCustomEnumProperty with the provided parentCustomEnumProperty",
                    WithPropertyName = "ParentCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomEnumProperty.IsEqualTo(_.ParentCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomFlagsEnumProperty should deep clone object and replace ParentCustomFlagsEnumProperty with the provided parentCustomFlagsEnumProperty",
                    WithPropertyName = "ParentCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomFlagsEnumProperty.IsEqualTo(_.ParentCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomBaseClassProperty should deep clone object and replace ParentCustomBaseClassProperty with the provided parentCustomBaseClassProperty",
                    WithPropertyName = "ParentCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomBaseClassProperty.IsEqualTo(_.ParentCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentCustomGenericClassOfCustomClassProperty with the provided parentCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2BoolProperty should deep clone object and replace Child2BoolProperty with the provided child2BoolProperty",
                    WithPropertyName = "Child2BoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2BoolProperty.IsEqualTo(_.Child2BoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2BoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2IntProperty should deep clone object and replace Child2IntProperty with the provided child2IntProperty",
                    WithPropertyName = "Child2IntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2IntProperty.IsEqualTo(_.Child2IntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2IntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2StringProperty should deep clone object and replace Child2StringProperty with the provided child2StringProperty",
                    WithPropertyName = "Child2StringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2StringProperty.IsEqualTo(_.Child2StringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2StringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2GuidProperty should deep clone object and replace Child2GuidProperty with the provided child2GuidProperty",
                    WithPropertyName = "Child2GuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2GuidProperty.IsEqualTo(_.Child2GuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2GuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2DateTimeProperty should deep clone object and replace Child2DateTimeProperty with the provided child2DateTimeProperty",
                    WithPropertyName = "Child2DateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2DateTimeProperty.IsEqualTo(_.Child2DateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2DateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomEnumProperty should deep clone object and replace Child2CustomEnumProperty with the provided child2CustomEnumProperty",
                    WithPropertyName = "Child2CustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomEnumProperty.IsEqualTo(_.Child2CustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomFlagsEnumProperty should deep clone object and replace Child2CustomFlagsEnumProperty with the provided child2CustomFlagsEnumProperty",
                    WithPropertyName = "Child2CustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomFlagsEnumProperty.IsEqualTo(_.Child2CustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomClassProperty should deep clone object and replace Child2CustomClassProperty with the provided child2CustomClassProperty",
                    WithPropertyName = "Child2CustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomClassProperty.IsEqualTo(_.Child2CustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomBaseClassProperty should deep clone object and replace Child2CustomBaseClassProperty with the provided child2CustomBaseClassProperty",
                    WithPropertyName = "Child2CustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomBaseClassProperty.IsEqualTo(_.Child2CustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomGenericClassOfCustomClassProperty should deep clone object and replace Child2CustomGenericClassOfCustomClassProperty with the provided child2CustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child2CustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child2CustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetNoneChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetNoneChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetNoneChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetNoneChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetNoneChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetNoneChild2[]
                    {
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetNoneChild2[]
                    {
                        new ModelAllPrivateSetNoneChild2(
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentBoolProperty)).ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGuidProperty)).ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty)).ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty)).ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty)).ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty)).ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.ParentCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty)).ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2BoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2BoolProperty)).Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2IntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2IntProperty)).Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2StringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2StringProperty)).Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2GuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2GuidProperty)).Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2DateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty)).Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2CustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty)).Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2CustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty)).Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2CustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty)).Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2CustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty)).Child2CustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetNoneChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetNoneChild2>().Whose(_ => !_.Child2CustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty)).Child2CustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetNoneChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetNoneChild2___Should_implement_IModel_of_ModelAllPrivateSetNoneChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetNoneChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetNoneChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetNoneChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetNoneChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetNoneChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                // Act
                var actual = (ModelAllPrivateSetNoneChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetNoneChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentCustomBaseClassProperty == null)
                {
                    actual.ParentCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child2CustomClassProperty == null)
                {
                    actual.Child2CustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2CustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomClassProperty);
                }

                if (systemUnderTest.Child2CustomBaseClassProperty == null)
                {
                    actual.Child2CustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2CustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomBaseClassProperty);
                }

                if (systemUnderTest.Child2CustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child2CustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2CustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentBoolProperty", "ParentIntProperty", "ParentStringProperty", "ParentGuidProperty", "ParentDateTimeProperty", "ParentCustomEnumProperty", "ParentCustomFlagsEnumProperty", "ParentCustomClassProperty", "ParentCustomBaseClassProperty", "ParentCustomGenericClassOfCustomClassProperty", "Child2BoolProperty", "Child2IntProperty", "Child2StringProperty", "Child2GuidProperty", "Child2DateTimeProperty", "Child2CustomEnumProperty", "Child2CustomFlagsEnumProperty", "Child2CustomClassProperty", "Child2CustomBaseClassProperty", "Child2CustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetNoneChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetNoneChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetNoneChild2 systemUnderTest1 = null;
                ModelAllPrivateSetNoneChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetNoneChild2 systemUnderTest1 = null;
                ModelAllPrivateSetNoneChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetNoneParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetNoneParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetNoneParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetNoneChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
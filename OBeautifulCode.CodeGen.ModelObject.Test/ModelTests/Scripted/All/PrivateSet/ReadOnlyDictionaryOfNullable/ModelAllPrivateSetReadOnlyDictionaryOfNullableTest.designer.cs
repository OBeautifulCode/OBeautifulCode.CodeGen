// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyDictionaryOfNullableTest
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyDictionaryOfNullable: ReadOnlyDictionaryInterfaceOfNullableBoolProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfNullableIntProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfNullableGuidProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             null,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableBoolProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             new Dictionary<bool?, bool?>(),
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableBoolProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableIntProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             new Dictionary<int?, int?>(),
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableIntProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableGuidProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             new Dictionary<Guid?, Guid?>(),
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableGuidProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             new Dictionary<CustomEnum?, CustomEnum?>(),
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             new Dictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>(),
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new Dictionary<CustomFlagsEnum?, CustomFlagsEnum?>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "is an empty dictionary", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableBoolProperty should return same 'readOnlyDictionaryInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableIntProperty should return same 'readOnlyDictionaryInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableGuidProperty should return same 'readOnlyDictionaryInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should return same 'readOnlyDictionaryInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should return same 'readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should return same 'readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableBoolProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableBoolProperty with the provided readOnlyDictionaryInterfaceOfNullableBoolProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableIntProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableIntProperty with the provided readOnlyDictionaryInterfaceOfNullableIntProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableGuidProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableGuidProperty with the provided readOnlyDictionaryInterfaceOfNullableGuidProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty with the provided readOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty with the provided readOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "DeepCloneWithReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty with the provided readOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().ThatIs(_ => !systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyDictionaryOfNullable ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryOfNullable[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryOfNullable[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty)).ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty)).ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty)).ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty)).ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty)).ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullable(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>().Whose(_ => !_.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty)).ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullable>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullable>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyDictionaryOfNullable should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyDictionaryOfNullable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullable);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryOfNullable>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryOfNullable>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullable);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach (var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyDictionaryOfNullable)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableBoolProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableIntProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableGuidProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ReadOnlyDictionaryInterfaceOfNullableBoolProperty", "ReadOnlyDictionaryInterfaceOfNullableIntProperty", "ReadOnlyDictionaryInterfaceOfNullableGuidProperty", "ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyDictionaryOfNullable)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullable).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullable>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullable systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullable___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1: ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfNullableIntProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty = {systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty = {systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty = {systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = {systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableBoolProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             new Dictionary<bool?, bool?>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableBoolProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableIntProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             new Dictionary<int?, int?>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableIntProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableGuidProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             new Dictionary<Guid?, Guid?>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableGuidProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             new Dictionary<CustomEnum?, CustomEnum?>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             new Dictionary<CustomFlagsEnum?, CustomFlagsEnum?>(),
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             new Dictionary<bool?, bool?>(),
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableIntProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             new Dictionary<int?, int?>(),
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableIntProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             new Dictionary<Guid?, Guid?>(),
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             new Dictionary<CustomEnum?, CustomEnum?>(),
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                             referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                             new Dictionary<CustomFlagsEnum?, CustomFlagsEnum?>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "is an empty dictionary", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty should return same 'parentReadOnlyDictionaryInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty should return same 'parentReadOnlyDictionaryInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty should return same 'parentReadOnlyDictionaryInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should return same 'parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should return same 'parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty should return same 'child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty should return same 'child1ReadOnlyDictionaryInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty should return same 'child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should return same 'child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should return same 'child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableBoolProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty with the provided parentReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableIntProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfNullableIntProperty with the provided parentReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableGuidProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty with the provided parentReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty with the provided parentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty with the provided parentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyDictionaryInterfaceOfNullableBoolProperty should deep clone object and replace Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty with the provided child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    WithPropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(_.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyDictionaryInterfaceOfNullableIntProperty should deep clone object and replace Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty with the provided child1ReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    WithPropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(_.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyDictionaryInterfaceOfNullableGuidProperty should deep clone object and replace Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty with the provided child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    WithPropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(_.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty should deep clone object and replace Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty with the provided child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty with the provided child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty)).ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty)).ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty)).ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty)).ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty)).ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty)).Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty)).Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty)).Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty)).Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>().Whose(_ => !_.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty)).Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild2>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty == null)
                {
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty == null)
                {
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty == null)
                {
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty", "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty", "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty", "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "Child1ReadOnlyDictionaryInterfaceOfNullableBoolProperty", "Child1ReadOnlyDictionaryInterfaceOfNullableIntProperty", "Child1ReadOnlyDictionaryInterfaceOfNullableGuidProperty", "Child1ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "Child1ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullableParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryOfNullableChild1___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
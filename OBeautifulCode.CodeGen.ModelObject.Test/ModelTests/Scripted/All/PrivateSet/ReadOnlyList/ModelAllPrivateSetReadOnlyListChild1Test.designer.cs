// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyListChild1Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyListChild1> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyListChild1: ParentReadOnlyListInterfaceOfBoolProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfIntProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfGuidProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomEnumProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomClassProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomBaseClassProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfBoolProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfBoolProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfIntProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfIntProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfStringProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfGuidProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfGuidProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomEnumProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomClassProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomBaseClassProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyListChild1> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             new List<bool>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             new List<int>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             new List<string>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfStringProperty' contains a white space element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(referenceObject.ParentReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfStringProperty", "contains an element that is white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             new List<Guid>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             new List<DateTime>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             new List<CustomEnum>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             new List<CustomClass>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty).ToList(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomBaseClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             new List<CustomBaseClass>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomBaseClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty).ToList(),
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomBaseClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             new List<CustomGenericClass<CustomClass>>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).ToList(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             new List<bool>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             new List<int>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             new List<string>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.Child1ReadOnlyListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child1ReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfStringProperty' contains a white space element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.Child1ReadOnlyListInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(referenceObject.Child1ReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfStringProperty", "contains an element that is white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             new List<Guid>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             new List<DateTime>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             new List<CustomEnum>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             new List<CustomClass>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty).ToList(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomBaseClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             new List<CustomBaseClass>(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomBaseClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty).ToList(),
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomBaseClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             new List<CustomGenericClass<CustomClass>>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new ModelAllPrivateSetReadOnlyListChild1(
                                             referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                             referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).ToList());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyListChild1> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfBoolProperty should return same 'parentReadOnlyListInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfIntProperty should return same 'parentReadOnlyListInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfStringProperty should return same 'parentReadOnlyListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfGuidProperty should return same 'parentReadOnlyListInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfDateTimeProperty should return same 'parentReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomEnumProperty should return same 'parentReadOnlyListInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty should return same 'parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty should return same 'parentReadOnlyListInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomClassProperty should return same 'parentReadOnlyListInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomBaseClassProperty should return same 'parentReadOnlyListInterfaceOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty should return same 'parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfBoolProperty should return same 'child1ReadOnlyListInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfIntProperty should return same 'child1ReadOnlyListInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfStringProperty should return same 'child1ReadOnlyListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfGuidProperty should return same 'child1ReadOnlyListInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfDateTimeProperty should return same 'child1ReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomEnumProperty should return same 'child1ReadOnlyListInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty should return same 'child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty should return same 'child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomClassProperty should return same 'child1ReadOnlyListInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomBaseClassProperty should return same 'child1ReadOnlyListInterfaceOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty should return same 'child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListChild1(
                                                      referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyListChild1> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfBoolProperty should deep clone object and replace ParentReadOnlyListInterfaceOfBoolProperty with the provided parentReadOnlyListInterfaceOfBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfIntProperty should deep clone object and replace ParentReadOnlyListInterfaceOfIntProperty with the provided parentReadOnlyListInterfaceOfIntProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyListInterfaceOfStringProperty with the provided parentReadOnlyListInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfGuidProperty should deep clone object and replace ParentReadOnlyListInterfaceOfGuidProperty with the provided parentReadOnlyListInterfaceOfGuidProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyListInterfaceOfDateTimeProperty with the provided parentReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomEnumProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomEnumProperty with the provided parentReadOnlyListInterfaceOfCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty with the provided parentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty with the provided parentReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomClassProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomClassProperty with the provided parentReadOnlyListInterfaceOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomBaseClassProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomBaseClassProperty with the provided parentReadOnlyListInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomBaseClassProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty with the provided parentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfBoolProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfBoolProperty with the provided child1ReadOnlyListInterfaceOfBoolProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfBoolProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfIntProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfIntProperty with the provided child1ReadOnlyListInterfaceOfIntProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfIntProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfStringProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfStringProperty with the provided child1ReadOnlyListInterfaceOfStringProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfStringProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfGuidProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfGuidProperty with the provided child1ReadOnlyListInterfaceOfGuidProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfGuidProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfDateTimeProperty with the provided child1ReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomEnumProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomEnumProperty with the provided child1ReadOnlyListInterfaceOfCustomEnumProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty with the provided child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomFlagsEnumProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty with the provided child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomClassProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomClassProperty with the provided child1ReadOnlyListInterfaceOfCustomClassProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomClassProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomBaseClassProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomBaseClassProperty with the provided child1ReadOnlyListInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty with the provided child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyListChild1 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyListChild1> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyListChild1[]
                    {
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyListChild1[]
                    {
                        new ModelAllPrivateSetReadOnlyListChild1(
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty)).ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty)).ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty)).ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty)).ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty)).ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty)).ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty)).ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty)).ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty)).ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty)).ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty)).Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty)).Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty)).Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty)).Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty)).Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty)).Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty)).Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty)).Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty)).Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty)).Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyListChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListChild1>().Whose(_ => !_.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty)).Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyListChild2>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyListChild1> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyListChild1>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyListChild1>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyListChild1 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyListChild1___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyListChild1___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyListChild1);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyListChild1>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyListChild1>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyListChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyListChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach (var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyListChild1)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfStringProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfBoolProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfBoolProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfIntProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfIntProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfStringProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfStringProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfGuidProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfGuidProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomClassProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyListInterfaceOfBoolProperty", "ParentReadOnlyListInterfaceOfIntProperty", "ParentReadOnlyListInterfaceOfStringProperty", "ParentReadOnlyListInterfaceOfGuidProperty", "ParentReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyListInterfaceOfCustomEnumProperty", "ParentReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "ParentReadOnlyListInterfaceOfCustomFlagsEnumProperty", "ParentReadOnlyListInterfaceOfCustomClassProperty", "ParentReadOnlyListInterfaceOfCustomBaseClassProperty", "ParentReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "Child1ReadOnlyListInterfaceOfBoolProperty", "Child1ReadOnlyListInterfaceOfIntProperty", "Child1ReadOnlyListInterfaceOfStringProperty", "Child1ReadOnlyListInterfaceOfGuidProperty", "Child1ReadOnlyListInterfaceOfDateTimeProperty", "Child1ReadOnlyListInterfaceOfCustomEnumProperty", "Child1ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "Child1ReadOnlyListInterfaceOfCustomFlagsEnumProperty", "Child1ReadOnlyListInterfaceOfCustomClassProperty", "Child1ReadOnlyListInterfaceOfCustomBaseClassProperty", "Child1ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyListChild1)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyListChild1).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyListChild1 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyListChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyListChild1 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyListChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListChild1___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListChild1 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListChild1___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListChild1___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListChild1___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListChild1___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
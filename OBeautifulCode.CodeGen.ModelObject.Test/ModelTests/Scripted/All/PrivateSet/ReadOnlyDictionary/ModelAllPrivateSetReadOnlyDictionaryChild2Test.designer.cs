// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Bson;
    using global::OBeautifulCode.Serialization.Json;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyDictionaryChild2Test
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer(SerializationConfigurationTypes.BsonConfigurationType);

        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer(SerializationConfigurationTypes.JsonConfigurationType);

        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyDictionaryChild2: ParentReadOnlyDictionaryInterfaceOfBoolProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfIntProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfGuidProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfCustomClassProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfBoolProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfBoolProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfIntProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfIntProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfStringProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfGuidProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfGuidProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfBoolProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             new Dictionary<bool, bool>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfBoolProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfIntProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             new Dictionary<int, int>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfIntProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfStringProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             new Dictionary<string, string>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfStringProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfStringProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var dictionaryWithNullValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfStringProperty", "contains at least one key-value pair with a null value" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfGuidProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             new Dictionary<Guid, Guid>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfGuidProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             new Dictionary<CustomEnum, CustomEnum>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomEnumProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             new Dictionary<CustomFlagsEnum, CustomFlagsEnum>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomClassProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             new Dictionary<CustomClass, CustomClass>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomClassProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCustomClassProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var dictionaryWithNullValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCustomClassProperty", "contains at least one key-value pair with a null value" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfBoolProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             new Dictionary<bool, bool>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfBoolProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfIntProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             new Dictionary<int, int>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfIntProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfStringProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             new Dictionary<string, string>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfStringProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfStringProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var dictionaryWithNullValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfStringProperty", "contains at least one key-value pair with a null value" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfGuidProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             new Dictionary<Guid, Guid>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfGuidProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             new Dictionary<CustomEnum, CustomEnum>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             new Dictionary<CustomFlagsEnum, CustomFlagsEnum>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomClassProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             new Dictionary<CustomClass, CustomClass>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomClassProperty", "is an empty dictionary" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCustomClassProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var dictionaryWithNullValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                             dictionaryWithNullValue);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCustomClassProperty", "contains at least one key-value pair with a null value" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfBoolProperty should return same 'parentReadOnlyDictionaryInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfIntProperty should return same 'parentReadOnlyDictionaryInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfStringProperty should return same 'parentReadOnlyDictionaryInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfGuidProperty should return same 'parentReadOnlyDictionaryInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty should return same 'parentReadOnlyDictionaryInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty should return same 'parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty should return same 'parentReadOnlyDictionaryInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfBoolProperty should return same 'child2ReadOnlyDictionaryInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfIntProperty should return same 'child2ReadOnlyDictionaryInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfStringProperty should return same 'child2ReadOnlyDictionaryInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfGuidProperty should return same 'child2ReadOnlyDictionaryInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty should return same 'child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty should return same 'child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty should return same 'child2ReadOnlyDictionaryInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfBoolProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfBoolProperty with the provided parentReadOnlyDictionaryInterfaceOfBoolProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfIntProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfIntProperty with the provided parentReadOnlyDictionaryInterfaceOfIntProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfStringProperty with the provided parentReadOnlyDictionaryInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfGuidProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfGuidProperty with the provided parentReadOnlyDictionaryInterfaceOfGuidProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfCustomEnumProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty with the provided parentReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty with the provided parentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfCustomClassProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfCustomClassProperty with the provided parentReadOnlyDictionaryInterfaceOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfBoolProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfBoolProperty with the provided child2ReadOnlyDictionaryInterfaceOfBoolProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfIntProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfIntProperty with the provided child2ReadOnlyDictionaryInterfaceOfIntProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfStringProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfStringProperty with the provided child2ReadOnlyDictionaryInterfaceOfStringProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfGuidProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfGuidProperty with the provided child2ReadOnlyDictionaryInterfaceOfGuidProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfCustomEnumProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty with the provided child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty with the provided child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfCustomClassProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty with the provided child2ReadOnlyDictionaryInterfaceOfCustomClassProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyDictionaryChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyDictionaryChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyDictionaryChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyDictionaryChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyDictionaryChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty)).ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty)).ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty)).ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty)).ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty)).ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty)).ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty)).ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty)).Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty)).Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty)).Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty)).Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty)).Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty)).Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyDictionaryChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty)).Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryChild2___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyDictionaryChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryChild2>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyDictionaryChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyDictionaryChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyDictionaryChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyDictionaryChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfBoolProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfBoolProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfIntProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfIntProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfStringProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfGuidProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfGuidProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyDictionaryInterfaceOfBoolProperty", "ParentReadOnlyDictionaryInterfaceOfIntProperty", "ParentReadOnlyDictionaryInterfaceOfStringProperty", "ParentReadOnlyDictionaryInterfaceOfGuidProperty", "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty", "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty", "Child2ReadOnlyDictionaryInterfaceOfBoolProperty", "Child2ReadOnlyDictionaryInterfaceOfIntProperty", "Child2ReadOnlyDictionaryInterfaceOfStringProperty", "Child2ReadOnlyDictionaryInterfaceOfGuidProperty", "Child2ReadOnlyDictionaryInterfaceOfCustomEnumProperty", "Child2ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "Child2ReadOnlyDictionaryInterfaceOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyDictionaryChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelAllPrivateSetReadOnlyDictionaryChild2).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetReadOnlyDictionaryChild2>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetReadOnlyDictionaryChild2>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetReadOnlyDictionaryChild2>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyDictionaryChild2>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetReadOnlyDictionaryChild2>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyDictionaryParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyDictionaryChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyDictionaryChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyListOfNullableChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyListOfNullableChild2: ParentReadOnlyListInterfaceOfNullableBoolProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableIntProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableGuidProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableDateTimeProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableCustomEnumProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableBoolProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableIntProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableGuidProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableDateTimeProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             new List<bool?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             new List<int?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             new List<Guid?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             new List<DateTime?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             new List<CustomEnum?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault?>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             new List<bool?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             new List<int?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             new List<Guid?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             new List<DateTime?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             new List<CustomEnum?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault?>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum?>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableBoolProperty should return same 'parentReadOnlyListInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableIntProperty should return same 'parentReadOnlyListInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableGuidProperty should return same 'parentReadOnlyListInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableDateTimeProperty should return same 'parentReadOnlyListInterfaceOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty should return same 'parentReadOnlyListInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should return same 'parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty should return same 'parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableBoolProperty should return same 'child2ReadOnlyListInterfaceOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableIntProperty should return same 'child2ReadOnlyListInterfaceOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableGuidProperty should return same 'child2ReadOnlyListInterfaceOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty should return same 'child2ReadOnlyListInterfaceOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty should return same 'child2ReadOnlyListInterfaceOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should return same 'child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty should return same 'child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableBoolProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableBoolProperty with the provided parentReadOnlyListInterfaceOfNullableBoolProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableIntProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableIntProperty with the provided parentReadOnlyListInterfaceOfNullableIntProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableGuidProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableGuidProperty with the provided parentReadOnlyListInterfaceOfNullableGuidProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableDateTimeProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableDateTimeProperty with the provided parentReadOnlyListInterfaceOfNullableDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableCustomEnumProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableCustomEnumProperty with the provided parentReadOnlyListInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty with the provided parentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty with the provided parentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableBoolProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableBoolProperty with the provided child2ReadOnlyListInterfaceOfNullableBoolProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableIntProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableIntProperty with the provided child2ReadOnlyListInterfaceOfNullableIntProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableGuidProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableGuidProperty with the provided child2ReadOnlyListInterfaceOfNullableGuidProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableDateTimeProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableDateTimeProperty with the provided child2ReadOnlyListInterfaceOfNullableDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableCustomEnumProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty with the provided child2ReadOnlyListInterfaceOfNullableCustomEnumProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty with the provided child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty with the provided child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyListOfNullableChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyListOfNullableChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyListOfNullableChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty)).ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty)).ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty)).ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty)).ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty)).ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty)).ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty)).ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty)).Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty)).Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty)).Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty)).Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty)).Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty)).Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetReadOnlyListOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty)).Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild1>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyListOfNullableChild2>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyListOfNullableChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyListOfNullableChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyListOfNullableChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyListOfNullableChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyListOfNullableChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyListOfNullableChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyListOfNullableChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyListInterfaceOfNullableBoolProperty", "ParentReadOnlyListInterfaceOfNullableIntProperty", "ParentReadOnlyListInterfaceOfNullableGuidProperty", "ParentReadOnlyListInterfaceOfNullableDateTimeProperty", "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty", "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "Child2ReadOnlyListInterfaceOfNullableBoolProperty", "Child2ReadOnlyListInterfaceOfNullableIntProperty", "Child2ReadOnlyListInterfaceOfNullableGuidProperty", "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty", "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty", "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyListOfNullableChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyListOfNullableChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyListOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListOfNullableParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListOfNullableParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListOfNullableParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyListOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyListOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyListOfNullableChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
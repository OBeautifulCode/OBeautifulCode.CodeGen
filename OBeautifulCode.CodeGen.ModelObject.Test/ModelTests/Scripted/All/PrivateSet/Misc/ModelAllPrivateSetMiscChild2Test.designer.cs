// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetMiscChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetMiscChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetMiscChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetMiscChild2: ParentCollectionInterfaceOfStringProperty = {systemUnderTest.ParentCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentListInterfaceOfStringProperty = {systemUnderTest.ParentListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = {systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentListInterfaceOfCollectionInterfaceOfStringProperty = {systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child2CollectionInterfaceOfStringProperty = {systemUnderTest.Child2CollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ListInterfaceOfStringProperty = {systemUnderTest.Child2ListInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = {systemUnderTest.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ListInterfaceOfCollectionInterfaceOfStringProperty = {systemUnderTest.Child2ListInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetMiscChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetMiscChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             null,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             new List<string>(),
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             new string[0].Concat(referenceObject.ParentCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             new List<string>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             new string[0].Concat(referenceObject.ParentListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentListInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             new List<ICollection<string>>(),
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             new ICollection<string>[0].Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             new List<IReadOnlyList<string>>(),
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             new IReadOnlyList<string>[0].Concat(referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).Concat(new IReadOnlyList<string>[] { null }).Concat(referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentListInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentListInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             new List<ICollection<string>>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentListInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             new ICollection<string>[0].Concat(referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentListInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             new List<IList<string>>(),
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             new IList<string>[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty).Concat(new IList<string>[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             new Dictionary<string, IReadOnlyList<DateTime>>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new Dictionary<string, ICollection<DateTime>>(),
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             new List<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[0].Concat(referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).Concat(new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[] { null }).Concat(referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).ToList(),
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new Dictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>(),
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2CollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2CollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new List<string>(),
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2CollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new string[0].Concat(referenceObject.Child2CollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child2CollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             new List<string>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             new string[0].Concat(referenceObject.Child2ListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child2ListInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             new List<ICollection<string>>(),
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             new ICollection<string>[0].Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             new List<IReadOnlyList<string>>(),
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             new IReadOnlyList<string>[0].Concat(referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).Concat(new IReadOnlyList<string>[] { null }).Concat(referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ListInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ListInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             new List<ICollection<string>>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ListInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             new ICollection<string>[0].Concat(referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ListInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             new List<IList<string>>(),
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             new IList<string>[0].Concat(referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty).Concat(new IList<string>[] { null }).Concat(referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             new Dictionary<string, IReadOnlyList<DateTime>>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new Dictionary<string, ICollection<DateTime>>(),
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             dictionaryWithNullValue,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             new List<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[0].Concat(referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).Concat(new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[] { null }).Concat(referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).ToList(),
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             new Dictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var dictionaryWithNullValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelAllPrivateSetMiscChild2(
                                             referenceObject.ParentCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2CollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                             referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                             referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                             dictionaryWithNullValue);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetMiscChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetMiscChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentCollectionInterfaceOfStringProperty should return same 'parentCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentListInterfaceOfStringProperty should return same 'parentListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty should return same 'parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty should return same 'parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentListInterfaceOfCollectionInterfaceOfStringProperty should return same 'parentListInterfaceOfCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentListInterfaceOfCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty should return same 'parentReadOnlyListInterfaceOfListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty should return same 'parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2CollectionInterfaceOfStringProperty should return same 'child2CollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2CollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ListInterfaceOfStringProperty should return same 'child2ListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty should return same 'child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty should return same 'child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ListInterfaceOfCollectionInterfaceOfStringProperty should return same 'child2ListInterfaceOfCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ListInterfaceOfCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty should return same 'child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty should return same 'child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should return same 'child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetMiscChild2(
                                                      referenceObject.ParentCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2CollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                                      referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                                      referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetMiscChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetMiscChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentCollectionInterfaceOfStringProperty should deep clone object and replace ParentCollectionInterfaceOfStringProperty with the provided parentCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ParentCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentListInterfaceOfStringProperty should deep clone object and replace ParentListInterfaceOfStringProperty with the provided parentListInterfaceOfStringProperty",
                    WithPropertyName = "ParentListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentListInterfaceOfStringProperty.IsEqualTo(_.ParentListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty with the provided parentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty should deep clone object and replace ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty with the provided parentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                    WithPropertyName = "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.IsEqualTo(_.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentListInterfaceOfCollectionInterfaceOfStringProperty should deep clone object and replace ParentListInterfaceOfCollectionInterfaceOfStringProperty with the provided parentListInterfaceOfCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ParentListInterfaceOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentListInterfaceOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfListInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty with the provided parentReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided parentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty with the provided parentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided parentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided parentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2CollectionInterfaceOfStringProperty should deep clone object and replace Child2CollectionInterfaceOfStringProperty with the provided child2CollectionInterfaceOfStringProperty",
                    WithPropertyName = "Child2CollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2CollectionInterfaceOfStringProperty.IsEqualTo(_.Child2CollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ListInterfaceOfStringProperty should deep clone object and replace Child2ListInterfaceOfStringProperty with the provided child2ListInterfaceOfStringProperty",
                    WithPropertyName = "Child2ListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ListInterfaceOfStringProperty.IsEqualTo(_.Child2ListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty with the provided child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty should deep clone object and replace Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty with the provided child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                    WithPropertyName = "Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.IsEqualTo(_.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ListInterfaceOfCollectionInterfaceOfStringProperty should deep clone object and replace Child2ListInterfaceOfCollectionInterfaceOfStringProperty with the provided child2ListInterfaceOfCollectionInterfaceOfStringProperty",
                    WithPropertyName = "Child2ListInterfaceOfCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(_.Child2ListInterfaceOfCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfListInterfaceOfStringProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty with the provided child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty with the provided child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty should deep clone object and replace Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty with the provided child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetMiscChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(_.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetMiscChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetMiscChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetMiscChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetMiscChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetMiscChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetMiscChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetMiscChild2[]
                    {
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetMiscChild2[]
                    {
                        new ModelAllPrivateSetMiscChild2(
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty)).ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty)).ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty)).ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty)).ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty)).ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty)).ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty)).ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2CollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty)).Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty)).Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty)).Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty)).Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty)).Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty)).Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty)).Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                        new ModelAllPrivateSetMiscChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ListInterfaceOfCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetMiscChild2>().Whose(_ => !_.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)).Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetMiscChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetMiscChild2___Should_implement_IModel_of_ModelAllPrivateSetMiscChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetMiscChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetMiscChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetMiscChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetMiscChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetMiscChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                // Act
                var actual = (ModelAllPrivateSetMiscChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetMiscChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCollectionInterfaceOfStringProperty == null)
                {
                    actual.ParentCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentListInterfaceOfStringProperty == null)
                {
                    actual.ParentListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentListInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty == null)
                {
                    actual.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty == null)
                {
                    actual.ParentListInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentListInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child2CollectionInterfaceOfStringProperty == null)
                {
                    actual.Child2CollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2CollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ListInterfaceOfStringProperty == null)
                {
                    actual.Child2ListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ListInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty == null)
                {
                    actual.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ListInterfaceOfCollectionInterfaceOfStringProperty == null)
                {
                    actual.Child2ListInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ListInterfaceOfCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ListInterfaceOfCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentCollectionInterfaceOfStringProperty", "ParentListInterfaceOfStringProperty", "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "ParentListInterfaceOfCollectionInterfaceOfStringProperty", "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "Child2CollectionInterfaceOfStringProperty", "Child2ListInterfaceOfStringProperty", "Child2ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "Child2CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "Child2ListInterfaceOfCollectionInterfaceOfStringProperty", "Child2ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "Child2ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetMiscChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetMiscChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetMiscChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetMiscChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetMiscChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetMiscChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetMiscChild2 systemUnderTest1 = null;
                ModelAllPrivateSetMiscChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetMiscChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetMiscChild2 systemUnderTest1 = null;
                ModelAllPrivateSetMiscChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetMiscChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetMiscParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetMiscParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetMiscParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetMiscParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetMiscParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetMiscParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetMiscChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetMiscChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact(Skip = "It's possible (and even probable after a few runs of this test) that two dummy, unequal models will have the same hash code.  The model being tested contains at least one property who's type (or a type nested within the generic type, or a property of the IModel type) is a dictionary with keys that are not comparable or an unordered collection with elements that are not comparable.  In these cases the hashing method cannot hash the elements and must resort to hashing the element count.  Two dummies could easily have the same element count for such a type.")]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
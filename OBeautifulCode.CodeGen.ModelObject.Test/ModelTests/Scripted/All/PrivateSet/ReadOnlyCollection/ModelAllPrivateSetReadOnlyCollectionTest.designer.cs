// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyCollectionTest
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollection> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyCollection: ReadOnlyCollectionInterfaceOfBoolProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfIntProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfStringProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfGuidProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfDateTimeProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomEnumProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomClassProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollection> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             new List<bool>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             new List<int>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             new List<string>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.ReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ReadOnlyCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfStringProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfStringProperty' contains a white space element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.ReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(referenceObject.ReadOnlyCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfStringProperty", "contains an element that is white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             new List<Guid>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             new List<DateTime>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             new List<CustomEnum>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             new List<CustomEnumValidatedNotDefault>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             new List<CustomFlagsEnum>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new List<CustomClass>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty).ToList(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomBaseClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new List<CustomBaseClass>(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomBaseClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).ToList(),
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomBaseClassProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new List<CustomGenericClass<CustomClass>>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "constructor should throw ArgumentException when parameter 'readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new ModelAllPrivateSetReadOnlyCollection(
                                             referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).ToList());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollection> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfBoolProperty should return same 'readOnlyCollectionInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfIntProperty should return same 'readOnlyCollectionInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfStringProperty should return same 'readOnlyCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfGuidProperty should return same 'readOnlyCollectionInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfDateTimeProperty should return same 'readOnlyCollectionInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomEnumProperty should return same 'readOnlyCollectionInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty should return same 'readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should return same 'readOnlyCollectionInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomClassProperty should return same 'readOnlyCollectionInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty should return same 'readOnlyCollectionInterfaceOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should return same 'readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollection(
                                                      referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollection> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfBoolProperty with the provided readOnlyCollectionInterfaceOfBoolProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfIntProperty with the provided readOnlyCollectionInterfaceOfIntProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfStringProperty with the provided readOnlyCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfGuidProperty with the provided readOnlyCollectionInterfaceOfGuidProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfDateTimeProperty with the provided readOnlyCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomEnumProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomEnumProperty with the provided readOnlyCollectionInterfaceOfCustomEnumProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty with the provided readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty with the provided readOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomClassProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomClassProperty with the provided readOnlyCollectionInterfaceOfCustomClassProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomBaseClassProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomBaseClassProperty with the provided readOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "DeepCloneWithReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty with the provided readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollection>().ThatIs(_ => !systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollection>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyCollection ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollection> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyCollection[]
                    {
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyCollection[]
                    {
                        new ModelAllPrivateSetReadOnlyCollection(
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty)).ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty)).ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty)).ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty)).ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty)).ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty)).ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty)).ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)).ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty)).ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty)).ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollection(
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollection>().Whose(_ => !_.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)).ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetReadOnlyCollection> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetReadOnlyCollection>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetReadOnlyCollection>
                {
                    Name = "a dummy ModelAllPrivateSetReadOnlyCollection should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollection___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyCollection___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollection);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyCollection>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyCollection>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollection___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollection);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ConstructionTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach (var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class CloningTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyCollection)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfStringProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ReadOnlyCollectionInterfaceOfBoolProperty", "ReadOnlyCollectionInterfaceOfIntProperty", "ReadOnlyCollectionInterfaceOfStringProperty", "ReadOnlyCollectionInterfaceOfGuidProperty", "ReadOnlyCollectionInterfaceOfDateTimeProperty", "ReadOnlyCollectionInterfaceOfCustomEnumProperty", "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty", "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "ReadOnlyCollectionInterfaceOfCustomClassProperty", "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyCollection)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetReadOnlyCollection).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class SerializationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollection>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class EqualityTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollection systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollection systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollection systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollection systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollection systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollection systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollection___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollection systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollection___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollection___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollection___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollection___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class HashTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
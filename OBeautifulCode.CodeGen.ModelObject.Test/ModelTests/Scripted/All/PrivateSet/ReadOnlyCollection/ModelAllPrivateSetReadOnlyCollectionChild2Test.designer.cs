// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetReadOnlyCollectionChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetReadOnlyCollectionChild2: ParentReadOnlyCollectionInterfaceOfBoolProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfIntProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfGuidProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfBoolProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfIntProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfStringProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfGuidProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfDateTimeProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCustomClassProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             new List<bool>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             new List<int>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             new List<string>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             new List<Guid>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             new List<DateTime>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             new List<CustomEnum>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             new List<CustomFlagsEnum>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new List<CustomClass>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty).ToList(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new List<CustomBaseClass>(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty).ToList(),
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new List<CustomGenericClass<CustomClass>>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).ToList(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             new List<bool>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             new List<int>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             new List<string>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             new string[0].Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty).ToList(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             new List<Guid>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             new List<DateTime>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             new List<CustomEnum>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             new List<CustomFlagsEnum>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new List<CustomClass>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty).ToList(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             null,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new List<CustomBaseClass>(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).ToList(),
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new List<CustomGenericClass<CustomClass>>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                             referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).ToList());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfBoolProperty should return same 'parentReadOnlyCollectionInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfIntProperty should return same 'parentReadOnlyCollectionInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfStringProperty should return same 'parentReadOnlyCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfGuidProperty should return same 'parentReadOnlyCollectionInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfDateTimeProperty should return same 'parentReadOnlyCollectionInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty should return same 'parentReadOnlyCollectionInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should return same 'parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCustomClassProperty should return same 'parentReadOnlyCollectionInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty should return same 'parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should return same 'parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfBoolProperty should return same 'child2ReadOnlyCollectionInterfaceOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfIntProperty should return same 'child2ReadOnlyCollectionInterfaceOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfStringProperty should return same 'child2ReadOnlyCollectionInterfaceOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfGuidProperty should return same 'child2ReadOnlyCollectionInterfaceOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfDateTimeProperty should return same 'child2ReadOnlyCollectionInterfaceOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty should return same 'child2ReadOnlyCollectionInterfaceOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should return same 'child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCustomClassProperty should return same 'child2ReadOnlyCollectionInterfaceOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty should return same 'child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should return same 'child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetReadOnlyCollectionChild2(
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                                      referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfBoolProperty with the provided parentReadOnlyCollectionInterfaceOfBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfIntProperty with the provided parentReadOnlyCollectionInterfaceOfIntProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfStringProperty with the provided parentReadOnlyCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfGuidProperty with the provided parentReadOnlyCollectionInterfaceOfGuidProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfDateTimeProperty with the provided parentReadOnlyCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomEnumProperty with the provided parentReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty with the provided parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfBoolProperty with the provided child2ReadOnlyCollectionInterfaceOfBoolProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfIntProperty with the provided child2ReadOnlyCollectionInterfaceOfIntProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfStringProperty with the provided child2ReadOnlyCollectionInterfaceOfStringProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfGuidProperty with the provided child2ReadOnlyCollectionInterfaceOfGuidProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfDateTimeProperty with the provided child2ReadOnlyCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCustomEnumProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty with the provided child2ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty with the provided child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCustomClassProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCustomClassProperty with the provided child2ReadOnlyCollectionInterfaceOfCustomClassProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty with the provided child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "DeepCloneWithChild2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty with the provided child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().ThatIs(_ => !systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetReadOnlyCollectionChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetReadOnlyCollectionChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetReadOnlyCollectionChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetReadOnlyCollectionChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetReadOnlyCollectionChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetReadOnlyCollectionChild2[]
                    {
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty)).ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty)).ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty)).ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty)).ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty)).ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty)).ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)).ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty)).Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty)).Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty)).Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty)).Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty)).Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty)).Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)).Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty)).Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty)).Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetReadOnlyCollectionChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>().Whose(_ => !_.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)).Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollectionChild2___Should_implement_IModel_of_ModelAllPrivateSetReadOnlyCollectionChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollectionChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetReadOnlyCollectionChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.DeclaredAndInheritedPublicInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetReadOnlyCollectionChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetReadOnlyCollectionChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetReadOnlyCollectionChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                // Act
                var actual = (ModelAllPrivateSetReadOnlyCollectionChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfBoolProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfBoolProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfIntProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfIntProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfStringProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfGuidProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfGuidProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyCollectionInterfaceOfBoolProperty", "ParentReadOnlyCollectionInterfaceOfIntProperty", "ParentReadOnlyCollectionInterfaceOfStringProperty", "ParentReadOnlyCollectionInterfaceOfGuidProperty", "ParentReadOnlyCollectionInterfaceOfDateTimeProperty", "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty", "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "ParentReadOnlyCollectionInterfaceOfCustomClassProperty", "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "Child2ReadOnlyCollectionInterfaceOfBoolProperty", "Child2ReadOnlyCollectionInterfaceOfIntProperty", "Child2ReadOnlyCollectionInterfaceOfStringProperty", "Child2ReadOnlyCollectionInterfaceOfGuidProperty", "Child2ReadOnlyCollectionInterfaceOfDateTimeProperty", "Child2ReadOnlyCollectionInterfaceOfCustomEnumProperty", "Child2ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "Child2ReadOnlyCollectionInterfaceOfCustomClassProperty", "Child2ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "Child2ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetReadOnlyCollectionChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelAllPrivateSetReadOnlyCollectionChild2).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetReadOnlyCollectionChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest1 = null;
                ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetReadOnlyCollectionChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetReadOnlyCollectionChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
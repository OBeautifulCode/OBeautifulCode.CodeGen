// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetArrayOfNullableChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetArrayOfNullableChild2: ParentArrayOfNullableBoolProperty = {systemUnderTest.ParentArrayOfNullableBoolProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableIntProperty = {systemUnderTest.ParentArrayOfNullableIntProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableGuidProperty = {systemUnderTest.ParentArrayOfNullableGuidProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableDateTimeProperty = {systemUnderTest.ParentArrayOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableCustomEnumProperty = {systemUnderTest.ParentArrayOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ParentArrayOfNullableCustomFlagsEnumProperty = {systemUnderTest.ParentArrayOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableBoolProperty = {systemUnderTest.Child2ArrayOfNullableBoolProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableIntProperty = {systemUnderTest.Child2ArrayOfNullableIntProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableGuidProperty = {systemUnderTest.Child2ArrayOfNullableGuidProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableDateTimeProperty = {systemUnderTest.Child2ArrayOfNullableDateTimeProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableCustomEnumProperty = {systemUnderTest.Child2ArrayOfNullableCustomEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty = {systemUnderTest.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, Child2ArrayOfNullableCustomFlagsEnumProperty = {systemUnderTest.Child2ArrayOfNullableCustomFlagsEnumProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             null,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             new bool?[0],
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             null,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             new int?[0],
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             null,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             new Guid?[0],
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             null,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             new DateTime?[0],
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             new CustomEnum?[0],
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             new CustomEnumValidatedNotDefault?[0],
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new CustomFlagsEnum?[0],
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableBoolProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             new bool?[0],
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableBoolProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableIntProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             new int?[0],
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableIntProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableGuidProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             new Guid?[0],
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableGuidProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableDateTimeProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             new DateTime?[0],
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableDateTimeProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             new CustomEnum?[0],
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomEnumProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             new CustomEnumValidatedNotDefault?[0],
                                             referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfNullableCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomFlagsEnumProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new ModelAllPrivateSetArrayOfNullableChild2(
                                             referenceObject.ParentArrayOfNullableBoolProperty,
                                             referenceObject.ParentArrayOfNullableIntProperty,
                                             referenceObject.ParentArrayOfNullableGuidProperty,
                                             referenceObject.ParentArrayOfNullableDateTimeProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                             referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfNullableBoolProperty,
                                             referenceObject.Child2ArrayOfNullableIntProperty,
                                             referenceObject.Child2ArrayOfNullableGuidProperty,
                                             referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                             referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                             new CustomFlagsEnum?[0]);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableBoolProperty should return same 'parentArrayOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableIntProperty should return same 'parentArrayOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableGuidProperty should return same 'parentArrayOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableDateTimeProperty should return same 'parentArrayOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableCustomEnumProperty should return same 'parentArrayOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty should return same 'parentArrayOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "ParentArrayOfNullableCustomFlagsEnumProperty should return same 'parentArrayOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfNullableCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableBoolProperty should return same 'child2ArrayOfNullableBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableIntProperty should return same 'child2ArrayOfNullableIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableGuidProperty should return same 'child2ArrayOfNullableGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableDateTimeProperty should return same 'child2ArrayOfNullableDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableCustomEnumProperty should return same 'child2ArrayOfNullableCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty should return same 'child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Child2ArrayOfNullableCustomFlagsEnumProperty should return same 'child2ArrayOfNullableCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayOfNullableChild2(
                                                      referenceObject.ParentArrayOfNullableBoolProperty,
                                                      referenceObject.ParentArrayOfNullableIntProperty,
                                                      referenceObject.ParentArrayOfNullableGuidProperty,
                                                      referenceObject.ParentArrayOfNullableDateTimeProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumProperty,
                                                      referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableBoolProperty,
                                                      referenceObject.Child2ArrayOfNullableIntProperty,
                                                      referenceObject.Child2ArrayOfNullableGuidProperty,
                                                      referenceObject.Child2ArrayOfNullableDateTimeProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                                      referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfNullableCustomFlagsEnumProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableBoolProperty should deep clone object and replace ParentArrayOfNullableBoolProperty with the provided parentArrayOfNullableBoolProperty",
                    WithPropertyName = "ParentArrayOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableBoolProperty.IsEqualTo(_.ParentArrayOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableIntProperty should deep clone object and replace ParentArrayOfNullableIntProperty with the provided parentArrayOfNullableIntProperty",
                    WithPropertyName = "ParentArrayOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableIntProperty.IsEqualTo(_.ParentArrayOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableGuidProperty should deep clone object and replace ParentArrayOfNullableGuidProperty with the provided parentArrayOfNullableGuidProperty",
                    WithPropertyName = "ParentArrayOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableGuidProperty.IsEqualTo(_.ParentArrayOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableDateTimeProperty should deep clone object and replace ParentArrayOfNullableDateTimeProperty with the provided parentArrayOfNullableDateTimeProperty",
                    WithPropertyName = "ParentArrayOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableDateTimeProperty.IsEqualTo(_.ParentArrayOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableCustomEnumProperty should deep clone object and replace ParentArrayOfNullableCustomEnumProperty with the provided parentArrayOfNullableCustomEnumProperty",
                    WithPropertyName = "ParentArrayOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableCustomEnumProperty.IsEqualTo(_.ParentArrayOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty with the provided parentArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithParentArrayOfNullableCustomFlagsEnumProperty should deep clone object and replace ParentArrayOfNullableCustomFlagsEnumProperty with the provided parentArrayOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "ParentArrayOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfNullableCustomFlagsEnumProperty.IsEqualTo(_.ParentArrayOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableBoolProperty should deep clone object and replace Child2ArrayOfNullableBoolProperty with the provided child2ArrayOfNullableBoolProperty",
                    WithPropertyName = "Child2ArrayOfNullableBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableBoolProperty.IsEqualTo(_.Child2ArrayOfNullableBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableIntProperty should deep clone object and replace Child2ArrayOfNullableIntProperty with the provided child2ArrayOfNullableIntProperty",
                    WithPropertyName = "Child2ArrayOfNullableIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableIntProperty.IsEqualTo(_.Child2ArrayOfNullableIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableGuidProperty should deep clone object and replace Child2ArrayOfNullableGuidProperty with the provided child2ArrayOfNullableGuidProperty",
                    WithPropertyName = "Child2ArrayOfNullableGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableGuidProperty.IsEqualTo(_.Child2ArrayOfNullableGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableDateTimeProperty should deep clone object and replace Child2ArrayOfNullableDateTimeProperty with the provided child2ArrayOfNullableDateTimeProperty",
                    WithPropertyName = "Child2ArrayOfNullableDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableDateTimeProperty.IsEqualTo(_.Child2ArrayOfNullableDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableCustomEnumProperty should deep clone object and replace Child2ArrayOfNullableCustomEnumProperty with the provided child2ArrayOfNullableCustomEnumProperty",
                    WithPropertyName = "Child2ArrayOfNullableCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableCustomEnumProperty.IsEqualTo(_.Child2ArrayOfNullableCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableCustomEnumValidatedNotDefaultProperty should deep clone object and replace Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty with the provided child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfNullableCustomFlagsEnumProperty should deep clone object and replace Child2ArrayOfNullableCustomFlagsEnumProperty with the provided child2ArrayOfNullableCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ArrayOfNullableCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfNullableCustomFlagsEnumProperty.IsEqualTo(_.Child2ArrayOfNullableCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayOfNullableChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfNullableCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetArrayOfNullableChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetArrayOfNullableChild2[]
                    {
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetArrayOfNullableChild2[]
                    {
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty)).ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty)).ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty)).ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty)).ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty)).ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty)).ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.ParentArrayOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty)).ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty)).Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty)).Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty)).Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty)).Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty)).Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty)).Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty),
                        new ModelAllPrivateSetArrayOfNullableChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfNullableCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty,
                                A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>().Whose(_ => !_.Child2ArrayOfNullableCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfNullableCustomFlagsEnumProperty)).Child2ArrayOfNullableCustomFlagsEnumProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetArrayOfNullableChild1>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPrivateSetArrayOfNullableChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPrivateSetArrayOfNullableChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPrivateSetArrayOfNullableChild2>
                {
                    Name = "a dummy ModelAllPrivateSetArrayOfNullableChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayOfNullableChild2___Should_implement_IModel_of_ModelAllPrivateSetArrayOfNullableChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayOfNullableChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetArrayOfNullableChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetArrayOfNullableChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayOfNullableChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayOfNullableChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach (var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                // Act
                var actual = (ModelAllPrivateSetArrayOfNullableChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentArrayOfNullableBoolProperty == null)
                {
                    actual.ParentArrayOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableBoolProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableIntProperty == null)
                {
                    actual.ParentArrayOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableIntProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableGuidProperty == null)
                {
                    actual.ParentArrayOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableGuidProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableDateTimeProperty == null)
                {
                    actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableDateTimeProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableCustomEnumProperty == null)
                {
                    actual.ParentArrayOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ParentArrayOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.ParentArrayOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfNullableCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableBoolProperty == null)
                {
                    actual.Child2ArrayOfNullableBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableBoolProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableIntProperty == null)
                {
                    actual.Child2ArrayOfNullableIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableIntProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableGuidProperty == null)
                {
                    actual.Child2ArrayOfNullableGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableGuidProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableDateTimeProperty == null)
                {
                    actual.Child2ArrayOfNullableDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableDateTimeProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableCustomEnumProperty == null)
                {
                    actual.Child2ArrayOfNullableCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableCustomEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.Child2ArrayOfNullableCustomFlagsEnumProperty == null)
                {
                    actual.Child2ArrayOfNullableCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfNullableCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfNullableCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfNullableCustomFlagsEnumProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentArrayOfNullableBoolProperty", "ParentArrayOfNullableIntProperty", "ParentArrayOfNullableGuidProperty", "ParentArrayOfNullableDateTimeProperty", "ParentArrayOfNullableCustomEnumProperty", "ParentArrayOfNullableCustomEnumValidatedNotDefaultProperty", "ParentArrayOfNullableCustomFlagsEnumProperty", "Child2ArrayOfNullableBoolProperty", "Child2ArrayOfNullableIntProperty", "Child2ArrayOfNullableGuidProperty", "Child2ArrayOfNullableDateTimeProperty", "Child2ArrayOfNullableCustomEnumProperty", "Child2ArrayOfNullableCustomEnumValidatedNotDefaultProperty", "Child2ArrayOfNullableCustomFlagsEnumProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetArrayOfNullableChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetArrayOfNullableChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayOfNullableChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest1 = null;
                ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayOfNullableParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayOfNullableParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayOfNullableParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayOfNullableParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayOfNullableChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayOfNullableChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
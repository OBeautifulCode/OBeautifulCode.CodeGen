// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetArrayTest
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetArray> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetArray>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetArray: ArrayOfBoolProperty = {systemUnderTest.ArrayOfBoolProperty?.ToString() ?? "<null>"}, ArrayOfIntProperty = {systemUnderTest.ArrayOfIntProperty?.ToString() ?? "<null>"}, ArrayOfStringProperty = {systemUnderTest.ArrayOfStringProperty?.ToString() ?? "<null>"}, ArrayOfGuidProperty = {systemUnderTest.ArrayOfGuidProperty?.ToString() ?? "<null>"}, ArrayOfDateTimeProperty = {systemUnderTest.ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ArrayOfCustomEnumProperty = {systemUnderTest.ArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, ArrayOfCustomFlagsEnumProperty = {systemUnderTest.ArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ArrayOfCustomClassProperty = {systemUnderTest.ArrayOfCustomClassProperty?.ToString() ?? "<null>"}, ArrayOfCustomBaseClassProperty = {systemUnderTest.ArrayOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ArrayOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArray> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArray>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             null,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             new bool[0],
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             null,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             new int[0],
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             null,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             new string[0],
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             new string[0].Concat(referenceObject.ArrayOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ArrayOfStringProperty).ToArray(),
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             null,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             new Guid[0],
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             null,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             new DateTime[0],
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             null,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             new CustomEnum[0],
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             null,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             new CustomFlagsEnum[0],
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0],
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ArrayOfCustomClassProperty).ToArray(),
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             null,
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             new CustomBaseClass[0],
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomBaseClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.ArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.ArrayOfCustomBaseClassProperty).ToArray(),
                                             referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomBaseClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'arrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0]);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "constructor should throw ArgumentException when parameter 'arrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new ModelAllPrivateSetArray(
                                             referenceObject.ArrayOfBoolProperty,
                                             referenceObject.ArrayOfIntProperty,
                                             referenceObject.ArrayOfStringProperty,
                                             referenceObject.ArrayOfGuidProperty,
                                             referenceObject.ArrayOfDateTimeProperty,
                                             referenceObject.ArrayOfCustomEnumProperty,
                                             referenceObject.ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ArrayOfCustomClassProperty,
                                             referenceObject.ArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty).ToArray());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "arrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArray> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArray>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfBoolProperty should return same 'arrayOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfIntProperty should return same 'arrayOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfStringProperty should return same 'arrayOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfGuidProperty should return same 'arrayOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfDateTimeProperty should return same 'arrayOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfCustomEnumProperty should return same 'arrayOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfCustomFlagsEnumProperty should return same 'arrayOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfCustomClassProperty should return same 'arrayOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfCustomBaseClassProperty should return same 'arrayOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "ArrayOfCustomGenericClassOfCustomClassProperty should return same 'arrayOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArray(
                                                      referenceObject.ArrayOfBoolProperty,
                                                      referenceObject.ArrayOfIntProperty,
                                                      referenceObject.ArrayOfStringProperty,
                                                      referenceObject.ArrayOfGuidProperty,
                                                      referenceObject.ArrayOfDateTimeProperty,
                                                      referenceObject.ArrayOfCustomEnumProperty,
                                                      referenceObject.ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ArrayOfCustomClassProperty,
                                                      referenceObject.ArrayOfCustomBaseClassProperty,
                                                      referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ArrayOfCustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetArray> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetArray>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfBoolProperty should deep clone object and replace ArrayOfBoolProperty with the provided arrayOfBoolProperty",
                    WithPropertyName = "ArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfBoolProperty.IsEqualTo(_.ArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfIntProperty should deep clone object and replace ArrayOfIntProperty with the provided arrayOfIntProperty",
                    WithPropertyName = "ArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfIntProperty.IsEqualTo(_.ArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfStringProperty should deep clone object and replace ArrayOfStringProperty with the provided arrayOfStringProperty",
                    WithPropertyName = "ArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfStringProperty.IsEqualTo(_.ArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfGuidProperty should deep clone object and replace ArrayOfGuidProperty with the provided arrayOfGuidProperty",
                    WithPropertyName = "ArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfGuidProperty.IsEqualTo(_.ArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfDateTimeProperty should deep clone object and replace ArrayOfDateTimeProperty with the provided arrayOfDateTimeProperty",
                    WithPropertyName = "ArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfDateTimeProperty.IsEqualTo(_.ArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfCustomEnumProperty should deep clone object and replace ArrayOfCustomEnumProperty with the provided arrayOfCustomEnumProperty",
                    WithPropertyName = "ArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfCustomEnumProperty.IsEqualTo(_.ArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfCustomFlagsEnumProperty should deep clone object and replace ArrayOfCustomFlagsEnumProperty with the provided arrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "ArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfCustomFlagsEnumProperty.IsEqualTo(_.ArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfCustomClassProperty should deep clone object and replace ArrayOfCustomClassProperty with the provided arrayOfCustomClassProperty",
                    WithPropertyName = "ArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfCustomClassProperty.IsEqualTo(_.ArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfCustomBaseClassProperty should deep clone object and replace ArrayOfCustomBaseClassProperty with the provided arrayOfCustomBaseClassProperty",
                    WithPropertyName = "ArrayOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfCustomBaseClassProperty.IsEqualTo(_.ArrayOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "DeepCloneWithArrayOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ArrayOfCustomGenericClassOfCustomClassProperty with the provided arrayOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ArrayOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArray>().ThatIs(_ => !systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ArrayOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArray>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetArray ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetArray>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetArray> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetArray>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetArray>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetArray[]
                    {
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetArray[]
                    {
                        new ModelAllPrivateSetArray(
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty)).ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty)).ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty)).ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty)).ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty)).ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty)).ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty)).ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty)).ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty)).ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArray(
                                ReferenceObjectForEquatableTestScenarios.ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ArrayOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetArray>().Whose(_ => !_.ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ArrayOfCustomGenericClassOfCustomClassProperty)).ArrayOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArray___Should_implement_IModel_of_ModelAllPrivateSetArray___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArray);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetArray>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetArray>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArray___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArray);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                // Act
                var actual = (ModelAllPrivateSetArray)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArray>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ArrayOfBoolProperty == null)
                {
                    actual.ArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfBoolProperty);
                }

                if (systemUnderTest.ArrayOfIntProperty == null)
                {
                    actual.ArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfIntProperty);
                }

                if (systemUnderTest.ArrayOfStringProperty == null)
                {
                    actual.ArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfStringProperty);
                }

                if (systemUnderTest.ArrayOfGuidProperty == null)
                {
                    actual.ArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfGuidProperty);
                }

                if (systemUnderTest.ArrayOfDateTimeProperty == null)
                {
                    actual.ArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfDateTimeProperty);
                }

                if (systemUnderTest.ArrayOfCustomEnumProperty == null)
                {
                    actual.ArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.ArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.ArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ArrayOfCustomClassProperty == null)
                {
                    actual.ArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfCustomClassProperty);
                }

                if (systemUnderTest.ArrayOfCustomBaseClassProperty == null)
                {
                    actual.ArrayOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ArrayOfBoolProperty", "ArrayOfIntProperty", "ArrayOfStringProperty", "ArrayOfGuidProperty", "ArrayOfDateTimeProperty", "ArrayOfCustomEnumProperty", "ArrayOfCustomFlagsEnumProperty", "ArrayOfCustomClassProperty", "ArrayOfCustomBaseClassProperty", "ArrayOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetArray)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetArray).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArray>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArray>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArray>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArray>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArray systemUnderTest1 = null;
                ModelAllPrivateSetArray systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArray systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArray systemUnderTest1 = null;
                ModelAllPrivateSetArray systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArray systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArray___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArray systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArray___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArray___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArray___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArray___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
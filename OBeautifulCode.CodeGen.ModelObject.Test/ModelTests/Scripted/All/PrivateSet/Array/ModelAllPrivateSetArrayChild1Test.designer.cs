// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetArrayChild1Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetArrayChild1> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetArrayChild1>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetArrayChild1: ParentArrayOfBoolProperty = {systemUnderTest.ParentArrayOfBoolProperty?.ToString() ?? "<null>"}, ParentArrayOfIntProperty = {systemUnderTest.ParentArrayOfIntProperty?.ToString() ?? "<null>"}, ParentArrayOfStringProperty = {systemUnderTest.ParentArrayOfStringProperty?.ToString() ?? "<null>"}, ParentArrayOfGuidProperty = {systemUnderTest.ParentArrayOfGuidProperty?.ToString() ?? "<null>"}, ParentArrayOfDateTimeProperty = {systemUnderTest.ParentArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomEnumProperty = {systemUnderTest.ParentArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomFlagsEnumProperty = {systemUnderTest.ParentArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomClassProperty = {systemUnderTest.ParentArrayOfCustomClassProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomBaseClassProperty = {systemUnderTest.ParentArrayOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ArrayOfBoolProperty = {systemUnderTest.Child1ArrayOfBoolProperty?.ToString() ?? "<null>"}, Child1ArrayOfIntProperty = {systemUnderTest.Child1ArrayOfIntProperty?.ToString() ?? "<null>"}, Child1ArrayOfStringProperty = {systemUnderTest.Child1ArrayOfStringProperty?.ToString() ?? "<null>"}, Child1ArrayOfGuidProperty = {systemUnderTest.Child1ArrayOfGuidProperty?.ToString() ?? "<null>"}, Child1ArrayOfDateTimeProperty = {systemUnderTest.Child1ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, Child1ArrayOfCustomEnumProperty = {systemUnderTest.Child1ArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, Child1ArrayOfCustomFlagsEnumProperty = {systemUnderTest.Child1ArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child1ArrayOfCustomClassProperty = {systemUnderTest.Child1ArrayOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ArrayOfCustomBaseClassProperty = {systemUnderTest.Child1ArrayOfCustomBaseClassProperty?.ToString() ?? "<null>"}, Child1ArrayOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.Child1ArrayOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayChild1> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayChild1>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             null,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             new bool[0],
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             null,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             new int[0],
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             null,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             new string[0],
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             new string[0].Concat(referenceObject.ParentArrayOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentArrayOfStringProperty).ToArray(),
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             null,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             new Guid[0],
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             new DateTime[0],
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             new CustomEnum[0],
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             new CustomFlagsEnum[0],
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0],
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ParentArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ParentArrayOfCustomClassProperty).ToArray(),
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             new CustomBaseClass[0],
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomBaseClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.ParentArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.ParentArrayOfCustomBaseClassProperty).ToArray(),
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomBaseClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             null,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0],
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty).ToArray(),
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             null,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             new bool[0],
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             null,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             new int[0],
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             null,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             new string[0],
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             new string[0].Concat(referenceObject.Child1ArrayOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child1ArrayOfStringProperty).ToArray(),
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             null,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             new Guid[0],
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             null,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             new DateTime[0],
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             null,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             new CustomEnum[0],
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             null,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             new CustomFlagsEnum[0],
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0],
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.Child1ArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.Child1ArrayOfCustomClassProperty).ToArray(),
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfCustomBaseClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             null,
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomBaseClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             new CustomBaseClass[0],
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomBaseClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomBaseClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             new CustomBaseClass[0].Concat(referenceObject.Child1ArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(referenceObject.Child1ArrayOfCustomBaseClassProperty).ToArray(),
                                             referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomBaseClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child1ArrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomGenericClassOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0]);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child1ArrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new ModelAllPrivateSetArrayChild1(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.ParentArrayOfCustomBaseClassProperty,
                                             referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfBoolProperty,
                                             referenceObject.Child1ArrayOfIntProperty,
                                             referenceObject.Child1ArrayOfStringProperty,
                                             referenceObject.Child1ArrayOfGuidProperty,
                                             referenceObject.Child1ArrayOfDateTimeProperty,
                                             referenceObject.Child1ArrayOfCustomEnumProperty,
                                             referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child1ArrayOfCustomClassProperty,
                                             referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                             new CustomGenericClass<CustomClass>[0].Concat(referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty).ToArray());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child1ArrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayChild1> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayChild1>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfBoolProperty should return same 'parentArrayOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfIntProperty should return same 'parentArrayOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfStringProperty should return same 'parentArrayOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfGuidProperty should return same 'parentArrayOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfDateTimeProperty should return same 'parentArrayOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfCustomEnumProperty should return same 'parentArrayOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfCustomFlagsEnumProperty should return same 'parentArrayOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfCustomClassProperty should return same 'parentArrayOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfCustomBaseClassProperty should return same 'parentArrayOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "ParentArrayOfCustomGenericClassOfCustomClassProperty should return same 'parentArrayOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomGenericClassOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfBoolProperty should return same 'child1ArrayOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfIntProperty should return same 'child1ArrayOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfStringProperty should return same 'child1ArrayOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfGuidProperty should return same 'child1ArrayOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfDateTimeProperty should return same 'child1ArrayOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfCustomEnumProperty should return same 'child1ArrayOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfCustomFlagsEnumProperty should return same 'child1ArrayOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfCustomClassProperty should return same 'child1ArrayOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfCustomBaseClassProperty should return same 'child1ArrayOfCustomBaseClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfCustomBaseClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Child1ArrayOfCustomGenericClassOfCustomClassProperty should return same 'child1ArrayOfCustomGenericClassOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild1(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.ParentArrayOfCustomBaseClassProperty,
                                                      referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfBoolProperty,
                                                      referenceObject.Child1ArrayOfIntProperty,
                                                      referenceObject.Child1ArrayOfStringProperty,
                                                      referenceObject.Child1ArrayOfGuidProperty,
                                                      referenceObject.Child1ArrayOfDateTimeProperty,
                                                      referenceObject.Child1ArrayOfCustomEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child1ArrayOfCustomClassProperty,
                                                      referenceObject.Child1ArrayOfCustomBaseClassProperty,
                                                      referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child1ArrayOfCustomGenericClassOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetArrayChild1> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetArrayChild1>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfBoolProperty should deep clone object and replace ParentArrayOfBoolProperty with the provided parentArrayOfBoolProperty",
                    WithPropertyName = "ParentArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfBoolProperty.IsEqualTo(_.ParentArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfIntProperty should deep clone object and replace ParentArrayOfIntProperty with the provided parentArrayOfIntProperty",
                    WithPropertyName = "ParentArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfIntProperty.IsEqualTo(_.ParentArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfStringProperty should deep clone object and replace ParentArrayOfStringProperty with the provided parentArrayOfStringProperty",
                    WithPropertyName = "ParentArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfStringProperty.IsEqualTo(_.ParentArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfGuidProperty should deep clone object and replace ParentArrayOfGuidProperty with the provided parentArrayOfGuidProperty",
                    WithPropertyName = "ParentArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfGuidProperty.IsEqualTo(_.ParentArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfDateTimeProperty should deep clone object and replace ParentArrayOfDateTimeProperty with the provided parentArrayOfDateTimeProperty",
                    WithPropertyName = "ParentArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfDateTimeProperty.IsEqualTo(_.ParentArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfCustomEnumProperty should deep clone object and replace ParentArrayOfCustomEnumProperty with the provided parentArrayOfCustomEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomEnumProperty.IsEqualTo(_.ParentArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfCustomFlagsEnumProperty should deep clone object and replace ParentArrayOfCustomFlagsEnumProperty with the provided parentArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(_.ParentArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfCustomClassProperty should deep clone object and replace ParentArrayOfCustomClassProperty with the provided parentArrayOfCustomClassProperty",
                    WithPropertyName = "ParentArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomClassProperty.IsEqualTo(_.ParentArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfCustomBaseClassProperty should deep clone object and replace ParentArrayOfCustomBaseClassProperty with the provided parentArrayOfCustomBaseClassProperty",
                    WithPropertyName = "ParentArrayOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomBaseClassProperty.IsEqualTo(_.ParentArrayOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithParentArrayOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentArrayOfCustomGenericClassOfCustomClassProperty with the provided parentArrayOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentArrayOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentArrayOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfBoolProperty should deep clone object and replace Child1ArrayOfBoolProperty with the provided child1ArrayOfBoolProperty",
                    WithPropertyName = "Child1ArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfBoolProperty.IsEqualTo(_.Child1ArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfIntProperty should deep clone object and replace Child1ArrayOfIntProperty with the provided child1ArrayOfIntProperty",
                    WithPropertyName = "Child1ArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfIntProperty.IsEqualTo(_.Child1ArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfStringProperty should deep clone object and replace Child1ArrayOfStringProperty with the provided child1ArrayOfStringProperty",
                    WithPropertyName = "Child1ArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfStringProperty.IsEqualTo(_.Child1ArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfGuidProperty should deep clone object and replace Child1ArrayOfGuidProperty with the provided child1ArrayOfGuidProperty",
                    WithPropertyName = "Child1ArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfGuidProperty.IsEqualTo(_.Child1ArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfDateTimeProperty should deep clone object and replace Child1ArrayOfDateTimeProperty with the provided child1ArrayOfDateTimeProperty",
                    WithPropertyName = "Child1ArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfDateTimeProperty.IsEqualTo(_.Child1ArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfCustomEnumProperty should deep clone object and replace Child1ArrayOfCustomEnumProperty with the provided child1ArrayOfCustomEnumProperty",
                    WithPropertyName = "Child1ArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfCustomEnumProperty.IsEqualTo(_.Child1ArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfCustomFlagsEnumProperty should deep clone object and replace Child1ArrayOfCustomFlagsEnumProperty with the provided child1ArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child1ArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfCustomFlagsEnumProperty.IsEqualTo(_.Child1ArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfCustomClassProperty should deep clone object and replace Child1ArrayOfCustomClassProperty with the provided child1ArrayOfCustomClassProperty",
                    WithPropertyName = "Child1ArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfCustomClassProperty.IsEqualTo(_.Child1ArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfCustomBaseClassProperty should deep clone object and replace Child1ArrayOfCustomBaseClassProperty with the provided child1ArrayOfCustomBaseClassProperty",
                    WithPropertyName = "Child1ArrayOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfCustomBaseClassProperty.IsEqualTo(_.Child1ArrayOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "DeepCloneWithChild1ArrayOfCustomGenericClassOfCustomClassProperty should deep clone object and replace Child1ArrayOfCustomGenericClassOfCustomClassProperty with the provided child1ArrayOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child1ArrayOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild1>().ThatIs(_ => !systemUnderTest.Child1ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child1ArrayOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetArrayChild1 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetArrayChild1>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetArrayChild1> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetArrayChild1>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetArrayChild1>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetArrayChild1[]
                    {
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetArrayChild1[]
                    {
                        new ModelAllPrivateSetArrayChild1(
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty)).ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty)).ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty)).ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty)).ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty)).ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty)).ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty)).ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty)).ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty)).ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.ParentArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty)).ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty)).Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty)).Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty)).Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty)).Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty)).Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty)).Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty)).Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty)).Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty)).Child1ArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild1(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomBaseClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild1>().Whose(_ => !_.Child1ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ArrayOfCustomGenericClassOfCustomClassProperty)).Child1ArrayOfCustomGenericClassOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetArrayChild2>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayChild1___Should_implement_IModel_of_ModelAllPrivateSetArrayChild1___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayChild1);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetArrayChild1>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.PublicDeclaredAndInheritedInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetArrayChild1>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                // Act
                var actual = (ModelAllPrivateSetArrayChild1)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild1>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentArrayOfBoolProperty == null)
                {
                    actual.ParentArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfBoolProperty);
                }

                if (systemUnderTest.ParentArrayOfIntProperty == null)
                {
                    actual.ParentArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfIntProperty);
                }

                if (systemUnderTest.ParentArrayOfStringProperty == null)
                {
                    actual.ParentArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfStringProperty);
                }

                if (systemUnderTest.ParentArrayOfGuidProperty == null)
                {
                    actual.ParentArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfGuidProperty);
                }

                if (systemUnderTest.ParentArrayOfDateTimeProperty == null)
                {
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomEnumProperty == null)
                {
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomClassProperty == null)
                {
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomClassProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomBaseClassProperty == null)
                {
                    actual.ParentArrayOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ArrayOfBoolProperty == null)
                {
                    actual.Child1ArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfBoolProperty);
                }

                if (systemUnderTest.Child1ArrayOfIntProperty == null)
                {
                    actual.Child1ArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfIntProperty);
                }

                if (systemUnderTest.Child1ArrayOfStringProperty == null)
                {
                    actual.Child1ArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfStringProperty);
                }

                if (systemUnderTest.Child1ArrayOfGuidProperty == null)
                {
                    actual.Child1ArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfGuidProperty);
                }

                if (systemUnderTest.Child1ArrayOfDateTimeProperty == null)
                {
                    actual.Child1ArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfDateTimeProperty);
                }

                if (systemUnderTest.Child1ArrayOfCustomEnumProperty == null)
                {
                    actual.Child1ArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.Child1ArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.Child1ArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child1ArrayOfCustomClassProperty == null)
                {
                    actual.Child1ArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ArrayOfCustomBaseClassProperty == null)
                {
                    actual.Child1ArrayOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfCustomBaseClassProperty);
                }

                if (systemUnderTest.Child1ArrayOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child1ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ArrayOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentArrayOfBoolProperty", "ParentArrayOfIntProperty", "ParentArrayOfStringProperty", "ParentArrayOfGuidProperty", "ParentArrayOfDateTimeProperty", "ParentArrayOfCustomEnumProperty", "ParentArrayOfCustomFlagsEnumProperty", "ParentArrayOfCustomClassProperty", "ParentArrayOfCustomBaseClassProperty", "ParentArrayOfCustomGenericClassOfCustomClassProperty", "Child1ArrayOfBoolProperty", "Child1ArrayOfIntProperty", "Child1ArrayOfStringProperty", "Child1ArrayOfGuidProperty", "Child1ArrayOfDateTimeProperty", "Child1ArrayOfCustomEnumProperty", "Child1ArrayOfCustomFlagsEnumProperty", "Child1ArrayOfCustomClassProperty", "Child1ArrayOfCustomBaseClassProperty", "Child1ArrayOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetArrayChild1)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPrivateSetArrayChild1).GetPropertyInfo(propertyName, BindingFlagsFor.PublicDeclaredAndInheritedInstanceMembers);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayChild1 systemUnderTest1 = null;
                ModelAllPrivateSetArrayChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayChild1 systemUnderTest1 = null;
                ModelAllPrivateSetArrayChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild1___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild1 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild1___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild1___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild1___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild1___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
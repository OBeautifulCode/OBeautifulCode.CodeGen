// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPublicSetArrayChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPublicSetArrayChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPublicSetArrayChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetArrayChild2: ParentArrayOfBoolProperty = {systemUnderTest.ParentArrayOfBoolProperty?.ToString() ?? "<null>"}, ParentArrayOfIntProperty = {systemUnderTest.ParentArrayOfIntProperty?.ToString() ?? "<null>"}, ParentArrayOfStringProperty = {systemUnderTest.ParentArrayOfStringProperty?.ToString() ?? "<null>"}, ParentArrayOfGuidProperty = {systemUnderTest.ParentArrayOfGuidProperty?.ToString() ?? "<null>"}, ParentArrayOfDateTimeProperty = {systemUnderTest.ParentArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomEnumProperty = {systemUnderTest.ParentArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomEnumValidatedNotDefaultProperty = {systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomFlagsEnumProperty = {systemUnderTest.ParentArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomClassProperty = {systemUnderTest.ParentArrayOfCustomClassProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomBaseClassProperty = {systemUnderTest.ParentArrayOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ArrayOfBoolProperty = {systemUnderTest.Child2ArrayOfBoolProperty?.ToString() ?? "<null>"}, Child2ArrayOfIntProperty = {systemUnderTest.Child2ArrayOfIntProperty?.ToString() ?? "<null>"}, Child2ArrayOfStringProperty = {systemUnderTest.Child2ArrayOfStringProperty?.ToString() ?? "<null>"}, Child2ArrayOfGuidProperty = {systemUnderTest.Child2ArrayOfGuidProperty?.ToString() ?? "<null>"}, Child2ArrayOfDateTimeProperty = {systemUnderTest.Child2ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomEnumProperty = {systemUnderTest.Child2ArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomEnumValidatedNotDefaultProperty = {systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomFlagsEnumProperty = {systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomClassProperty = {systemUnderTest.Child2ArrayOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomBaseClassProperty = {systemUnderTest.Child2ArrayOfCustomBaseClassProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPublicSetArrayChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPublicSetArrayChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfBoolProperty should deep clone object and replace ParentArrayOfBoolProperty with the provided parentArrayOfBoolProperty",
                    WithPropertyName = "ParentArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfBoolProperty.IsEqualTo(_.ParentArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfIntProperty should deep clone object and replace ParentArrayOfIntProperty with the provided parentArrayOfIntProperty",
                    WithPropertyName = "ParentArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfIntProperty.IsEqualTo(_.ParentArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfStringProperty should deep clone object and replace ParentArrayOfStringProperty with the provided parentArrayOfStringProperty",
                    WithPropertyName = "ParentArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfStringProperty.IsEqualTo(_.ParentArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfGuidProperty should deep clone object and replace ParentArrayOfGuidProperty with the provided parentArrayOfGuidProperty",
                    WithPropertyName = "ParentArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfGuidProperty.IsEqualTo(_.ParentArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfDateTimeProperty should deep clone object and replace ParentArrayOfDateTimeProperty with the provided parentArrayOfDateTimeProperty",
                    WithPropertyName = "ParentArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfDateTimeProperty.IsEqualTo(_.ParentArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomEnumProperty should deep clone object and replace ParentArrayOfCustomEnumProperty with the provided parentArrayOfCustomEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomEnumProperty.IsEqualTo(_.ParentArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomEnumValidatedNotDefaultProperty should deep clone object and replace ParentArrayOfCustomEnumValidatedNotDefaultProperty with the provided parentArrayOfCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "ParentArrayOfCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.ParentArrayOfCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomFlagsEnumProperty should deep clone object and replace ParentArrayOfCustomFlagsEnumProperty with the provided parentArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(_.ParentArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomClassProperty should deep clone object and replace ParentArrayOfCustomClassProperty with the provided parentArrayOfCustomClassProperty",
                    WithPropertyName = "ParentArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomClassProperty.IsEqualTo(_.ParentArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomBaseClassProperty should deep clone object and replace ParentArrayOfCustomBaseClassProperty with the provided parentArrayOfCustomBaseClassProperty",
                    WithPropertyName = "ParentArrayOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomBaseClassProperty.IsEqualTo(_.ParentArrayOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentArrayOfCustomGenericClassOfCustomClassProperty with the provided parentArrayOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentArrayOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentArrayOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfBoolProperty should deep clone object and replace Child2ArrayOfBoolProperty with the provided child2ArrayOfBoolProperty",
                    WithPropertyName = "Child2ArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfBoolProperty.IsEqualTo(_.Child2ArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfIntProperty should deep clone object and replace Child2ArrayOfIntProperty with the provided child2ArrayOfIntProperty",
                    WithPropertyName = "Child2ArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfIntProperty.IsEqualTo(_.Child2ArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfStringProperty should deep clone object and replace Child2ArrayOfStringProperty with the provided child2ArrayOfStringProperty",
                    WithPropertyName = "Child2ArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfStringProperty.IsEqualTo(_.Child2ArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfGuidProperty should deep clone object and replace Child2ArrayOfGuidProperty with the provided child2ArrayOfGuidProperty",
                    WithPropertyName = "Child2ArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfGuidProperty.IsEqualTo(_.Child2ArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfDateTimeProperty should deep clone object and replace Child2ArrayOfDateTimeProperty with the provided child2ArrayOfDateTimeProperty",
                    WithPropertyName = "Child2ArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfDateTimeProperty.IsEqualTo(_.Child2ArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomEnumProperty should deep clone object and replace Child2ArrayOfCustomEnumProperty with the provided child2ArrayOfCustomEnumProperty",
                    WithPropertyName = "Child2ArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomEnumProperty.IsEqualTo(_.Child2ArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomEnumValidatedNotDefaultProperty should deep clone object and replace Child2ArrayOfCustomEnumValidatedNotDefaultProperty with the provided child2ArrayOfCustomEnumValidatedNotDefaultProperty",
                    WithPropertyName = "Child2ArrayOfCustomEnumValidatedNotDefaultProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(_.Child2ArrayOfCustomEnumValidatedNotDefaultProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomFlagsEnumProperty should deep clone object and replace Child2ArrayOfCustomFlagsEnumProperty with the provided child2ArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty.IsEqualTo(_.Child2ArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomClassProperty should deep clone object and replace Child2ArrayOfCustomClassProperty with the provided child2ArrayOfCustomClassProperty",
                    WithPropertyName = "Child2ArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomClassProperty.IsEqualTo(_.Child2ArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomBaseClassProperty should deep clone object and replace Child2ArrayOfCustomBaseClassProperty with the provided child2ArrayOfCustomBaseClassProperty",
                    WithPropertyName = "Child2ArrayOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomBaseClassProperty.IsEqualTo(_.Child2ArrayOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomGenericClassOfCustomClassProperty should deep clone object and replace Child2ArrayOfCustomGenericClassOfCustomClassProperty with the provided child2ArrayOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child2ArrayOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child2ArrayOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPublicSetArrayChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPublicSetArrayChild2>();

        private static readonly EquatableTestScenarios<ModelAllPublicSetArrayChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPublicSetArrayChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPublicSetArrayChild2[]
                    {
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPublicSetArrayChild2[]
                    {
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty)).ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty)).ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty)).ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty)).ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty)).ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty)).ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty)).ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty)).ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty)).ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty)).ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty)).ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty)).Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty)).Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty)).Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty)).Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty)).Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty)).Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty)).Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty)).Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty)).Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty)).Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetArrayChild2
                            {
                                ParentArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ParentArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ParentArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ParentArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ParentArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ParentArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ParentArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumValidatedNotDefaultProperty,
                                ParentArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ParentArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ParentArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomBaseClassProperty,
                                ParentArrayOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomGenericClassOfCustomClassProperty,
                                Child2ArrayOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                Child2ArrayOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                Child2ArrayOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                Child2ArrayOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                Child2ArrayOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                Child2ArrayOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                Child2ArrayOfCustomEnumValidatedNotDefaultProperty   = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumValidatedNotDefaultProperty,
                                Child2ArrayOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                Child2ArrayOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty,
                                Child2ArrayOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomBaseClassProperty,
                                Child2ArrayOfCustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomGenericClassOfCustomClassProperty)).Child2ArrayOfCustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPublicSetArrayChild1>(),
                    },
                });

        private static readonly ValidModelTestScenarios<ModelAllPublicSetArrayChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelAllPublicSetArrayChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelAllPublicSetArrayChild2>
                {
                    Name = "a dummy ModelAllPublicSetArrayChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetArrayChild2___Should_implement_IModel_of_ModelAllPublicSetArrayChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetArrayChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPublicSetArrayChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPublicSetArrayChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetArrayChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetArrayChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class CloningTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                // Act
                var actual = (ModelAllPublicSetArrayChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetArrayChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentArrayOfBoolProperty == null)
                {
                    actual.ParentArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfBoolProperty);
                }

                if (systemUnderTest.ParentArrayOfIntProperty == null)
                {
                    actual.ParentArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfIntProperty);
                }

                if (systemUnderTest.ParentArrayOfStringProperty == null)
                {
                    actual.ParentArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfStringProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfStringProperty);
                }

                if (systemUnderTest.ParentArrayOfGuidProperty == null)
                {
                    actual.ParentArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfGuidProperty);
                }

                if (systemUnderTest.ParentArrayOfDateTimeProperty == null)
                {
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomEnumProperty == null)
                {
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.ParentArrayOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomClassProperty == null)
                {
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomClassProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomBaseClassProperty == null)
                {
                    actual.ParentArrayOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentArrayOfCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ArrayOfBoolProperty == null)
                {
                    actual.Child2ArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfBoolProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfBoolProperty);
                }

                if (systemUnderTest.Child2ArrayOfIntProperty == null)
                {
                    actual.Child2ArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfIntProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfIntProperty);
                }

                if (systemUnderTest.Child2ArrayOfStringProperty == null)
                {
                    actual.Child2ArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfStringProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfStringProperty);
                }

                if (systemUnderTest.Child2ArrayOfGuidProperty == null)
                {
                    actual.Child2ArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfGuidProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfGuidProperty);
                }

                if (systemUnderTest.Child2ArrayOfDateTimeProperty == null)
                {
                    actual.Child2ArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfDateTimeProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomEnumProperty == null)
                {
                    actual.Child2ArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty == null)
                {
                    actual.Child2ArrayOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomEnumValidatedNotDefaultProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomEnumValidatedNotDefaultProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.Child2ArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomFlagsEnumProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomClassProperty == null)
                {
                    actual.Child2ArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomBaseClassProperty == null)
                {
                    actual.Child2ArrayOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomBaseClassProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child2ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2ArrayOfCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2ArrayOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentArrayOfBoolProperty", "ParentArrayOfIntProperty", "ParentArrayOfStringProperty", "ParentArrayOfGuidProperty", "ParentArrayOfDateTimeProperty", "ParentArrayOfCustomEnumProperty", "ParentArrayOfCustomEnumValidatedNotDefaultProperty", "ParentArrayOfCustomFlagsEnumProperty", "ParentArrayOfCustomClassProperty", "ParentArrayOfCustomBaseClassProperty", "ParentArrayOfCustomGenericClassOfCustomClassProperty", "Child2ArrayOfBoolProperty", "Child2ArrayOfIntProperty", "Child2ArrayOfStringProperty", "Child2ArrayOfGuidProperty", "Child2ArrayOfDateTimeProperty", "Child2ArrayOfCustomEnumProperty", "Child2ArrayOfCustomEnumValidatedNotDefaultProperty", "Child2ArrayOfCustomFlagsEnumProperty", "Child2ArrayOfCustomClassProperty", "Child2ArrayOfCustomBaseClassProperty", "Child2ArrayOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPublicSetArrayChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPublicSetArrayChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class SerializationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetArrayChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetArrayChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetArrayChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetArrayChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class EqualityTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetArrayChild2 systemUnderTest1 = null;
                ModelAllPublicSetArrayChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetArrayChild2 systemUnderTest1 = null;
                ModelAllPublicSetArrayChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetArrayParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetArrayParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetArrayParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetArrayChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class HashTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPublicSetReadOnlyCollectionChild1Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetReadOnlyCollectionChild1: ParentReadOnlyCollectionInterfaceOfBoolProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfIntProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfStringProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfGuidProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfDateTimeProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfBoolProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfIntProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfStringProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfGuidProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfDateTimeProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfCustomClassProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfBoolProperty with the provided parentReadOnlyCollectionInterfaceOfBoolProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfIntProperty with the provided parentReadOnlyCollectionInterfaceOfIntProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfStringProperty with the provided parentReadOnlyCollectionInterfaceOfStringProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfGuidProperty with the provided parentReadOnlyCollectionInterfaceOfGuidProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfDateTimeProperty with the provided parentReadOnlyCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomEnumProperty with the provided parentReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty with the provided parentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty with the provided parentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfBoolProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfBoolProperty with the provided child1ReadOnlyCollectionInterfaceOfBoolProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfIntProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfIntProperty with the provided child1ReadOnlyCollectionInterfaceOfIntProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfStringProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfStringProperty with the provided child1ReadOnlyCollectionInterfaceOfStringProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfGuidProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfGuidProperty with the provided child1ReadOnlyCollectionInterfaceOfGuidProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfDateTimeProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfDateTimeProperty with the provided child1ReadOnlyCollectionInterfaceOfDateTimeProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfCustomEnumProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty with the provided child1ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty with the provided child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfCustomClassProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfCustomClassProperty with the provided child1ReadOnlyCollectionInterfaceOfCustomClassProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty with the provided child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "DeepCloneWithChild1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty should deep clone object and replace Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty with the provided child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().ThatIs(_ => !systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetReadOnlyCollectionChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPublicSetReadOnlyCollectionChild1 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

        private static readonly EquatableTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPublicSetReadOnlyCollectionChild1>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPublicSetReadOnlyCollectionChild1>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPublicSetReadOnlyCollectionChild1[]
                    {
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPublicSetReadOnlyCollectionChild1[]
                    {
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty)).ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty)).ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty)).ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty)).ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty)).ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty)).ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)).ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)).ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty)).Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty)).Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty)).Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty)).Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty)).Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty)).Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)).Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty)).Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty)).Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetReadOnlyCollectionChild1
                            {
                                ParentReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfBoolProperty,
                                ParentReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfIntProperty,
                                ParentReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfStringProperty,
                                ParentReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfGuidProperty,
                                ParentReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfDateTimeProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfBoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfBoolProperty,
                                Child1ReadOnlyCollectionInterfaceOfIntProperty                             = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfIntProperty,
                                Child1ReadOnlyCollectionInterfaceOfStringProperty                          = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfStringProperty,
                                Child1ReadOnlyCollectionInterfaceOfGuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfGuidProperty,
                                Child1ReadOnlyCollectionInterfaceOfDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>().Whose(_ => !_.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)).Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPublicSetReadOnlyCollectionChild2>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetReadOnlyCollectionChild1___Should_implement_IModel_of_ModelAllPublicSetReadOnlyCollectionChild1___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetReadOnlyCollectionChild1);

                var expectedModelMethods = typeof(IModel<ModelAllPublicSetReadOnlyCollectionChild1>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPublicSetReadOnlyCollectionChild1>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetReadOnlyCollectionChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetReadOnlyCollectionChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                // Act
                var actual = (ModelAllPublicSetReadOnlyCollectionChild1)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfBoolProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfIntProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfGuidProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfBoolProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfBoolProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfIntProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfIntProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfStringProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfStringProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfGuidProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfGuidProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfDateTimeProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty);
                }

                if (systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentReadOnlyCollectionInterfaceOfBoolProperty", "ParentReadOnlyCollectionInterfaceOfIntProperty", "ParentReadOnlyCollectionInterfaceOfStringProperty", "ParentReadOnlyCollectionInterfaceOfGuidProperty", "ParentReadOnlyCollectionInterfaceOfDateTimeProperty", "ParentReadOnlyCollectionInterfaceOfCustomEnumProperty", "ParentReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "ParentReadOnlyCollectionInterfaceOfCustomClassProperty", "ParentReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "ParentReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "Child1ReadOnlyCollectionInterfaceOfBoolProperty", "Child1ReadOnlyCollectionInterfaceOfIntProperty", "Child1ReadOnlyCollectionInterfaceOfStringProperty", "Child1ReadOnlyCollectionInterfaceOfGuidProperty", "Child1ReadOnlyCollectionInterfaceOfDateTimeProperty", "Child1ReadOnlyCollectionInterfaceOfCustomEnumProperty", "Child1ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "Child1ReadOnlyCollectionInterfaceOfCustomClassProperty", "Child1ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "Child1ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPublicSetReadOnlyCollectionChild1)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPublicSetReadOnlyCollectionChild1).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetReadOnlyCollectionChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest1 = null;
                ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest1 = null;
                ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetReadOnlyCollectionParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetReadOnlyCollectionParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetReadOnlyCollectionParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetReadOnlyCollectionParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionChild1___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetReadOnlyCollectionChild1 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionChild1___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionChild1___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionChild1___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetReadOnlyCollectionChild1___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPublicSetNoneChild2Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPublicSetNoneChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPublicSetNoneChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetNoneChild2: ParentBoolProperty = {systemUnderTest.ParentBoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentGuidProperty = {systemUnderTest.ParentGuidProperty.ToString() ?? "<null>"}, ParentDateTimeProperty = {systemUnderTest.ParentDateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomEnumProperty = {systemUnderTest.ParentCustomEnumProperty.ToString() ?? "<null>"}, ParentCustomFlagsEnumProperty = {systemUnderTest.ParentCustomFlagsEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentCustomBaseClassProperty = {systemUnderTest.ParentCustomBaseClassProperty?.ToString() ?? "<null>"}, ParentCustomGenericClassOfCustomClassProperty = {systemUnderTest.ParentCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}, Child2BoolProperty = {systemUnderTest.Child2BoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2IntProperty = {systemUnderTest.Child2IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2StringProperty = {systemUnderTest.Child2StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2GuidProperty = {systemUnderTest.Child2GuidProperty.ToString() ?? "<null>"}, Child2DateTimeProperty = {systemUnderTest.Child2DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2CustomEnumProperty = {systemUnderTest.Child2CustomEnumProperty.ToString() ?? "<null>"}, Child2CustomFlagsEnumProperty = {systemUnderTest.Child2CustomFlagsEnumProperty.ToString() ?? "<null>"}, Child2CustomClassProperty = {systemUnderTest.Child2CustomClassProperty?.ToString() ?? "<null>"}, Child2CustomBaseClassProperty = {systemUnderTest.Child2CustomBaseClassProperty?.ToString() ?? "<null>"}, Child2CustomGenericClassOfCustomClassProperty = {systemUnderTest.Child2CustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPublicSetNoneChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPublicSetNoneChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentBoolProperty.IsEqualTo(_.ParentBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentGuidProperty should deep clone object and replace ParentGuidProperty with the provided parentGuidProperty",
                    WithPropertyName = "ParentGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentGuidProperty.IsEqualTo(_.ParentGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentDateTimeProperty should deep clone object and replace ParentDateTimeProperty with the provided parentDateTimeProperty",
                    WithPropertyName = "ParentDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentDateTimeProperty.IsEqualTo(_.ParentDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomEnumProperty should deep clone object and replace ParentCustomEnumProperty with the provided parentCustomEnumProperty",
                    WithPropertyName = "ParentCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomEnumProperty.IsEqualTo(_.ParentCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomFlagsEnumProperty should deep clone object and replace ParentCustomFlagsEnumProperty with the provided parentCustomFlagsEnumProperty",
                    WithPropertyName = "ParentCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomFlagsEnumProperty.IsEqualTo(_.ParentCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomBaseClassProperty should deep clone object and replace ParentCustomBaseClassProperty with the provided parentCustomBaseClassProperty",
                    WithPropertyName = "ParentCustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomBaseClassProperty.IsEqualTo(_.ParentCustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithParentCustomGenericClassOfCustomClassProperty should deep clone object and replace ParentCustomGenericClassOfCustomClassProperty with the provided parentCustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "ParentCustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.ParentCustomGenericClassOfCustomClassProperty.IsEqualTo(_.ParentCustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2BoolProperty should deep clone object and replace Child2BoolProperty with the provided child2BoolProperty",
                    WithPropertyName = "Child2BoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2BoolProperty.IsEqualTo(_.Child2BoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2BoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2IntProperty should deep clone object and replace Child2IntProperty with the provided child2IntProperty",
                    WithPropertyName = "Child2IntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2IntProperty.IsEqualTo(_.Child2IntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2IntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2StringProperty should deep clone object and replace Child2StringProperty with the provided child2StringProperty",
                    WithPropertyName = "Child2StringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2StringProperty.IsEqualTo(_.Child2StringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2StringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2GuidProperty should deep clone object and replace Child2GuidProperty with the provided child2GuidProperty",
                    WithPropertyName = "Child2GuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2GuidProperty.IsEqualTo(_.Child2GuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2GuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2DateTimeProperty should deep clone object and replace Child2DateTimeProperty with the provided child2DateTimeProperty",
                    WithPropertyName = "Child2DateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2DateTimeProperty.IsEqualTo(_.Child2DateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2DateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomEnumProperty should deep clone object and replace Child2CustomEnumProperty with the provided child2CustomEnumProperty",
                    WithPropertyName = "Child2CustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomEnumProperty.IsEqualTo(_.Child2CustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomFlagsEnumProperty should deep clone object and replace Child2CustomFlagsEnumProperty with the provided child2CustomFlagsEnumProperty",
                    WithPropertyName = "Child2CustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomFlagsEnumProperty.IsEqualTo(_.Child2CustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomClassProperty should deep clone object and replace Child2CustomClassProperty with the provided child2CustomClassProperty",
                    WithPropertyName = "Child2CustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomClassProperty.IsEqualTo(_.Child2CustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomBaseClassProperty should deep clone object and replace Child2CustomBaseClassProperty with the provided child2CustomBaseClassProperty",
                    WithPropertyName = "Child2CustomBaseClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomBaseClassProperty.IsEqualTo(_.Child2CustomBaseClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomBaseClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "DeepCloneWithChild2CustomGenericClassOfCustomClassProperty should deep clone object and replace Child2CustomGenericClassOfCustomClassProperty with the provided child2CustomGenericClassOfCustomClassProperty",
                    WithPropertyName = "Child2CustomGenericClassOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild2>().ThatIs(_ => !systemUnderTest.Child2CustomGenericClassOfCustomClassProperty.IsEqualTo(_.Child2CustomGenericClassOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2CustomGenericClassOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPublicSetNoneChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPublicSetNoneChild2>();

        private static readonly EquatableTestScenarios<ModelAllPublicSetNoneChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPublicSetNoneChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPublicSetNoneChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPublicSetNoneChild2[]
                    {
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPublicSetNoneChild2[]
                    {
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentBoolProperty)).ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGuidProperty)).ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty)).ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty)).ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty)).ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentCustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty)).ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.ParentCustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty)).ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2BoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2BoolProperty)).Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2IntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2IntProperty)).Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2StringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2StringProperty)).Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2GuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2GuidProperty)).Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2DateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty)).Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2CustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty)).Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2CustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty)).Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2CustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty)).Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2CustomBaseClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty)).Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild2
                            {
                                ParentBoolProperty                            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty                             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty                          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty                            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentCustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentCustomBaseClassProperty,
                                ParentCustomGenericClassOfCustomClassProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassOfCustomClassProperty,
                                Child2BoolProperty                            = ReferenceObjectForEquatableTestScenarios.Child2BoolProperty,
                                Child2IntProperty                             = ReferenceObjectForEquatableTestScenarios.Child2IntProperty,
                                Child2StringProperty                          = ReferenceObjectForEquatableTestScenarios.Child2StringProperty,
                                Child2GuidProperty                            = ReferenceObjectForEquatableTestScenarios.Child2GuidProperty,
                                Child2DateTimeProperty                        = ReferenceObjectForEquatableTestScenarios.Child2DateTimeProperty,
                                Child2CustomEnumProperty                      = ReferenceObjectForEquatableTestScenarios.Child2CustomEnumProperty,
                                Child2CustomFlagsEnumProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomFlagsEnumProperty,
                                Child2CustomClassProperty                     = ReferenceObjectForEquatableTestScenarios.Child2CustomClassProperty,
                                Child2CustomBaseClassProperty                 = ReferenceObjectForEquatableTestScenarios.Child2CustomBaseClassProperty,
                                Child2CustomGenericClassOfCustomClassProperty = A.Dummy<ModelAllPublicSetNoneChild2>().Whose(_ => !_.Child2CustomGenericClassOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2CustomGenericClassOfCustomClassProperty)).Child2CustomGenericClassOfCustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPublicSetNoneChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetNoneChild2___Should_implement_IModel_of_ModelAllPublicSetNoneChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetNoneChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPublicSetNoneChild2>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPublicSetNoneChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetNoneChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetNoneChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                // Act
                var actual = (ModelAllPublicSetNoneChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentCustomBaseClassProperty == null)
                {
                    actual.ParentCustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentCustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentCustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomBaseClassProperty);
                }

                if (systemUnderTest.ParentCustomGenericClassOfCustomClassProperty == null)
                {
                    actual.ParentCustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentCustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentCustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomGenericClassOfCustomClassProperty);
                }

                if (systemUnderTest.Child2CustomClassProperty == null)
                {
                    actual.Child2CustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2CustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2CustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomClassProperty);
                }

                if (systemUnderTest.Child2CustomBaseClassProperty == null)
                {
                    actual.Child2CustomBaseClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2CustomBaseClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2CustomBaseClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomBaseClassProperty);
                }

                if (systemUnderTest.Child2CustomGenericClassOfCustomClassProperty == null)
                {
                    actual.Child2CustomGenericClassOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.Child2CustomGenericClassOfCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.Child2CustomGenericClassOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2CustomGenericClassOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentBoolProperty", "ParentIntProperty", "ParentStringProperty", "ParentGuidProperty", "ParentDateTimeProperty", "ParentCustomEnumProperty", "ParentCustomFlagsEnumProperty", "ParentCustomClassProperty", "ParentCustomBaseClassProperty", "ParentCustomGenericClassOfCustomClassProperty", "Child2BoolProperty", "Child2IntProperty", "Child2StringProperty", "Child2GuidProperty", "Child2DateTimeProperty", "Child2CustomEnumProperty", "Child2CustomFlagsEnumProperty", "Child2CustomClassProperty", "Child2CustomBaseClassProperty", "Child2CustomGenericClassOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPublicSetNoneChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelAllPublicSetNoneChild2).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild2>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetNoneChild2 systemUnderTest1 = null;
                ModelAllPublicSetNoneChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetNoneChild2 systemUnderTest1 = null;
                ModelAllPublicSetNoneChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
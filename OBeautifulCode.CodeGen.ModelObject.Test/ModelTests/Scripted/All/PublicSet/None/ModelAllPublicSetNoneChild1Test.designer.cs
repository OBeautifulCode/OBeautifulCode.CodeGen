// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPublicSetNoneChild1Test
    {
        private static readonly StringRepresentationTestScenarios<ModelAllPublicSetNoneChild1> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPublicSetNoneChild1>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetNoneChild1: ParentBoolProperty = {systemUnderTest.ParentBoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentGuidProperty = {systemUnderTest.ParentGuidProperty.ToString() ?? "<null>"}, ParentDateTimeProperty = {systemUnderTest.ParentDateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomEnumProperty = {systemUnderTest.ParentCustomEnumProperty.ToString() ?? "<null>"}, ParentCustomFlagsEnumProperty = {systemUnderTest.ParentCustomFlagsEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, Child1BoolProperty = {systemUnderTest.Child1BoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1IntProperty = {systemUnderTest.Child1IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1StringProperty = {systemUnderTest.Child1StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1GuidProperty = {systemUnderTest.Child1GuidProperty.ToString() ?? "<null>"}, Child1DateTimeProperty = {systemUnderTest.Child1DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1CustomEnumProperty = {systemUnderTest.Child1CustomEnumProperty.ToString() ?? "<null>"}, Child1CustomFlagsEnumProperty = {systemUnderTest.Child1CustomFlagsEnumProperty.ToString() ?? "<null>"}, Child1CustomClassProperty = {systemUnderTest.Child1CustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPublicSetNoneChild1> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPublicSetNoneChild1>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentBoolProperty should deep clone object and replace ParentBoolProperty with the provided parentBoolProperty",
                    WithPropertyName = "ParentBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentBoolProperty.IsEqualTo(_.ParentBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentGuidProperty should deep clone object and replace ParentGuidProperty with the provided parentGuidProperty",
                    WithPropertyName = "ParentGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentGuidProperty.IsEqualTo(_.ParentGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentDateTimeProperty should deep clone object and replace ParentDateTimeProperty with the provided parentDateTimeProperty",
                    WithPropertyName = "ParentDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentDateTimeProperty.IsEqualTo(_.ParentDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentCustomEnumProperty should deep clone object and replace ParentCustomEnumProperty with the provided parentCustomEnumProperty",
                    WithPropertyName = "ParentCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentCustomEnumProperty.IsEqualTo(_.ParentCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentCustomFlagsEnumProperty should deep clone object and replace ParentCustomFlagsEnumProperty with the provided parentCustomFlagsEnumProperty",
                    WithPropertyName = "ParentCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentCustomFlagsEnumProperty.IsEqualTo(_.ParentCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1BoolProperty should deep clone object and replace Child1BoolProperty with the provided child1BoolProperty",
                    WithPropertyName = "Child1BoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1BoolProperty.IsEqualTo(_.Child1BoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1BoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1IntProperty should deep clone object and replace Child1IntProperty with the provided child1IntProperty",
                    WithPropertyName = "Child1IntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1IntProperty.IsEqualTo(_.Child1IntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1IntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1StringProperty should deep clone object and replace Child1StringProperty with the provided child1StringProperty",
                    WithPropertyName = "Child1StringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1StringProperty.IsEqualTo(_.Child1StringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1StringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1GuidProperty should deep clone object and replace Child1GuidProperty with the provided child1GuidProperty",
                    WithPropertyName = "Child1GuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1GuidProperty.IsEqualTo(_.Child1GuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1GuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1DateTimeProperty should deep clone object and replace Child1DateTimeProperty with the provided child1DateTimeProperty",
                    WithPropertyName = "Child1DateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1DateTimeProperty.IsEqualTo(_.Child1DateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1DateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1CustomEnumProperty should deep clone object and replace Child1CustomEnumProperty with the provided child1CustomEnumProperty",
                    WithPropertyName = "Child1CustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1CustomEnumProperty.IsEqualTo(_.Child1CustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1CustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1CustomFlagsEnumProperty should deep clone object and replace Child1CustomFlagsEnumProperty with the provided child1CustomFlagsEnumProperty",
                    WithPropertyName = "Child1CustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1CustomFlagsEnumProperty.IsEqualTo(_.Child1CustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1CustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "DeepCloneWithChild1CustomClassProperty should deep clone object and replace Child1CustomClassProperty with the provided child1CustomClassProperty",
                    WithPropertyName = "Child1CustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                        var referenceObject = A.Dummy<ModelAllPublicSetNoneChild1>().ThatIs(_ => !systemUnderTest.Child1CustomClassProperty.IsEqualTo(_.Child1CustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPublicSetNoneChild1>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child1CustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPublicSetNoneChild1 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPublicSetNoneChild1>();

        private static readonly EquatableTestScenarios<ModelAllPublicSetNoneChild1> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPublicSetNoneChild1>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPublicSetNoneChild1>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPublicSetNoneChild1[]
                    {
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPublicSetNoneChild1[]
                    {
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentBoolProperty)).ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGuidProperty)).ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty)).ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty)).ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty)).ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1BoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1BoolProperty)).Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1IntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1IntProperty)).Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1StringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1StringProperty)).Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1GuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1GuidProperty)).Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1DateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty)).Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1CustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty)).Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1CustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty)).Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty,
                            },
                        new ModelAllPublicSetNoneChild1
                            {
                                ParentBoolProperty            = ReferenceObjectForEquatableTestScenarios.ParentBoolProperty,
                                ParentIntProperty             = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentStringProperty          = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentGuidProperty            = ReferenceObjectForEquatableTestScenarios.ParentGuidProperty,
                                ParentDateTimeProperty        = ReferenceObjectForEquatableTestScenarios.ParentDateTimeProperty,
                                ParentCustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.ParentCustomEnumProperty,
                                ParentCustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.ParentCustomFlagsEnumProperty,
                                ParentCustomClassProperty     = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                Child1BoolProperty            = ReferenceObjectForEquatableTestScenarios.Child1BoolProperty,
                                Child1IntProperty             = ReferenceObjectForEquatableTestScenarios.Child1IntProperty,
                                Child1StringProperty          = ReferenceObjectForEquatableTestScenarios.Child1StringProperty,
                                Child1GuidProperty            = ReferenceObjectForEquatableTestScenarios.Child1GuidProperty,
                                Child1DateTimeProperty        = ReferenceObjectForEquatableTestScenarios.Child1DateTimeProperty,
                                Child1CustomEnumProperty      = ReferenceObjectForEquatableTestScenarios.Child1CustomEnumProperty,
                                Child1CustomFlagsEnumProperty = ReferenceObjectForEquatableTestScenarios.Child1CustomFlagsEnumProperty,
                                Child1CustomClassProperty     = A.Dummy<ModelAllPublicSetNoneChild1>().Whose(_ => !_.Child1CustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child1CustomClassProperty)).Child1CustomClassProperty,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPublicSetNoneChild2>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetNoneChild1___Should_implement_IModel_of_ModelAllPublicSetNoneChild1___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetNoneChild1);

                var expectedModelMethods = typeof(IModel<ModelAllPublicSetNoneChild1>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPublicSetNoneChild1>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPublicSetNoneChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPublicSetNoneChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                // Act
                var actual = (ModelAllPublicSetNoneChild1)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPublicSetNoneChild1>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.Child1CustomClassProperty == null)
                {
                    actual.Child1CustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child1CustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child1CustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentBoolProperty", "ParentIntProperty", "ParentStringProperty", "ParentGuidProperty", "ParentDateTimeProperty", "ParentCustomEnumProperty", "ParentCustomFlagsEnumProperty", "ParentCustomClassProperty", "Child1BoolProperty", "Child1IntProperty", "Child1StringProperty", "Child1GuidProperty", "Child1DateTimeProperty", "Child1CustomEnumProperty", "Child1CustomFlagsEnumProperty", "Child1CustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPublicSetNoneChild1)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelAllPublicSetNoneChild1).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPublicSetNoneChild1>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetNoneChild1 systemUnderTest1 = null;
                ModelAllPublicSetNoneChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPublicSetNoneChild1 systemUnderTest1 = null;
                ModelAllPublicSetNoneChild1 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild1 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPublicSetNoneParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild1___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPublicSetNoneChild1 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild1___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild1___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild1___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPublicSetNoneChild1___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetReadOnlyCollectionTest
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetReadOnlyCollection> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetReadOnlyCollection>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetReadOnlyCollection>
                {
                    Name = "a dummy ModelValidationPublicSetReadOnlyCollection should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyCollection> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyCollection>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfBoolProperty = new List<bool>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfIntProperty = new List<int>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfGuidProperty = new List<Guid>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfDateTimeProperty = new List<DateTime>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumProperty = new List<CustomEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty = new List<CustomEnumValidatedNotDefault>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = new List<CustomFlagsEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty = new List<CustomClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty = new CustomClass[0].Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = new List<CustomBaseClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = new CustomBaseClass[0].Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomBaseClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = new List<CustomGenericClass<CustomClass>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyCollection>();

                    systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0].Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(systemUnderTest.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyCollection>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyCollection___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyCollection);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyCollection___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyCollection);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2Test
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                {
                    Name = "a dummy ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty = new Dictionary<bool?, bool?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableBoolProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableIntProperty = new Dictionary<int?, int?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableIntProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableIntProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty = new Dictionary<Guid?, Guid?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableGuidProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = new Dictionary<CustomEnum?, CustomEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = new Dictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = new Dictionary<CustomFlagsEnum?, CustomFlagsEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty = new Dictionary<bool?, bool?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty = new Dictionary<int?, int?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty = new Dictionary<Guid?, Guid?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty = new Dictionary<CustomEnum?, CustomEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = new Dictionary<CustomEnumValidatedNotDefault?, CustomEnumValidatedNotDefault?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty = new Dictionary<CustomFlagsEnum?, CustomFlagsEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyDictionaryInterfaceOfNullableCustomFlagsEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyDictionaryOfNullableChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
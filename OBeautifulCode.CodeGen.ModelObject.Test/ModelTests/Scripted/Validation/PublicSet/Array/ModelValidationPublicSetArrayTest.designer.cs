// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetArrayTest
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetArray> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetArray>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetArray>
                {
                    Name = "a dummy ModelValidationPublicSetArray should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetArray>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetArray> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetArray>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfBoolProperty = new bool[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfIntProperty = new int[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfStringProperty = new string[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfStringProperty = new string[0].Concat(systemUnderTest.ArrayOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfStringProperty = new string[0].Concat(systemUnderTest.ArrayOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfGuidProperty = new Guid[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfDateTimeProperty = new DateTime[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomEnumProperty = new CustomEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomEnumValidatedNotDefaultProperty = new CustomEnumValidatedNotDefault[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomFlagsEnumProperty = new CustomFlagsEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomClassProperty = new CustomClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomClassProperty = new CustomClass[0].Concat(systemUnderTest.ArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(systemUnderTest.ArrayOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomBaseClassProperty = new CustomBaseClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomBaseClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomBaseClassProperty = new CustomBaseClass[0].Concat(systemUnderTest.ArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(systemUnderTest.ArrayOfCustomBaseClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomBaseClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomBaseClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArray>();

                    systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0].Concat(systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(systemUnderTest.ArrayOfCustomGenericClassOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArray>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ArrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ArrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetArray___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetArray);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetArray___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetArray);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message?.Contains(_) ?? false))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(scenarios.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
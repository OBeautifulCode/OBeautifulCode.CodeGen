// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetArrayChild2Test
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetArrayChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetArrayChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetArrayChild2>
                {
                    Name = "a dummy ModelValidationPublicSetArrayChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetArrayChild2> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetArrayChild2>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfBoolProperty = new bool[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfIntProperty = new int[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfStringProperty = new string[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfStringProperty = new string[0].Concat(systemUnderTest.ParentArrayOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ParentArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfStringProperty = new string[0].Concat(systemUnderTest.ParentArrayOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ParentArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfGuidProperty = new Guid[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfDateTimeProperty = new DateTime[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomEnumProperty = new CustomEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomEnumValidatedNotDefaultProperty = new CustomEnumValidatedNotDefault[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomFlagsEnumProperty = new CustomFlagsEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomClassProperty = new CustomClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomClassProperty = new CustomClass[0].Concat(systemUnderTest.ParentArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(systemUnderTest.ParentArrayOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomBaseClassProperty = new CustomBaseClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomBaseClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomBaseClassProperty = new CustomBaseClass[0].Concat(systemUnderTest.ParentArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(systemUnderTest.ParentArrayOfCustomBaseClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomBaseClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomBaseClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0].Concat(systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(systemUnderTest.ParentArrayOfCustomGenericClassOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentArrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentArrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfBoolProperty = new bool[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfIntProperty = new int[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfStringProperty = new string[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfStringProperty = new string[0].Concat(systemUnderTest.Child2ArrayOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.Child2ArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfStringProperty = new string[0].Concat(systemUnderTest.Child2ArrayOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.Child2ArrayOfStringProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfGuidProperty = new Guid[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfDateTimeProperty = new DateTime[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomEnumProperty = new CustomEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomEnumValidatedNotDefaultProperty = new CustomEnumValidatedNotDefault[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty = new CustomFlagsEnum[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomClassProperty = new CustomClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomClassProperty = new CustomClass[0].Concat(systemUnderTest.Child2ArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(systemUnderTest.Child2ArrayOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomBaseClassProperty = new CustomBaseClass[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomBaseClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomBaseClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomBaseClassProperty = new CustomBaseClass[0].Concat(systemUnderTest.Child2ArrayOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(systemUnderTest.Child2ArrayOfCustomBaseClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomBaseClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomBaseClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0];

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetArrayChild2>();

                    systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0].Concat(systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(systemUnderTest.Child2ArrayOfCustomGenericClassOfCustomClassProperty).ToArray();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetArrayChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ArrayOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ArrayOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetArrayChild2___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetArrayChild2);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetArrayChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetArrayChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
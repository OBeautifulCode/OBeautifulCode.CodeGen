// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetReadOnlyListTest
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetReadOnlyList> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetReadOnlyList>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetReadOnlyList>
                {
                    Name = "a dummy ModelValidationPublicSetReadOnlyList should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyList> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyList>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfBoolProperty = new List<bool>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfIntProperty = new List<int>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ReadOnlyListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ReadOnlyListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ReadOnlyListInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ReadOnlyListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfGuidProperty = new List<Guid>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfDateTimeProperty = new List<DateTime>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomEnumProperty = new List<CustomEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty = new List<CustomEnumValidatedNotDefault>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomFlagsEnumProperty = new List<CustomFlagsEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomClassProperty = new List<CustomClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomClassProperty = new CustomClass[0].Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomBaseClassProperty = new List<CustomBaseClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomBaseClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomBaseClassProperty = new CustomBaseClass[0].Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomBaseClassProperty).Concat(new CustomBaseClass[] { null }).Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomBaseClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomBaseClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomBaseClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = new List<CustomGenericClass<CustomClass>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyList>();

                    systemUnderTest.ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty = new CustomGenericClass<CustomClass>[0].Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).Concat(new CustomGenericClass<CustomClass>[] { null }).Concat(systemUnderTest.ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyList>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ReadOnlyListInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyList___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyList);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyList___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyList);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
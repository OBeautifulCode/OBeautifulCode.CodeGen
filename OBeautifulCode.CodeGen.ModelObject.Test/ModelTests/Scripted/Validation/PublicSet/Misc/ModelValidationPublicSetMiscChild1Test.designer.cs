// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetMiscChild1Test
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetMiscChild1> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetMiscChild1>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetMiscChild1>
                {
                    Name = "a dummy ModelValidationPublicSetMiscChild1 should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetMiscChild1> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetMiscChild1>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ParentCollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ParentCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ParentCollectionInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ParentCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ParentListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.ParentListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.ParentListInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.ParentListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = new List<ICollection<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = new ICollection<string>[0].Concat(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(systemUnderTest.ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = new List<IReadOnlyList<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = new IReadOnlyList<string>[0].Concat(systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).Concat(new IReadOnlyList<string>[] { null }).Concat(systemUnderTest.ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty = new List<ICollection<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty = new ICollection<string>[0].Concat(systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(systemUnderTest.ParentListInterfaceOfCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentListInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentListInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty = new List<IList<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty = new IList<string>[0].Concat(systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty).Concat(new IList<string>[] { null }).Concat(systemUnderTest.ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new Dictionary<string, IReadOnlyList<DateTime>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = new Dictionary<string, ICollection<DateTime>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new List<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[0].Concat(systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).Concat(new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[] { null }).Concat(systemUnderTest.ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new Dictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.Child1CollectionInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.Child1CollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.Child1CollectionInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.Child1CollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfStringProperty = new List<string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.Child1ListInterfaceOfStringProperty).Concat(new string[] { null }).Concat(systemUnderTest.Child1ListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfStringProperty = new string[0].Concat(systemUnderTest.Child1ListInterfaceOfStringProperty).Concat(new string[] { "  \r\n  " }).Concat(systemUnderTest.Child1ListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfStringProperty' contain a white space element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfStringProperty", "contains an element that is white space", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = new List<ICollection<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = new ICollection<string>[0].Concat(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(systemUnderTest.Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = new List<IReadOnlyList<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = new IReadOnlyList<string>[0].Concat(systemUnderTest.Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).Concat(new IReadOnlyList<string>[] { null }).Concat(systemUnderTest.Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfCollectionInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfCollectionInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfCollectionInterfaceOfStringProperty = new List<ICollection<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfCollectionInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ListInterfaceOfCollectionInterfaceOfStringProperty = new ICollection<string>[0].Concat(systemUnderTest.Child1ListInterfaceOfCollectionInterfaceOfStringProperty).Concat(new ICollection<string>[] { null }).Concat(systemUnderTest.Child1ListInterfaceOfCollectionInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ListInterfaceOfCollectionInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ListInterfaceOfCollectionInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty = new List<IList<string>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty = new IList<string>[0].Concat(systemUnderTest.Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty).Concat(new IList<string>[] { null }).Concat(systemUnderTest.Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfListInterfaceOfStringProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new Dictionary<string, IReadOnlyList<DateTime>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = new Dictionary<string, ICollection<DateTime>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new List<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[0].Concat(systemUnderTest.Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).Concat(new IReadOnlyDictionary<string, IReadOnlyList<DateTime>>[] { null }).Concat(systemUnderTest.Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty).ToList();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a null element scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one null element", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = new Dictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetMiscChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetMiscChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetMiscChild1___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetMiscChild1);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetMiscChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetMiscChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
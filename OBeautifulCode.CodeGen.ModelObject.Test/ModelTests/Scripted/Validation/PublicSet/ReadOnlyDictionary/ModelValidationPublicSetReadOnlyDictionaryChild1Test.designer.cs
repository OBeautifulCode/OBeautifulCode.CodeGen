// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetReadOnlyDictionaryChild1Test
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetReadOnlyDictionaryChild1> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetReadOnlyDictionaryChild1>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                {
                    Name = "a dummy ModelValidationPublicSetReadOnlyDictionaryChild1 should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyDictionaryChild1> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyDictionaryChild1>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfBoolProperty = new Dictionary<bool, bool>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfBoolProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfBoolProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfIntProperty = new Dictionary<int, int>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfIntProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfIntProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty = new Dictionary<string, string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfStringProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfStringProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfStringProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfStringProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfGuidProperty = new Dictionary<Guid, Guid>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfGuidProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfGuidProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty = new Dictionary<CustomEnum, CustomEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = new Dictionary<CustomFlagsEnum, CustomFlagsEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty = new Dictionary<CustomClass, CustomClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = new Dictionary<CustomBaseClass, CustomBaseClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = new Dictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfBoolProperty = new Dictionary<bool, bool>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfBoolProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfBoolProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfIntProperty = new Dictionary<int, int>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfIntProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfIntProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfStringProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfStringProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfStringProperty = new Dictionary<string, string>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfStringProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfStringProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfStringProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfStringProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfStringProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfGuidProperty = new Dictionary<Guid, Guid>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfGuidProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfGuidProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty = new Dictionary<CustomEnum, CustomEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty = new Dictionary<CustomFlagsEnum, CustomFlagsEnum>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomFlagsEnumProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty = new Dictionary<CustomClass, CustomClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = new Dictionary<CustomBaseClass, CustomBaseClass>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomBaseClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = new Dictionary<CustomGenericClass<CustomClass>, CustomGenericClass<CustomClass>>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' is an empty dictionary scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "is an empty dictionary", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyDictionaryChild1>();

                    var dictionaryWithNullValue = systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty.ToDictionary(_ => _.Key, _ => _.Value);
                    var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));
                    dictionaryWithNullValue[randomKey] = null;

                    systemUnderTest.Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty = dictionaryWithNullValue;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyDictionaryChild1>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty' contains a key-value pair with a null value",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty" },
                        ExpectedFailureMessageContains = new[] { "Child1ReadOnlyDictionaryInterfaceOfCustomGenericClassOfCustomClassProperty", "contains at least one key-value pair with a null value", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyDictionaryChild1___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyDictionaryChild1);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyDictionaryChild1___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyDictionaryChild1);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message?.Contains(_) ?? false))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(scenarios.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelValidationPublicSetReadOnlyListOfNullableChild2Test
    {
        private static readonly ValidModelTestScenarios<ModelValidationPublicSetReadOnlyListOfNullableChild2> ValidModelTestScenarios = new ValidModelTestScenarios<ModelValidationPublicSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                {
                    Name = "a dummy ModelValidationPublicSetReadOnlyListOfNullableChild2 should be valid",
                    SystemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>(),
                });

        private static readonly SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyListOfNullableChild2> SelfValidationTestScenarios = new SelfValidationTestScenarios<ModelValidationPublicSetReadOnlyListOfNullableChild2>()
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableBoolProperty = new List<bool?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableIntProperty = new List<int?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableGuidProperty = new List<Guid?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableDateTimeProperty = new List<DateTime?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumProperty = new List<CustomEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = new List<CustomEnumValidatedNotDefault?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = new List<CustomFlagsEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "ParentReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableBoolProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableBoolProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableBoolProperty = new List<bool?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableBoolProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableBoolProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableBoolProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableIntProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableIntProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableIntProperty = new List<int?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableIntProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableIntProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableIntProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableGuidProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableGuidProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableGuidProperty = new List<Guid?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableGuidProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableGuidProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableGuidProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableDateTimeProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableDateTimeProperty = new List<DateTime?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableDateTimeProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableDateTimeProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty = new List<CustomEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty = new List<CustomEnumValidatedNotDefault?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomEnumValidatedNotDefaultProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = null;

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is null scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "null", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                })
            .AddScenario(() =>
                {
                    var systemUnderTest = A.Dummy<ModelValidationPublicSetReadOnlyListOfNullableChild2>();

                    systemUnderTest.Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty = new List<CustomFlagsEnum?>();

                    var result = new SelfValidationTestScenario<ModelValidationPublicSetReadOnlyListOfNullableChild2>
                    {
                        Name = "GetSelfValidationFailures() should return a failure when property 'Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty' is an empty enumerable scenario",
                        SystemUnderTest = systemUnderTest,
                        ExpectedFailurePropertyNames = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty" },
                        ExpectedFailureMessageContains = new[] { "Child2ReadOnlyListInterfaceOfNullableCustomFlagsEnumProperty", "is an empty enumerable", },
                        ScenarioPassesWhen = SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation,
                    };

                    return result;
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyListOfNullableChild2___Should_implement_IValidatable___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyListOfNullableChild2);

                var expectedModelMethods = typeof(IValidatable).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IValidatable));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelValidationPublicSetReadOnlyListOfNullableChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelValidationPublicSetReadOnlyListOfNullableChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Validation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetSelfValidationFailures___Should_return_failures___When_properties_are_invalid()
            {
                var scenarios = SelfValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetSelfValidationFailures();

                    // Assert
                    var actualFailures = (actual ?? new SelfValidationFailure[0])
                        .Where(_ => _ != null)
                        .ToList();

                    actualFailures.AsTest().Must().NotBeEmptyEnumerable(because: scenario.Id);

                    var countOfActualFailuresThatMeetScenarioExpectedFailure = 0;
                    foreach (var actualFailure in actualFailures)
                    {
                        if (actualFailure.PropertyNames.IsUnorderedEqualTo(scenario.ExpectedFailurePropertyNames) &&
                            ((scenario.ExpectedFailureMessageEquals == null) || (actualFailure.Message == scenario.ExpectedFailureMessageEquals)) &&
                            (scenario.ExpectedFailureMessageContains ?? new string[0]).All(_ => actualFailure.Message.Contains(_)))
                        {
                            countOfActualFailuresThatMeetScenarioExpectedFailure++;
                        }
                    }

                    if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AtLeastOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeGreaterThan(0, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.OnlyOneFailureMeetsExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                    }
                    else if (scenario.ScenarioPassesWhen == SelfValidationTestScenarioPassesWhen.AllFailuresMeetExpectation)
                    {
                        new { countOfActualFailuresThatMeetScenarioExpectedFailure }.AsTest().Must().BeEqualTo(actualFailures.Count, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException(Invariant($"This {nameof(SelfValidationTestScenarioPassesWhen)} is not supported: {scenario.ScenarioPassesWhen}."));
                    }
                }
            }
        }
    }
}
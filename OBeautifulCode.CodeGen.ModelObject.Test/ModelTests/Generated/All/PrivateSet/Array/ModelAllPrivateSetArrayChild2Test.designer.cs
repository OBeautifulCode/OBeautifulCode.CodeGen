// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Bson;
    using global::OBeautifulCode.Serialization.Json;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelAllPrivateSetArrayChild2Test
    {
        private static readonly ISerializeAndDeserialize BsonSerializer = new ObcBsonSerializer(SerializationConfigurationTypes.BsonConfigurationType);

        private static readonly ISerializeAndDeserialize JsonSerializer = new ObcJsonSerializer(SerializationConfigurationTypes.JsonConfigurationType);

        private static readonly StringRepresentationTestScenarios<ModelAllPrivateSetArrayChild2> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelAllPrivateSetArrayChild2>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetArrayChild2: ParentArrayOfBoolProperty = {systemUnderTest.ParentArrayOfBoolProperty?.ToString() ?? "<null>"}, ParentArrayOfIntProperty = {systemUnderTest.ParentArrayOfIntProperty?.ToString() ?? "<null>"}, ParentArrayOfStringProperty = {systemUnderTest.ParentArrayOfStringProperty?.ToString() ?? "<null>"}, ParentArrayOfGuidProperty = {systemUnderTest.ParentArrayOfGuidProperty?.ToString() ?? "<null>"}, ParentArrayOfDateTimeProperty = {systemUnderTest.ParentArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomEnumProperty = {systemUnderTest.ParentArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomFlagsEnumProperty = {systemUnderTest.ParentArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ParentArrayOfCustomClassProperty = {systemUnderTest.ParentArrayOfCustomClassProperty?.ToString() ?? "<null>"}, Child2ArrayOfBoolProperty = {systemUnderTest.Child2ArrayOfBoolProperty?.ToString() ?? "<null>"}, Child2ArrayOfIntProperty = {systemUnderTest.Child2ArrayOfIntProperty?.ToString() ?? "<null>"}, Child2ArrayOfStringProperty = {systemUnderTest.Child2ArrayOfStringProperty?.ToString() ?? "<null>"}, Child2ArrayOfGuidProperty = {systemUnderTest.Child2ArrayOfGuidProperty?.ToString() ?? "<null>"}, Child2ArrayOfDateTimeProperty = {systemUnderTest.Child2ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomEnumProperty = {systemUnderTest.Child2ArrayOfCustomEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomFlagsEnumProperty = {systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, Child2ArrayOfCustomClassProperty = {systemUnderTest.Child2ArrayOfCustomClassProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayChild2> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelAllPrivateSetArrayChild2>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             null,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             new bool[0],
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             null,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             new int[0],
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             null,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             new string[0],
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             new string[0].Concat(referenceObject.ParentArrayOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.ParentArrayOfStringProperty).ToArray(),
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             null,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             new Guid[0],
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             new DateTime[0],
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             new CustomEnum[0],
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             null,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             new CustomFlagsEnum[0],
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentArrayOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             null,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0],
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentArrayOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.ParentArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.ParentArrayOfCustomClassProperty).ToArray(),
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentArrayOfCustomClassProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfBoolProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             null,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfBoolProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfBoolProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             new bool[0],
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfBoolProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfIntProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             null,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfIntProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfIntProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             new int[0],
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfIntProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             null,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfStringProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfStringProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             new string[0],
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfStringProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfStringProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             new string[0].Concat(referenceObject.Child2ArrayOfStringProperty).Concat(new string[] { null }).Concat(referenceObject.Child2ArrayOfStringProperty).ToArray(),
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfStringProperty", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfGuidProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             null,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfGuidProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfGuidProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             new Guid[0],
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfGuidProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfDateTimeProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             null,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfDateTimeProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfDateTimeProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             new DateTime[0],
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfDateTimeProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfCustomEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             null,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfCustomEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             new CustomEnum[0],
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfCustomFlagsEnumProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             null,
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomFlagsEnumProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfCustomFlagsEnumProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             new CustomFlagsEnum[0],
                                             referenceObject.Child2ArrayOfCustomClassProperty);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomFlagsEnumProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'child2ArrayOfCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomClassProperty" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfCustomClassProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0]);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomClassProperty", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "constructor should throw ArgumentException when parameter 'child2ArrayOfCustomClassProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new ModelAllPrivateSetArrayChild2(
                                             referenceObject.ParentArrayOfBoolProperty,
                                             referenceObject.ParentArrayOfIntProperty,
                                             referenceObject.ParentArrayOfStringProperty,
                                             referenceObject.ParentArrayOfGuidProperty,
                                             referenceObject.ParentArrayOfDateTimeProperty,
                                             referenceObject.ParentArrayOfCustomEnumProperty,
                                             referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                             referenceObject.ParentArrayOfCustomClassProperty,
                                             referenceObject.Child2ArrayOfBoolProperty,
                                             referenceObject.Child2ArrayOfIntProperty,
                                             referenceObject.Child2ArrayOfStringProperty,
                                             referenceObject.Child2ArrayOfGuidProperty,
                                             referenceObject.Child2ArrayOfDateTimeProperty,
                                             referenceObject.Child2ArrayOfCustomEnumProperty,
                                             referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                             new CustomClass[0].Concat(referenceObject.Child2ArrayOfCustomClassProperty).Concat(new CustomClass[] { null }).Concat(referenceObject.Child2ArrayOfCustomClassProperty).ToArray());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "child2ArrayOfCustomClassProperty", "contains at least one null element" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayChild2> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelAllPrivateSetArrayChild2>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfBoolProperty should return same 'parentArrayOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfIntProperty should return same 'parentArrayOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfStringProperty should return same 'parentArrayOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfGuidProperty should return same 'parentArrayOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfDateTimeProperty should return same 'parentArrayOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfCustomEnumProperty should return same 'parentArrayOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfCustomFlagsEnumProperty should return same 'parentArrayOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "ParentArrayOfCustomClassProperty should return same 'parentArrayOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.ParentArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentArrayOfCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfBoolProperty should return same 'child2ArrayOfBoolProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfBoolProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfBoolProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfIntProperty should return same 'child2ArrayOfIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfStringProperty should return same 'child2ArrayOfStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfGuidProperty should return same 'child2ArrayOfGuidProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfGuidProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfGuidProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfDateTimeProperty should return same 'child2ArrayOfDateTimeProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfDateTimeProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfCustomEnumProperty should return same 'child2ArrayOfCustomEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfCustomEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfCustomFlagsEnumProperty should return same 'child2ArrayOfCustomFlagsEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfCustomFlagsEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Child2ArrayOfCustomClassProperty should return same 'child2ArrayOfCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = new ModelAllPrivateSetArrayChild2(
                                                      referenceObject.ParentArrayOfBoolProperty,
                                                      referenceObject.ParentArrayOfIntProperty,
                                                      referenceObject.ParentArrayOfStringProperty,
                                                      referenceObject.ParentArrayOfGuidProperty,
                                                      referenceObject.ParentArrayOfDateTimeProperty,
                                                      referenceObject.ParentArrayOfCustomEnumProperty,
                                                      referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.ParentArrayOfCustomClassProperty,
                                                      referenceObject.Child2ArrayOfBoolProperty,
                                                      referenceObject.Child2ArrayOfIntProperty,
                                                      referenceObject.Child2ArrayOfStringProperty,
                                                      referenceObject.Child2ArrayOfGuidProperty,
                                                      referenceObject.Child2ArrayOfDateTimeProperty,
                                                      referenceObject.Child2ArrayOfCustomEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                                                      referenceObject.Child2ArrayOfCustomClassProperty),
                            ExpectedPropertyValue = referenceObject.Child2ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "Child2ArrayOfCustomClassProperty",
                });

        private static readonly DeepCloneWithTestScenarios<ModelAllPrivateSetArrayChild2> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelAllPrivateSetArrayChild2>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfBoolProperty should deep clone object and replace ParentArrayOfBoolProperty with the provided parentArrayOfBoolProperty",
                    WithPropertyName = "ParentArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfBoolProperty.IsEqualTo(_.ParentArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfIntProperty should deep clone object and replace ParentArrayOfIntProperty with the provided parentArrayOfIntProperty",
                    WithPropertyName = "ParentArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfIntProperty.IsEqualTo(_.ParentArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfStringProperty should deep clone object and replace ParentArrayOfStringProperty with the provided parentArrayOfStringProperty",
                    WithPropertyName = "ParentArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfStringProperty.IsEqualTo(_.ParentArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfGuidProperty should deep clone object and replace ParentArrayOfGuidProperty with the provided parentArrayOfGuidProperty",
                    WithPropertyName = "ParentArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfGuidProperty.IsEqualTo(_.ParentArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfDateTimeProperty should deep clone object and replace ParentArrayOfDateTimeProperty with the provided parentArrayOfDateTimeProperty",
                    WithPropertyName = "ParentArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfDateTimeProperty.IsEqualTo(_.ParentArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomEnumProperty should deep clone object and replace ParentArrayOfCustomEnumProperty with the provided parentArrayOfCustomEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomEnumProperty.IsEqualTo(_.ParentArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomFlagsEnumProperty should deep clone object and replace ParentArrayOfCustomFlagsEnumProperty with the provided parentArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "ParentArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(_.ParentArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithParentArrayOfCustomClassProperty should deep clone object and replace ParentArrayOfCustomClassProperty with the provided parentArrayOfCustomClassProperty",
                    WithPropertyName = "ParentArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.ParentArrayOfCustomClassProperty.IsEqualTo(_.ParentArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfBoolProperty should deep clone object and replace Child2ArrayOfBoolProperty with the provided child2ArrayOfBoolProperty",
                    WithPropertyName = "Child2ArrayOfBoolProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfBoolProperty.IsEqualTo(_.Child2ArrayOfBoolProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfBoolProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfIntProperty should deep clone object and replace Child2ArrayOfIntProperty with the provided child2ArrayOfIntProperty",
                    WithPropertyName = "Child2ArrayOfIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfIntProperty.IsEqualTo(_.Child2ArrayOfIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfStringProperty should deep clone object and replace Child2ArrayOfStringProperty with the provided child2ArrayOfStringProperty",
                    WithPropertyName = "Child2ArrayOfStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfStringProperty.IsEqualTo(_.Child2ArrayOfStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfGuidProperty should deep clone object and replace Child2ArrayOfGuidProperty with the provided child2ArrayOfGuidProperty",
                    WithPropertyName = "Child2ArrayOfGuidProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfGuidProperty.IsEqualTo(_.Child2ArrayOfGuidProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfGuidProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfDateTimeProperty should deep clone object and replace Child2ArrayOfDateTimeProperty with the provided child2ArrayOfDateTimeProperty",
                    WithPropertyName = "Child2ArrayOfDateTimeProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfDateTimeProperty.IsEqualTo(_.Child2ArrayOfDateTimeProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfDateTimeProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomEnumProperty should deep clone object and replace Child2ArrayOfCustomEnumProperty with the provided child2ArrayOfCustomEnumProperty",
                    WithPropertyName = "Child2ArrayOfCustomEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomEnumProperty.IsEqualTo(_.Child2ArrayOfCustomEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomFlagsEnumProperty should deep clone object and replace Child2ArrayOfCustomFlagsEnumProperty with the provided child2ArrayOfCustomFlagsEnumProperty",
                    WithPropertyName = "Child2ArrayOfCustomFlagsEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty.IsEqualTo(_.Child2ArrayOfCustomFlagsEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomFlagsEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "DeepCloneWithChild2ArrayOfCustomClassProperty should deep clone object and replace Child2ArrayOfCustomClassProperty with the provided child2ArrayOfCustomClassProperty",
                    WithPropertyName = "Child2ArrayOfCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                        var referenceObject = A.Dummy<ModelAllPrivateSetArrayChild2>().ThatIs(_ => !systemUnderTest.Child2ArrayOfCustomClassProperty.IsEqualTo(_.Child2ArrayOfCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelAllPrivateSetArrayChild2>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Child2ArrayOfCustomClassProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelAllPrivateSetArrayChild2 ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelAllPrivateSetArrayChild2>();

        private static readonly EquatableTestScenarios<ModelAllPrivateSetArrayChild2> EquatableTestScenarios = new EquatableTestScenarios<ModelAllPrivateSetArrayChild2>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelAllPrivateSetArrayChild2>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelAllPrivateSetArrayChild2[]
                    {
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelAllPrivateSetArrayChild2[]
                    {
                        new ModelAllPrivateSetArrayChild2(
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty)).ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty)).ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty)).ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty)).ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty)).ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty)).ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty)).ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.ParentArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty)).ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfBoolProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty)).Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty)).Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty)).Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfGuidProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty)).Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfDateTimeProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty)).Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty)).Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomFlagsEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty)).Child2ArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty),
                        new ModelAllPrivateSetArrayChild2(
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomFlagsEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentArrayOfCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfBoolProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfIntProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfStringProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfGuidProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfDateTimeProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomFlagsEnumProperty,
                                A.Dummy<ModelAllPrivateSetArrayChild2>().Whose(_ => !_.Child2ArrayOfCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Child2ArrayOfCustomClassProperty)).Child2ArrayOfCustomClassProperty),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelAllPrivateSetArrayChild1>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayChild2___Should_implement_IModel_of_ModelAllPrivateSetArrayChild2___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayChild2);

                var expectedModelMethods = typeof(IModel<ModelAllPrivateSetArrayChild2>)
                                          .GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)
                                          .ToList();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(_ => _.DeclaringType == type).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelAllPrivateSetArrayChild2>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelAllPrivateSetArrayChild2___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelAllPrivateSetArrayChild2);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                // Act
                var actual = (ModelAllPrivateSetArrayChild2)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelAllPrivateSetArrayChild2>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentArrayOfBoolProperty == null)
                {
                    actual.ParentArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfBoolProperty);
                }

                if (systemUnderTest.ParentArrayOfIntProperty == null)
                {
                    actual.ParentArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfIntProperty);
                }

                if (systemUnderTest.ParentArrayOfStringProperty == null)
                {
                    actual.ParentArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfStringProperty);
                }

                if (systemUnderTest.ParentArrayOfGuidProperty == null)
                {
                    actual.ParentArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfGuidProperty);
                }

                if (systemUnderTest.ParentArrayOfDateTimeProperty == null)
                {
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfDateTimeProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomEnumProperty == null)
                {
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.ParentArrayOfCustomClassProperty == null)
                {
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayOfCustomClassProperty);
                }

                if (systemUnderTest.Child2ArrayOfBoolProperty == null)
                {
                    actual.Child2ArrayOfBoolProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfBoolProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfBoolProperty);
                }

                if (systemUnderTest.Child2ArrayOfIntProperty == null)
                {
                    actual.Child2ArrayOfIntProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfIntProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfIntProperty);
                }

                if (systemUnderTest.Child2ArrayOfStringProperty == null)
                {
                    actual.Child2ArrayOfStringProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfStringProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfStringProperty);
                }

                if (systemUnderTest.Child2ArrayOfGuidProperty == null)
                {
                    actual.Child2ArrayOfGuidProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfGuidProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfGuidProperty);
                }

                if (systemUnderTest.Child2ArrayOfDateTimeProperty == null)
                {
                    actual.Child2ArrayOfDateTimeProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfDateTimeProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfDateTimeProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomEnumProperty == null)
                {
                    actual.Child2ArrayOfCustomEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfCustomEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty == null)
                {
                    actual.Child2ArrayOfCustomFlagsEnumProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfCustomFlagsEnumProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomFlagsEnumProperty);
                }

                if (systemUnderTest.Child2ArrayOfCustomClassProperty == null)
                {
                    actual.Child2ArrayOfCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Child2ArrayOfCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Child2ArrayOfCustomClassProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentArrayOfBoolProperty", "ParentArrayOfIntProperty", "ParentArrayOfStringProperty", "ParentArrayOfGuidProperty", "ParentArrayOfDateTimeProperty", "ParentArrayOfCustomEnumProperty", "ParentArrayOfCustomFlagsEnumProperty", "ParentArrayOfCustomClassProperty", "Child2ArrayOfBoolProperty", "Child2ArrayOfIntProperty", "Child2ArrayOfStringProperty", "Child2ArrayOfGuidProperty", "Child2ArrayOfDateTimeProperty", "Child2ArrayOfCustomEnumProperty", "Child2ArrayOfCustomFlagsEnumProperty", "Child2ArrayOfCustomClassProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelAllPrivateSetArrayChild2)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelAllPrivateSetArrayChild2).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild2>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetArrayChild2>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild2>();

                var serializer = BsonSerializer;

                var serializedBson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetArrayChild2>(serializedBson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild2>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToString(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetArrayChild2>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelAllPrivateSetArrayChild2>();

                var serializer = JsonSerializer;

                var serializedJson = serializer.SerializeToBytes(expected);

                // Act
                var actual = serializer.Deserialize<ModelAllPrivateSetArrayChild2>(serializedJson);

                // Assert
                actual.AsTest().Must().BeEqualTo(expected);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayChild2 systemUnderTest1 = null;
                ModelAllPrivateSetArrayChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelAllPrivateSetArrayChild2 systemUnderTest1 = null;
                ModelAllPrivateSetArrayChild2 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelAllPrivateSetArrayParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild2___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelAllPrivateSetArrayChild2 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild2___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild2___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild2___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelAllPrivateSetArrayChild2___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}
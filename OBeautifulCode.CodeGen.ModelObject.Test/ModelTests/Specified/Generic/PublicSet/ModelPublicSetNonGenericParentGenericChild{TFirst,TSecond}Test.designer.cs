// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelPublicSetNonGenericParentGenericChildTest
    {
        private static readonly StringRepresentationTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPublicSetNonGenericParentGenericChild<Version, Guid>: ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {systemUnderTest.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentArrayProperty = {systemUnderTest.ParentArrayProperty?.ToString() ?? "<null>"}, ParentNullableProperty = {systemUnderTest.ParentNullableProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomGenericClassProperty = {systemUnderTest.ParentCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionProperty = {systemUnderTest.ParentReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryProperty = {systemUnderTest.ParentReadOnlyDictionaryProperty?.ToString() ?? "<null>"}, ChildStringProperty = {systemUnderTest.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {systemUnderTest.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {systemUnderTest.ChildEnumProperty.ToString() ?? "<null>"}, ChildClassProperty = {systemUnderTest.ChildClassProperty?.ToString() ?? "<null>"}, ChildGenericArgumentProperty = {systemUnderTest.ChildGenericArgumentProperty?.ToString() ?? "<null>"}, ChildGenericArrayProperty = {systemUnderTest.ChildGenericArrayProperty?.ToString() ?? "<null>"}, ChildGenericNullableProperty = {systemUnderTest.ChildGenericNullableProperty?.ToString() ?? "<null>"}, ChildGenericCustomGenericClassProperty = {systemUnderTest.ChildGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyCollectionProperty = {systemUnderTest.ChildGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyListProperty = {systemUnderTest.ChildGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentEnumProperty should deep clone object and replace ParentEnumProperty with the provided parentEnumProperty",
                    WithPropertyName = "ParentEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentEnumProperty.IsEqualTo(_.ParentEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentArrayProperty should deep clone object and replace ParentArrayProperty with the provided parentArrayProperty",
                    WithPropertyName = "ParentArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentArrayProperty.IsEqualTo(_.ParentArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentNullableProperty should deep clone object and replace ParentNullableProperty with the provided parentNullableProperty",
                    WithPropertyName = "ParentNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentNullableProperty.IsEqualTo(_.ParentNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentCustomGenericClassProperty should deep clone object and replace ParentCustomGenericClassProperty with the provided parentCustomGenericClassProperty",
                    WithPropertyName = "ParentCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentCustomGenericClassProperty.IsEqualTo(_.ParentCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentReadOnlyCollectionProperty should deep clone object and replace ParentReadOnlyCollectionProperty with the provided parentReadOnlyCollectionProperty",
                    WithPropertyName = "ParentReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentReadOnlyCollectionProperty.IsEqualTo(_.ParentReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithParentReadOnlyDictionaryProperty should deep clone object and replace ParentReadOnlyDictionaryProperty with the provided parentReadOnlyDictionaryProperty",
                    WithPropertyName = "ParentReadOnlyDictionaryProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ParentReadOnlyDictionaryProperty.IsEqualTo(_.ParentReadOnlyDictionaryProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentReadOnlyDictionaryProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildStringProperty should deep clone object and replace ChildStringProperty with the provided childStringProperty",
                    WithPropertyName = "ChildStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildStringProperty.IsEqualTo(_.ChildStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildIntProperty should deep clone object and replace ChildIntProperty with the provided childIntProperty",
                    WithPropertyName = "ChildIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildIntProperty.IsEqualTo(_.ChildIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildEnumProperty should deep clone object and replace ChildEnumProperty with the provided childEnumProperty",
                    WithPropertyName = "ChildEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildEnumProperty.IsEqualTo(_.ChildEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildClassProperty should deep clone object and replace ChildClassProperty with the provided childClassProperty",
                    WithPropertyName = "ChildClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildClassProperty.IsEqualTo(_.ChildClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericArgumentProperty should deep clone object and replace ChildGenericArgumentProperty with the provided childGenericArgumentProperty",
                    WithPropertyName = "ChildGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericArgumentProperty.IsEqualTo(_.ChildGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericArrayProperty should deep clone object and replace ChildGenericArrayProperty with the provided childGenericArrayProperty",
                    WithPropertyName = "ChildGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericArrayProperty.IsEqualTo(_.ChildGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericNullableProperty should deep clone object and replace ChildGenericNullableProperty with the provided childGenericNullableProperty",
                    WithPropertyName = "ChildGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericNullableProperty.IsEqualTo(_.ChildGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericCustomGenericClassProperty should deep clone object and replace ChildGenericCustomGenericClassProperty with the provided childGenericCustomGenericClassProperty",
                    WithPropertyName = "ChildGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericCustomGenericClassProperty.IsEqualTo(_.ChildGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyCollectionProperty should deep clone object and replace ChildGenericReadOnlyCollectionProperty with the provided childGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ChildGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyCollectionProperty.IsEqualTo(_.ChildGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyListProperty should deep clone object and replace ChildGenericReadOnlyListProperty with the provided childGenericReadOnlyListProperty",
                    WithPropertyName = "ChildGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyListProperty.IsEqualTo(_.ChildGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty1 with the provided childGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty2 with the provided childGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                        var referenceObject = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                });

        private static readonly ModelPublicSetNonGenericParentGenericChild<Version, Guid> ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

        private static readonly EquatableTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>> EquatableTestScenarios = new EquatableTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelPublicSetNonGenericParentGenericChild<Version, Guid>[]
                    {
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelPublicSetNonGenericParentGenericChild<Version, Guid>[]
                    {
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentEnumProperty)).ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentArrayProperty)).ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentNullableProperty)).ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty)).ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty)).ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ParentReadOnlyDictionaryProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty)).ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildStringProperty)).ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildIntProperty)).ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildEnumProperty)).ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildClassProperty)).ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty)).ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty)).ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty)).ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty)).ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty)).ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty)).ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1)).ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2)).ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetNonGenericParentGenericChild<Version, Guid>
                            {
                                ParentStringProperty                                   = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                     = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                              = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentArrayProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentArrayProperty,
                                ParentNullableProperty                                 = ReferenceObjectForEquatableTestScenarios.ParentNullableProperty,
                                ParentCustomGenericClassProperty                       = ReferenceObjectForEquatableTestScenarios.ParentCustomGenericClassProperty,
                                ParentReadOnlyCollectionProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyCollectionProperty,
                                ParentReadOnlyDictionaryProperty                       = ReferenceObjectForEquatableTestScenarios.ParentReadOnlyDictionaryProperty,
                                ChildStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildClassProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildClassProperty,
                                ChildGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        private static readonly ComparableTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>> ComparableTestScenarios = new ComparableTestScenarios<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetNonGenericParentGenericChild___Should_implement_IModel_of_ModelPublicSetNonGenericParentGenericChild___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetNonGenericParentGenericChild<Version, Guid>);

                var expectedModelMethods = typeof(IModel<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.PublicDeclaredAndInheritedInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetNonGenericParentGenericChild___Should_implement_IComparableForRelativeSortOrder_of_ModelPublicSetNonGenericParentGenericChild___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetNonGenericParentGenericChild<Version, Guid>);

                var expectedModelMethods = typeof(IComparableForRelativeSortOrder<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.PublicDeclaredAndInheritedInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IComparableForRelativeSortOrder<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetNonGenericParentGenericChild___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetNonGenericParentGenericChild<Version, Guid>);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                // Act
                var actual = (ModelPublicSetNonGenericParentGenericChild<Version, Guid>)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentArrayProperty == null)
                {
                    actual.ParentArrayProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentArrayProperty);
                }

                if (systemUnderTest.ParentCustomGenericClassProperty == null)
                {
                    actual.ParentCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomGenericClassProperty);
                }

                if (systemUnderTest.ParentReadOnlyCollectionProperty == null)
                {
                    actual.ParentReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ParentReadOnlyDictionaryProperty == null)
                {
                    actual.ParentReadOnlyDictionaryProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentReadOnlyDictionaryProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentReadOnlyDictionaryProperty);
                }

                if (systemUnderTest.ChildClassProperty == null)
                {
                    actual.ChildClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildClassProperty);
                }

                if (systemUnderTest.ChildGenericArgumentProperty == null)
                {
                    actual.ChildGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArgumentProperty);
                }

                if (systemUnderTest.ChildGenericArrayProperty == null)
                {
                    actual.ChildGenericArrayProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArrayProperty);
                }

                if (systemUnderTest.ChildGenericCustomGenericClassProperty == null)
                {
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyCollectionProperty == null)
                {
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyListProperty == null)
                {
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentStringProperty", "ParentIntProperty", "ParentEnumProperty", "ParentCustomClassProperty", "ParentArrayProperty", "ParentNullableProperty", "ParentCustomGenericClassProperty", "ParentReadOnlyCollectionProperty", "ParentReadOnlyDictionaryProperty", "ChildStringProperty", "ChildIntProperty", "ChildEnumProperty", "ChildClassProperty", "ChildGenericArgumentProperty", "ChildGenericArrayProperty", "ChildGenericNullableProperty", "ChildGenericCustomGenericClassProperty", "ChildGenericReadOnlyCollectionProperty", "ChildGenericReadOnlyListProperty", "ChildGenericReadOnlyDictionaryProperty1", "ChildGenericReadOnlyDictionaryProperty2", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelPublicSetNonGenericParentGenericChild<Version, Guid>)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelPublicSetNonGenericParentGenericChild<Version, Guid>).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetNonGenericParentGenericChild<Version, Guid>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParent systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetNonGenericParent)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetNonGenericParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParentGenericChild___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParentGenericChild___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParentGenericChild___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParentGenericChild___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetNonGenericParentGenericChild___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Comparability
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 < systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null < scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject < null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject < scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ < scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject < _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 > systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null > scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject > null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject > scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ > scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject > _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 <= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null <= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject <= null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject <= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ <= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject <= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest1 = null;
                ModelPublicSetNonGenericParentGenericChild<Version, Guid> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 >= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null >= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject >= null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject >= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ >= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject >= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParent other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetNonGenericParent)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetNonGenericParent)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParent___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((ModelPublicSetNonGenericParent)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParentGenericChild<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetNonGenericParentGenericChild___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_parameter_obj_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)null);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_parameter_obj_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_negative_1___When_object_is_less_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_object_is_greater_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParent other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParent___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetNonGenericParent)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetNonGenericParentGenericChild<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetNonGenericParentGenericChild___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }
        }
    }
}
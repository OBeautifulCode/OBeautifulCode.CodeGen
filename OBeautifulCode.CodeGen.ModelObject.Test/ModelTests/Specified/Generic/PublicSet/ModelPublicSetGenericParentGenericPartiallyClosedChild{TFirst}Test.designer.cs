// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.DateTime.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelPublicSetGenericParentGenericPartiallyClosedChildTFirstTest
    {
        private static readonly StringRepresentationTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>: ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {systemUnderTest.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {systemUnderTest.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {systemUnderTest.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {systemUnderTest.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {systemUnderTest.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {systemUnderTest.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {systemUnderTest.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {systemUnderTest.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {systemUnderTest.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {systemUnderTest.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {systemUnderTest.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildGenericArgumentProperty = {systemUnderTest.ChildGenericArgumentProperty?.ToString() ?? "<null>"}, ChildGenericArrayProperty = {systemUnderTest.ChildGenericArrayProperty?.ToString() ?? "<null>"}, ChildGenericNullableProperty = {systemUnderTest.ChildGenericNullableProperty?.ToString() ?? "<null>"}, ChildGenericCustomGenericClassProperty = {systemUnderTest.ChildGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyCollectionProperty = {systemUnderTest.ChildGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyListProperty = {systemUnderTest.ChildGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentEnumProperty should deep clone object and replace ParentEnumProperty with the provided parentEnumProperty",
                    WithPropertyName = "ParentEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentEnumProperty.IsEqualTo(_.ParentEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericArgumentProperty should deep clone object and replace ParentGenericArgumentProperty with the provided parentGenericArgumentProperty",
                    WithPropertyName = "ParentGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericArgumentProperty.IsEqualTo(_.ParentGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericArrayProperty should deep clone object and replace ParentGenericArrayProperty with the provided parentGenericArrayProperty",
                    WithPropertyName = "ParentGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericArrayProperty.IsEqualTo(_.ParentGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericNullableProperty should deep clone object and replace ParentGenericNullableProperty with the provided parentGenericNullableProperty",
                    WithPropertyName = "ParentGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericNullableProperty.IsEqualTo(_.ParentGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericCustomGenericClassProperty should deep clone object and replace ParentGenericCustomGenericClassProperty with the provided parentGenericCustomGenericClassProperty",
                    WithPropertyName = "ParentGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericCustomGenericClassProperty.IsEqualTo(_.ParentGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyCollectionProperty should deep clone object and replace ParentGenericReadOnlyCollectionProperty with the provided parentGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ParentGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyCollectionProperty.IsEqualTo(_.ParentGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyListProperty should deep clone object and replace ParentGenericReadOnlyListProperty with the provided parentGenericReadOnlyListProperty",
                    WithPropertyName = "ParentGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyListProperty.IsEqualTo(_.ParentGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty1 with the provided parentGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty2 with the provided parentGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildStringProperty should deep clone object and replace ChildStringProperty with the provided childStringProperty",
                    WithPropertyName = "ChildStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildStringProperty.IsEqualTo(_.ChildStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildIntProperty should deep clone object and replace ChildIntProperty with the provided childIntProperty",
                    WithPropertyName = "ChildIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildIntProperty.IsEqualTo(_.ChildIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildEnumProperty should deep clone object and replace ChildEnumProperty with the provided childEnumProperty",
                    WithPropertyName = "ChildEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildEnumProperty.IsEqualTo(_.ChildEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildCustomClassProperty should deep clone object and replace ChildCustomClassProperty with the provided childCustomClassProperty",
                    WithPropertyName = "ChildCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildCustomClassProperty.IsEqualTo(_.ChildCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericArgumentProperty should deep clone object and replace ChildGenericArgumentProperty with the provided childGenericArgumentProperty",
                    WithPropertyName = "ChildGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericArgumentProperty.IsEqualTo(_.ChildGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericArrayProperty should deep clone object and replace ChildGenericArrayProperty with the provided childGenericArrayProperty",
                    WithPropertyName = "ChildGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericArrayProperty.IsEqualTo(_.ChildGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericNullableProperty should deep clone object and replace ChildGenericNullableProperty with the provided childGenericNullableProperty",
                    WithPropertyName = "ChildGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericNullableProperty.IsEqualTo(_.ChildGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericCustomGenericClassProperty should deep clone object and replace ChildGenericCustomGenericClassProperty with the provided childGenericCustomGenericClassProperty",
                    WithPropertyName = "ChildGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericCustomGenericClassProperty.IsEqualTo(_.ChildGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyCollectionProperty should deep clone object and replace ChildGenericReadOnlyCollectionProperty with the provided childGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ChildGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyCollectionProperty.IsEqualTo(_.ChildGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyListProperty should deep clone object and replace ChildGenericReadOnlyListProperty with the provided childGenericReadOnlyListProperty",
                    WithPropertyName = "ChildGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyListProperty.IsEqualTo(_.ChildGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty1 with the provided childGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty2 with the provided childGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                });

        private static readonly ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

        private static readonly EquatableTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>> EquatableTestScenarios = new EquatableTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>[]
                    {
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>[]
                    {
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentEnumProperty)).ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty)).ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty)).ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty)).ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty)).ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty)).ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty)).ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1)).ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2)).ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildStringProperty)).ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildIntProperty)).ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildEnumProperty)).ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty)).ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty)).ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty)).ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty)).ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty)).ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty)).ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty)).ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1)).ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2)).ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                        new ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildGenericArgumentProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ChildGenericArrayProperty                               = ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ChildGenericNullableProperty                            = ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ChildGenericCustomGenericClassProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ChildGenericReadOnlyCollectionProperty                  = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ChildGenericReadOnlyListProperty                        = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ChildGenericReadOnlyDictionaryProperty1                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ChildGenericReadOnlyDictionaryProperty2                 = ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty1  = ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ChildGenericPartiallyClosedReadOnlyDictionaryProperty2  = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelPublicSetGenericParentGenericChild<Version, Guid>>(),
                        A.Dummy<ModelPublicSetGenericParentNonGenericChild>(),
                    },
                });

        private static readonly ComparableTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>> ComparableTestScenarios = new ComparableTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

        private static readonly ValidModelTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>> ValidModelTestScenarios = new ValidModelTestScenarios<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new ValidModelTestScenario<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "a dummy ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> should be valid",
                    SystemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>(),
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StructuralTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_implement_IModel_of_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>);

                var expectedModelMethods = typeof(IModel<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_implement_IComparableForRelativeSortOrder_of_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>);

                var expectedModelMethods = typeof(IComparableForRelativeSortOrder<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IComparableForRelativeSortOrder<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class CloningTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                // Act
                var actual = (ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentGenericArgumentProperty == null)
                {
                    actual.ParentGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericArgumentProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArgumentProperty);
                }

                if (systemUnderTest.ParentGenericArrayProperty == null)
                {
                    actual.ParentGenericArrayProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericArrayProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArrayProperty);
                }

                if (systemUnderTest.ParentGenericCustomGenericClassProperty == null)
                {
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericCustomGenericClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyCollectionProperty == null)
                {
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyCollectionProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyListProperty == null)
                {
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyListProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildCustomClassProperty == null)
                {
                    actual.ChildCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildCustomClassProperty);
                }

                if (systemUnderTest.ChildGenericArgumentProperty == null)
                {
                    actual.ChildGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericArgumentProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArgumentProperty);
                }

                if (systemUnderTest.ChildGenericArrayProperty == null)
                {
                    actual.ChildGenericArrayProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericArrayProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArrayProperty);
                }

                if (systemUnderTest.ChildGenericCustomGenericClassProperty == null)
                {
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericCustomGenericClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyCollectionProperty == null)
                {
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyCollectionProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyListProperty == null)
                {
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyListProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentStringProperty", "ParentIntProperty", "ParentEnumProperty", "ParentCustomClassProperty", "ParentGenericArgumentProperty", "ParentGenericArrayProperty", "ParentGenericNullableProperty", "ParentGenericCustomGenericClassProperty", "ParentGenericReadOnlyCollectionProperty", "ParentGenericReadOnlyListProperty", "ParentGenericReadOnlyDictionaryProperty1", "ParentGenericReadOnlyDictionaryProperty2", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2", "ChildStringProperty", "ChildIntProperty", "ChildEnumProperty", "ChildCustomClassProperty", "ChildGenericArgumentProperty", "ChildGenericArrayProperty", "ChildGenericNullableProperty", "ChildGenericCustomGenericClassProperty", "ChildGenericReadOnlyCollectionProperty", "ChildGenericReadOnlyListProperty", "ChildGenericReadOnlyDictionaryProperty1", "ChildGenericReadOnlyDictionaryProperty2", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach (var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class SerializationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class EqualityTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<Version, Guid> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<Version, Guid>)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class HashTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ComparisonTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 < systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null < scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject < null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject < scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ < scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject < _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 > systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null > scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject > null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject > scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ > scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject > _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 <= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null <= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject <= null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject <= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ <= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject <= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 >= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null >= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject >= null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject >= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ >= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject >= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent_of_Version_Guid___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<Version, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_parameter_obj_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)null);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_parameter_obj_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_negative_1___When_object_is_less_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_object_is_greater_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent_of_Version_Guid___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<Version, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentGenericPartiallyClosedChild<Version> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentGenericPartiallyClosedChild_of_Version___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class ValidationTesting
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetValidationFailures___Should_return_empty_list___When_model_is_valid()
            {
                var scenarios = ValidModelTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.GetValidationFailures();

                    // Assert
                    actual.AsTest().Must().BeEmptyEnumerable(because: scenario.Id);
                }
            }
        }
    }
}
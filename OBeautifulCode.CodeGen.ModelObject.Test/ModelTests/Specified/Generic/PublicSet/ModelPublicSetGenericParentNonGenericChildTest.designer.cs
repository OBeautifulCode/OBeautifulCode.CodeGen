// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelPublicSetGenericParentNonGenericChildTest
    {
        private static readonly StringRepresentationTestScenarios<ModelPublicSetGenericParentNonGenericChild> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelPublicSetGenericParentNonGenericChild>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPublicSetGenericParentNonGenericChild: ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {systemUnderTest.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {systemUnderTest.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {systemUnderTest.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {systemUnderTest.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {systemUnderTest.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {systemUnderTest.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {systemUnderTest.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {systemUnderTest.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {systemUnderTest.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {systemUnderTest.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {systemUnderTest.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildArrayProperty = {systemUnderTest.ChildArrayProperty?.ToString() ?? "<null>"}, ChildNullableProperty = {systemUnderTest.ChildNullableProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildCustomGenericClassProperty = {systemUnderTest.ChildCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildReadOnlyCollectionProperty = {systemUnderTest.ChildReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildReadOnlyDictionaryProperty = {systemUnderTest.ChildReadOnlyDictionaryProperty?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly DeepCloneWithTestScenarios<ModelPublicSetGenericParentNonGenericChild> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelPublicSetGenericParentNonGenericChild>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentEnumProperty should deep clone object and replace ParentEnumProperty with the provided parentEnumProperty",
                    WithPropertyName = "ParentEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentEnumProperty.IsEqualTo(_.ParentEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericArgumentProperty should deep clone object and replace ParentGenericArgumentProperty with the provided parentGenericArgumentProperty",
                    WithPropertyName = "ParentGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericArgumentProperty.IsEqualTo(_.ParentGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericArrayProperty should deep clone object and replace ParentGenericArrayProperty with the provided parentGenericArrayProperty",
                    WithPropertyName = "ParentGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericArrayProperty.IsEqualTo(_.ParentGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericNullableProperty should deep clone object and replace ParentGenericNullableProperty with the provided parentGenericNullableProperty",
                    WithPropertyName = "ParentGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericNullableProperty.IsEqualTo(_.ParentGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericCustomGenericClassProperty should deep clone object and replace ParentGenericCustomGenericClassProperty with the provided parentGenericCustomGenericClassProperty",
                    WithPropertyName = "ParentGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericCustomGenericClassProperty.IsEqualTo(_.ParentGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyCollectionProperty should deep clone object and replace ParentGenericReadOnlyCollectionProperty with the provided parentGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ParentGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyCollectionProperty.IsEqualTo(_.ParentGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyListProperty should deep clone object and replace ParentGenericReadOnlyListProperty with the provided parentGenericReadOnlyListProperty",
                    WithPropertyName = "ParentGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyListProperty.IsEqualTo(_.ParentGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty1 with the provided parentGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty2 with the provided parentGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildStringProperty should deep clone object and replace ChildStringProperty with the provided childStringProperty",
                    WithPropertyName = "ChildStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildStringProperty.IsEqualTo(_.ChildStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildIntProperty should deep clone object and replace ChildIntProperty with the provided childIntProperty",
                    WithPropertyName = "ChildIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildIntProperty.IsEqualTo(_.ChildIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildEnumProperty should deep clone object and replace ChildEnumProperty with the provided childEnumProperty",
                    WithPropertyName = "ChildEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildEnumProperty.IsEqualTo(_.ChildEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildCustomClassProperty should deep clone object and replace ChildCustomClassProperty with the provided childCustomClassProperty",
                    WithPropertyName = "ChildCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildCustomClassProperty.IsEqualTo(_.ChildCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildArrayProperty should deep clone object and replace ChildArrayProperty with the provided childArrayProperty",
                    WithPropertyName = "ChildArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildArrayProperty.IsEqualTo(_.ChildArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildNullableProperty should deep clone object and replace ChildNullableProperty with the provided childNullableProperty",
                    WithPropertyName = "ChildNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildNullableProperty.IsEqualTo(_.ChildNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildCustomGenericClassProperty should deep clone object and replace ChildCustomGenericClassProperty with the provided childCustomGenericClassProperty",
                    WithPropertyName = "ChildCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildCustomGenericClassProperty.IsEqualTo(_.ChildCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildReadOnlyCollectionProperty should deep clone object and replace ChildReadOnlyCollectionProperty with the provided childReadOnlyCollectionProperty",
                    WithPropertyName = "ChildReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildReadOnlyCollectionProperty.IsEqualTo(_.ChildReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "DeepCloneWithChildReadOnlyDictionaryProperty should deep clone object and replace ChildReadOnlyDictionaryProperty with the provided childReadOnlyDictionaryProperty",
                    WithPropertyName = "ChildReadOnlyDictionaryProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                        var referenceObject = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().ThatIs(_ => !systemUnderTest.ChildReadOnlyDictionaryProperty.IsEqualTo(_.ChildReadOnlyDictionaryProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPublicSetGenericParentNonGenericChild>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildReadOnlyDictionaryProperty,
                        };

                        return result;
                    },
                });

        private static readonly ModelPublicSetGenericParentNonGenericChild ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

        private static readonly EquatableTestScenarios<ModelPublicSetGenericParentNonGenericChild> EquatableTestScenarios = new EquatableTestScenarios<ModelPublicSetGenericParentNonGenericChild>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelPublicSetGenericParentNonGenericChild>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelPublicSetGenericParentNonGenericChild[]
                    {
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelPublicSetGenericParentNonGenericChild[]
                    {
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentEnumProperty)).ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty)).ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty)).ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty)).ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty)).ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty)).ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty)).ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1)).ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2)).ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildStringProperty)).ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildIntProperty)).ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildEnumProperty)).ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty)).ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildArrayProperty)).ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildNullableProperty)).ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty)).ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty)).ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty,
                            },
                        new ModelPublicSetGenericParentNonGenericChild
                            {
                                ParentStringProperty                                    = ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ParentIntProperty                                       = ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ParentEnumProperty                                      = ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ParentCustomClassProperty                               = ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ParentGenericArgumentProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ParentGenericArrayProperty                              = ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ParentGenericNullableProperty                           = ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ParentGenericCustomGenericClassProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ParentGenericReadOnlyCollectionProperty                 = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ParentGenericReadOnlyListProperty                       = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ParentGenericReadOnlyDictionaryProperty1                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ParentGenericReadOnlyDictionaryProperty2                = ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ChildStringProperty                                     = ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ChildIntProperty                                        = ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ChildEnumProperty                                       = ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ChildCustomClassProperty                                = ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ChildArrayProperty                                      = ReferenceObjectForEquatableTestScenarios.ChildArrayProperty,
                                ChildNullableProperty                                   = ReferenceObjectForEquatableTestScenarios.ChildNullableProperty,
                                ChildCustomGenericClassProperty                         = ReferenceObjectForEquatableTestScenarios.ChildCustomGenericClassProperty,
                                ChildReadOnlyCollectionProperty                         = ReferenceObjectForEquatableTestScenarios.ChildReadOnlyCollectionProperty,
                                ChildReadOnlyDictionaryProperty                         = A.Dummy<ModelPublicSetGenericParentNonGenericChild>().Whose(_ => !_.ChildReadOnlyDictionaryProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildReadOnlyDictionaryProperty)).ChildReadOnlyDictionaryProperty,
                            },
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelPublicSetGenericParentGenericChild<Version, Guid>>(),
                        A.Dummy<ModelPublicSetGenericParentGenericPartiallyClosedChild<Version>>(),
                    },
                });

        private static readonly ComparableTestScenarios<ModelPublicSetGenericParentNonGenericChild> ComparableTestScenarios = new ComparableTestScenarios<ModelPublicSetGenericParentNonGenericChild>();

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentNonGenericChild___Should_implement_IModel_of_ModelPublicSetGenericParentNonGenericChild___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentNonGenericChild);

                var expectedModelMethods = typeof(IModel<ModelPublicSetGenericParentNonGenericChild>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.DeclaredAndInheritedPublicInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelPublicSetGenericParentNonGenericChild>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentNonGenericChild___Should_implement_IComparableForRelativeSortOrder_of_ModelPublicSetGenericParentNonGenericChild___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentNonGenericChild);

                var expectedModelMethods = typeof(IComparableForRelativeSortOrder<ModelPublicSetGenericParentNonGenericChild>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethods(BindingFlagsFor.DeclaredAndInheritedPublicInstanceMembers).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IComparableForRelativeSortOrder<ModelPublicSetGenericParentNonGenericChild>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPublicSetGenericParentNonGenericChild___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPublicSetGenericParentNonGenericChild);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                // Act
                var actual = (ModelPublicSetGenericParentNonGenericChild)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentGenericArgumentProperty == null)
                {
                    actual.ParentGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArgumentProperty);
                }

                if (systemUnderTest.ParentGenericArrayProperty == null)
                {
                    actual.ParentGenericArrayProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArrayProperty);
                }

                if (systemUnderTest.ParentGenericCustomGenericClassProperty == null)
                {
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyCollectionProperty == null)
                {
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyListProperty == null)
                {
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildCustomClassProperty == null)
                {
                    actual.ChildCustomClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildCustomClassProperty);
                }

                if (systemUnderTest.ChildArrayProperty == null)
                {
                    actual.ChildArrayProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildArrayProperty);
                }

                if (systemUnderTest.ChildCustomGenericClassProperty == null)
                {
                    actual.ChildCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildCustomGenericClassProperty);
                }

                if (systemUnderTest.ChildReadOnlyCollectionProperty == null)
                {
                    actual.ChildReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ChildReadOnlyDictionaryProperty == null)
                {
                    actual.ChildReadOnlyDictionaryProperty.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ChildReadOnlyDictionaryProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildReadOnlyDictionaryProperty);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentStringProperty", "ParentIntProperty", "ParentEnumProperty", "ParentCustomClassProperty", "ParentGenericArgumentProperty", "ParentGenericArrayProperty", "ParentGenericNullableProperty", "ParentGenericCustomGenericClassProperty", "ParentGenericReadOnlyCollectionProperty", "ParentGenericReadOnlyListProperty", "ParentGenericReadOnlyDictionaryProperty1", "ParentGenericReadOnlyDictionaryProperty2", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2", "ChildStringProperty", "ChildIntProperty", "ChildEnumProperty", "ChildCustomClassProperty", "ChildArrayProperty", "ChildNullableProperty", "ChildCustomGenericClassProperty", "ChildReadOnlyCollectionProperty", "ChildReadOnlyDictionaryProperty" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethod(nameof(WorkflowExtensions.AsTest));

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethod(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelPublicSetGenericParentNonGenericChild)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var property = typeof(ModelPublicSetGenericParentNonGenericChild).GetProperty(propertyName);

                        var propertyType = property.PropertyType;

                        var actualPropertyValue = property.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = property.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPublicSetGenericParentNonGenericChild>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentNonGenericChild systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentNonGenericChild systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<CustomClass, Guid> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<CustomClass, Guid>)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParent___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentNonGenericChild___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentNonGenericChild systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentNonGenericChild___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentNonGenericChild___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentNonGenericChild___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPublicSetGenericParentNonGenericChild___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Comparability
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 < systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null < scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject < null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject < scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ < scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject < _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 > systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null > scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject > null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject > scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ > scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject > _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 <= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null <= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject <= null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject <= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ <= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject <= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPublicSetGenericParentNonGenericChild systemUnderTest1 = null;
                ModelPublicSetGenericParentNonGenericChild systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 >= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null >= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject >= null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject >= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ >= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject >= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<CustomClass, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParent___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((ModelPublicSetGenericParent<CustomClass, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentNonGenericChild other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPublicSetGenericParentNonGenericChild___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_parameter_obj_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)null);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_parameter_obj_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_negative_1___When_object_is_less_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_object_is_greater_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParent<CustomClass, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParent___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPublicSetGenericParent<CustomClass, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPublicSetGenericParentNonGenericChild other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPublicSetGenericParentNonGenericChild___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class ModelPrivateSetGenericParentGenericPartiallyClosedChildTFirstTest
    {
        private static readonly StringRepresentationTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedStringRepresentation<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>: ParentStringProperty = {systemUnderTest.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {systemUnderTest.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {systemUnderTest.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {systemUnderTest.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {systemUnderTest.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {systemUnderTest.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {systemUnderTest.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {systemUnderTest.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {systemUnderTest.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {systemUnderTest.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {systemUnderTest.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {systemUnderTest.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {systemUnderTest.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {systemUnderTest.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildGenericArgumentProperty = {systemUnderTest.ChildGenericArgumentProperty?.ToString() ?? "<null>"}, ChildGenericArrayProperty = {systemUnderTest.ChildGenericArrayProperty?.ToString() ?? "<null>"}, ChildGenericNullableProperty = {systemUnderTest.ChildGenericNullableProperty?.ToString() ?? "<null>"}, ChildGenericCustomGenericClassProperty = {systemUnderTest.ChildGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyCollectionProperty = {systemUnderTest.ChildGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyListProperty = {systemUnderTest.ChildGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = {systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             null,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentStringProperty' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentStringProperty", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             null,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericArgumentProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             null,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericArgumentProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericArrayProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             null,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericArrayProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericArrayProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             new Version[0],
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericArrayProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericArrayProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             new Version[0].Concat(referenceObject.ParentGenericArrayProperty).Concat(new Version[] { null }).Concat(referenceObject.ParentGenericArrayProperty).ToArray(),
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericArrayProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericCustomGenericClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             null,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericCustomGenericClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericReadOnlyCollectionProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             null,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyCollectionProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyCollectionProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             new List<Version>(),
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyCollectionProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyCollectionProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             new Version[0].Concat(referenceObject.ParentGenericReadOnlyCollectionProperty).Concat(new Version[] { null }).Concat(referenceObject.ParentGenericReadOnlyCollectionProperty).ToList(),
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyCollectionProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericReadOnlyListProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             null,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyListProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyListProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             new List<Version>(),
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyListProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyListProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             new Version[0].Concat(referenceObject.ParentGenericReadOnlyListProperty).Concat(new Version[] { null }).Concat(referenceObject.ParentGenericReadOnlyListProperty).ToList(),
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyListProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericReadOnlyDictionaryProperty1' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             null,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyDictionaryProperty1", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyDictionaryProperty1' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             new Dictionary<Version, Guid>(),
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyDictionaryProperty1", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericReadOnlyDictionaryProperty2' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             null,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyDictionaryProperty2", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyDictionaryProperty2' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             new Dictionary<Guid, Version>(),
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyDictionaryProperty2", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericReadOnlyDictionaryProperty2' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var dictionaryWithNullValue = referenceObject.ParentGenericReadOnlyDictionaryProperty2.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             dictionaryWithNullValue,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericReadOnlyDictionaryProperty2", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericPartiallyClosedReadOnlyDictionaryProperty1' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             null,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericPartiallyClosedReadOnlyDictionaryProperty1", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericPartiallyClosedReadOnlyDictionaryProperty1' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             new Dictionary<string, Guid>(),
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericPartiallyClosedReadOnlyDictionaryProperty1", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'parentGenericPartiallyClosedReadOnlyDictionaryProperty2' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             null,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericPartiallyClosedReadOnlyDictionaryProperty2", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericPartiallyClosedReadOnlyDictionaryProperty2' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             new Dictionary<Version, string>(),
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericPartiallyClosedReadOnlyDictionaryProperty2", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'parentGenericPartiallyClosedReadOnlyDictionaryProperty2' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var dictionaryWithNullValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             dictionaryWithNullValue,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "parentGenericPartiallyClosedReadOnlyDictionaryProperty2", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childStringProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             null,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childStringProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childStringProperty' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childStringProperty", "white space", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childCustomClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             null,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childCustomClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericArgumentProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             null,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericArgumentProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericArrayProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             null,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericArrayProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericArrayProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             new Version[0],
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericArrayProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericArrayProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             new Version[0].Concat(referenceObject.ChildGenericArrayProperty).Concat(new Version[] { null }).Concat(referenceObject.ChildGenericArrayProperty).ToArray(),
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericArrayProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericCustomGenericClassProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             null,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericCustomGenericClassProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericReadOnlyCollectionProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             null,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyCollectionProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyCollectionProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             new List<Version>(),
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyCollectionProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyCollectionProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             new Version[0].Concat(referenceObject.ChildGenericReadOnlyCollectionProperty).Concat(new Version[] { null }).Concat(referenceObject.ChildGenericReadOnlyCollectionProperty).ToList(),
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyCollectionProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericReadOnlyListProperty' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             null,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyListProperty", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyListProperty' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             new List<Version>(),
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyListProperty", "is an empty enumerable", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyListProperty' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             new Version[0].Concat(referenceObject.ChildGenericReadOnlyListProperty).Concat(new Version[] { null }).Concat(referenceObject.ChildGenericReadOnlyListProperty).ToList(),
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyListProperty", "contains at least one null element", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericReadOnlyDictionaryProperty1' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             null,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyDictionaryProperty1", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyDictionaryProperty1' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             new Dictionary<Version, Guid>(),
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyDictionaryProperty1", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericReadOnlyDictionaryProperty2' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             null,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyDictionaryProperty2", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyDictionaryProperty2' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             new Dictionary<Guid, Version>(),
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyDictionaryProperty2", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericReadOnlyDictionaryProperty2' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var dictionaryWithNullValue = referenceObject.ChildGenericReadOnlyDictionaryProperty2.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             dictionaryWithNullValue,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericReadOnlyDictionaryProperty2", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty1' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             null,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty1", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty1' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             new Dictionary<string, Version>(),
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty1", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty1' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var dictionaryWithNullValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             dictionaryWithNullValue,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty1", "contains at least one key-value pair with a null value", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty2' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             null);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty2", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty2' is an empty dictionary scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             new Dictionary<Version, string>());

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty2", "is an empty dictionary", },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "constructor should throw ArgumentException when parameter 'childGenericPartiallyClosedReadOnlyDictionaryProperty2' contains a key-value pair with a null value scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var dictionaryWithNullValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.ToDictionary(_ => _.Key, _ => _.Value);

                        var randomKey = dictionaryWithNullValue.Keys.ElementAt(ThreadSafeRandom.Next(0, dictionaryWithNullValue.Count));

                        dictionaryWithNullValue[randomKey] = null;

                        var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                             referenceObject.ParentStringProperty,
                                             referenceObject.ParentIntProperty,
                                             referenceObject.ParentEnumProperty,
                                             referenceObject.ParentCustomClassProperty,
                                             referenceObject.ParentGenericArgumentProperty,
                                             referenceObject.ParentGenericArrayProperty,
                                             referenceObject.ParentGenericNullableProperty,
                                             referenceObject.ParentGenericCustomGenericClassProperty,
                                             referenceObject.ParentGenericReadOnlyCollectionProperty,
                                             referenceObject.ParentGenericReadOnlyListProperty,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                             referenceObject.ChildStringProperty,
                                             referenceObject.ChildIntProperty,
                                             referenceObject.ChildEnumProperty,
                                             referenceObject.ChildCustomClassProperty,
                                             referenceObject.ChildGenericArgumentProperty,
                                             referenceObject.ChildGenericArrayProperty,
                                             referenceObject.ChildGenericNullableProperty,
                                             referenceObject.ChildGenericCustomGenericClassProperty,
                                             referenceObject.ChildGenericReadOnlyCollectionProperty,
                                             referenceObject.ChildGenericReadOnlyListProperty,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                             referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                             referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                             dictionaryWithNullValue);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "childGenericPartiallyClosedReadOnlyDictionaryProperty2", "contains at least one key-value pair with a null value", },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentStringProperty should return same 'parentStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentIntProperty should return same 'parentIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentEnumProperty should return same 'parentEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentCustomClassProperty should return same 'parentCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericArgumentProperty should return same 'parentGenericArgumentProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericArgumentProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericArgumentProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericArrayProperty should return same 'parentGenericArrayProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericArrayProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericArrayProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericNullableProperty should return same 'parentGenericNullableProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericNullableProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericNullableProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericCustomGenericClassProperty should return same 'parentGenericCustomGenericClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericCustomGenericClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericReadOnlyCollectionProperty should return same 'parentGenericReadOnlyCollectionProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericReadOnlyCollectionProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericReadOnlyListProperty should return same 'parentGenericReadOnlyListProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericReadOnlyListProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericReadOnlyDictionaryProperty1 should return same 'parentGenericReadOnlyDictionaryProperty1' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericReadOnlyDictionaryProperty1",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericReadOnlyDictionaryProperty2 should return same 'parentGenericReadOnlyDictionaryProperty2' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericReadOnlyDictionaryProperty2",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 should return same 'parentGenericPartiallyClosedReadOnlyDictionaryProperty1' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 should return same 'parentGenericPartiallyClosedReadOnlyDictionaryProperty2' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                    PropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildStringProperty should return same 'childStringProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildStringProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildStringProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildIntProperty should return same 'childIntProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildIntProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildIntProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildEnumProperty should return same 'childEnumProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildEnumProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildEnumProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildCustomClassProperty should return same 'childCustomClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildCustomClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildCustomClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericArgumentProperty should return same 'childGenericArgumentProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericArgumentProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericArgumentProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericArrayProperty should return same 'childGenericArrayProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericArrayProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericArrayProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericNullableProperty should return same 'childGenericNullableProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericNullableProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericNullableProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericCustomGenericClassProperty should return same 'childGenericCustomGenericClassProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericCustomGenericClassProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericReadOnlyCollectionProperty should return same 'childGenericReadOnlyCollectionProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericReadOnlyCollectionProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericReadOnlyListProperty should return same 'childGenericReadOnlyListProperty' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericReadOnlyListProperty",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericReadOnlyDictionaryProperty1 should return same 'childGenericReadOnlyDictionaryProperty1' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericReadOnlyDictionaryProperty1",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericReadOnlyDictionaryProperty2 should return same 'childGenericReadOnlyDictionaryProperty2' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericReadOnlyDictionaryProperty2",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 should return same 'childGenericPartiallyClosedReadOnlyDictionaryProperty1' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 should return same 'childGenericPartiallyClosedReadOnlyDictionaryProperty2' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var result = new SystemUnderTestExpectedPropertyValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                                      referenceObject.ParentStringProperty,
                                                      referenceObject.ParentIntProperty,
                                                      referenceObject.ParentEnumProperty,
                                                      referenceObject.ParentCustomClassProperty,
                                                      referenceObject.ParentGenericArgumentProperty,
                                                      referenceObject.ParentGenericArrayProperty,
                                                      referenceObject.ParentGenericNullableProperty,
                                                      referenceObject.ParentGenericCustomGenericClassProperty,
                                                      referenceObject.ParentGenericReadOnlyCollectionProperty,
                                                      referenceObject.ParentGenericReadOnlyListProperty,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildStringProperty,
                                                      referenceObject.ChildIntProperty,
                                                      referenceObject.ChildEnumProperty,
                                                      referenceObject.ChildCustomClassProperty,
                                                      referenceObject.ChildGenericArgumentProperty,
                                                      referenceObject.ChildGenericArrayProperty,
                                                      referenceObject.ChildGenericNullableProperty,
                                                      referenceObject.ChildGenericCustomGenericClassProperty,
                                                      referenceObject.ChildGenericReadOnlyCollectionProperty,
                                                      referenceObject.ChildGenericReadOnlyListProperty,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                                      referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                            ExpectedPropertyValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                    PropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2",
                });

        private static readonly DeepCloneWithTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentStringProperty should deep clone object and replace ParentStringProperty with the provided parentStringProperty",
                    WithPropertyName = "ParentStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentStringProperty.IsEqualTo(_.ParentStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentIntProperty should deep clone object and replace ParentIntProperty with the provided parentIntProperty",
                    WithPropertyName = "ParentIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentIntProperty.IsEqualTo(_.ParentIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentEnumProperty should deep clone object and replace ParentEnumProperty with the provided parentEnumProperty",
                    WithPropertyName = "ParentEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentEnumProperty.IsEqualTo(_.ParentEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentCustomClassProperty should deep clone object and replace ParentCustomClassProperty with the provided parentCustomClassProperty",
                    WithPropertyName = "ParentCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentCustomClassProperty.IsEqualTo(_.ParentCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericArgumentProperty should deep clone object and replace ParentGenericArgumentProperty with the provided parentGenericArgumentProperty",
                    WithPropertyName = "ParentGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericArgumentProperty.IsEqualTo(_.ParentGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericArrayProperty should deep clone object and replace ParentGenericArrayProperty with the provided parentGenericArrayProperty",
                    WithPropertyName = "ParentGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericArrayProperty.IsEqualTo(_.ParentGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericNullableProperty should deep clone object and replace ParentGenericNullableProperty with the provided parentGenericNullableProperty",
                    WithPropertyName = "ParentGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericNullableProperty.IsEqualTo(_.ParentGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericCustomGenericClassProperty should deep clone object and replace ParentGenericCustomGenericClassProperty with the provided parentGenericCustomGenericClassProperty",
                    WithPropertyName = "ParentGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericCustomGenericClassProperty.IsEqualTo(_.ParentGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyCollectionProperty should deep clone object and replace ParentGenericReadOnlyCollectionProperty with the provided parentGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ParentGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyCollectionProperty.IsEqualTo(_.ParentGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyListProperty should deep clone object and replace ParentGenericReadOnlyListProperty with the provided parentGenericReadOnlyListProperty",
                    WithPropertyName = "ParentGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyListProperty.IsEqualTo(_.ParentGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty1 with the provided parentGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericReadOnlyDictionaryProperty2 with the provided parentGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided parentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildStringProperty should deep clone object and replace ChildStringProperty with the provided childStringProperty",
                    WithPropertyName = "ChildStringProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildStringProperty.IsEqualTo(_.ChildStringProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildStringProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildIntProperty should deep clone object and replace ChildIntProperty with the provided childIntProperty",
                    WithPropertyName = "ChildIntProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildIntProperty.IsEqualTo(_.ChildIntProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildIntProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildEnumProperty should deep clone object and replace ChildEnumProperty with the provided childEnumProperty",
                    WithPropertyName = "ChildEnumProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildEnumProperty.IsEqualTo(_.ChildEnumProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildEnumProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildCustomClassProperty should deep clone object and replace ChildCustomClassProperty with the provided childCustomClassProperty",
                    WithPropertyName = "ChildCustomClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildCustomClassProperty.IsEqualTo(_.ChildCustomClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildCustomClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericArgumentProperty should deep clone object and replace ChildGenericArgumentProperty with the provided childGenericArgumentProperty",
                    WithPropertyName = "ChildGenericArgumentProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericArgumentProperty.IsEqualTo(_.ChildGenericArgumentProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArgumentProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericArrayProperty should deep clone object and replace ChildGenericArrayProperty with the provided childGenericArrayProperty",
                    WithPropertyName = "ChildGenericArrayProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericArrayProperty.IsEqualTo(_.ChildGenericArrayProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericArrayProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericNullableProperty should deep clone object and replace ChildGenericNullableProperty with the provided childGenericNullableProperty",
                    WithPropertyName = "ChildGenericNullableProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericNullableProperty.IsEqualTo(_.ChildGenericNullableProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericNullableProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericCustomGenericClassProperty should deep clone object and replace ChildGenericCustomGenericClassProperty with the provided childGenericCustomGenericClassProperty",
                    WithPropertyName = "ChildGenericCustomGenericClassProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericCustomGenericClassProperty.IsEqualTo(_.ChildGenericCustomGenericClassProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericCustomGenericClassProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyCollectionProperty should deep clone object and replace ChildGenericReadOnlyCollectionProperty with the provided childGenericReadOnlyCollectionProperty",
                    WithPropertyName = "ChildGenericReadOnlyCollectionProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyCollectionProperty.IsEqualTo(_.ChildGenericReadOnlyCollectionProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyCollectionProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyListProperty should deep clone object and replace ChildGenericReadOnlyListProperty with the provided childGenericReadOnlyListProperty",
                    WithPropertyName = "ChildGenericReadOnlyListProperty",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyListProperty.IsEqualTo(_.ChildGenericReadOnlyListProperty));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyListProperty,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty1 with the provided childGenericReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericReadOnlyDictionaryProperty2 with the provided childGenericReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty1 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty2 should deep clone object and replace ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 with the provided childGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    WithPropertyName = "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                        var referenceObject = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().ThatIs(_ => !systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2));

                        var result = new SystemUnderTestDeepCloneWithValue<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2,
                        };

                        return result;
                    },
                });

        private static readonly ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> ReferenceObjectForEquatableTestScenarios = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

        private static readonly EquatableTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> EquatableTestScenarios = new EquatableTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>()
            .AddScenario(() =>
                new EquatableTestScenario<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>[]
                    {
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>[]
                    {
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentStringProperty)).ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentIntProperty)).ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentEnumProperty)).ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty)).ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty)).ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty)).ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty)).ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty)).ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty)).ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty)).ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1)).ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2)).ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)).ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildStringProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildStringProperty)).ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildIntProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildIntProperty)).ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildEnumProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildEnumProperty)).ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildCustomClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty)).ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericArgumentProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty)).ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericArrayProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty)).ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericNullableProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty)).ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericCustomGenericClassProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty)).ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyCollectionProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty)).ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyListProperty.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty)).ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1)).ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2)).ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                        new ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>(
                                ReferenceObjectForEquatableTestScenarios.ParentStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildStringProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildIntProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildEnumProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildCustomClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArgumentProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericArrayProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericNullableProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericCustomGenericClassProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyCollectionProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyListProperty,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty1,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericReadOnlyDictionaryProperty2,
                                ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>().Whose(_ => !_.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2)).ChildGenericPartiallyClosedReadOnlyDictionaryProperty2),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                        A.Dummy<ModelPrivateSetGenericParentGenericChild<Version, Guid>>(),
                        A.Dummy<ModelPrivateSetGenericParentNonGenericChild>(),
                    },
                });

        private static readonly ComparableTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>> ComparableTestScenarios = new ComparableTestScenarios<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_implement_IModel_of_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>);

                var expectedModelMethods = typeof(IModel<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_implement_IComparableForRelativeSortOrder_of_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>);

                var expectedModelMethods = typeof(IComparableForRelativeSortOrder<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IComparableForRelativeSortOrder<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var asTestMethodInfo = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest));

                var beEqualToMethodInfo = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo));

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    // When the scenario specifies CompareActualToExpectedUsing.DefaultStrategy, ValidateAndPrepareForTesting()
                    // will check if ExpectedPropertyValue == null.  If so, it sets CompareActualToExpectedUsing = ReferenceEquality.
                    // If not, then it checks the runtime type of ExpectedPropertyValue and if it's a value type,
                    // then it sets CompareActualToExpectedUsing = ValueEquality, otherwise it uses ValueEquality.
                    // So a boxed value type is handled properly (using ValueEquality instead of ReferenceEquality).
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        // The below reflection code is used in lieu of the following single line of code
                        // so that equality is determined based on the property type instead of using
                        // OBeautifulCode.Equality.Recipes.ObjectEqualityComparer, which will return false
                        // when the objects being compared have different runtime types.  For example, if
                        // the property type is IReadOnlyCollection<string> and we are comparing an empty array
                        // an empty List, the assertion below would fail inappropriately.
                        // actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id);

                        var propertyType = scenario.Property.PropertyType;

                        var asTestMethodInfoToInvoke = asTestMethodInfo.MakeGenericMethod(propertyType);

                        var assertionTracker = asTestMethodInfoToInvoke.Invoke(null, new[] { actual, Type.Missing });

                        assertionTracker.Must();

                        var mustBeEqualToMethodInfoToInvoke = beEqualToMethodInfo.MakeGenericMethod(propertyType);

                        mustBeEqualToMethodInfoToInvoke.Invoke(null, new[]{ assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                // Act
                var actual = (ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ParentCustomClassProperty == null)
                {
                    actual.ParentCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentCustomClassProperty);
                }

                if (systemUnderTest.ParentGenericArgumentProperty == null)
                {
                    actual.ParentGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericArgumentProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArgumentProperty);
                }

                if (systemUnderTest.ParentGenericArrayProperty == null)
                {
                    actual.ParentGenericArrayProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericArrayProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericArrayProperty);
                }

                if (systemUnderTest.ParentGenericCustomGenericClassProperty == null)
                {
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericCustomGenericClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyCollectionProperty == null)
                {
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyCollectionProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyListProperty == null)
                {
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyListProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildCustomClassProperty == null)
                {
                    actual.ChildCustomClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildCustomClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildCustomClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildCustomClassProperty);
                }

                if (systemUnderTest.ChildGenericArgumentProperty == null)
                {
                    actual.ChildGenericArgumentProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericArgumentProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericArgumentProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArgumentProperty);
                }

                if (systemUnderTest.ChildGenericArrayProperty == null)
                {
                    actual.ChildGenericArrayProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericArrayProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericArrayProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericArrayProperty);
                }

                if (systemUnderTest.ChildGenericCustomGenericClassProperty == null)
                {
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericCustomGenericClassProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericCustomGenericClassProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericCustomGenericClassProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyCollectionProperty == null)
                {
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyCollectionProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyCollectionProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyCollectionProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyListProperty == null)
                {
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyListProperty.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyListProperty.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyListProperty);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericReadOnlyDictionaryProperty2);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1);
                }

                if (systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 == null)
                {
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().BeNull();
                }
                else if (!actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.GetType().IsValueType)
                {
                    // When the declared type is a reference type, we still have to check the runtime type.
                    // The object could be a boxed value type, which will fail this asseration because
                    // a deep clone of a value type object is the same object.
                    actual.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "ParentStringProperty", "ParentIntProperty", "ParentEnumProperty", "ParentCustomClassProperty", "ParentGenericArgumentProperty", "ParentGenericArrayProperty", "ParentGenericNullableProperty", "ParentGenericCustomGenericClassProperty", "ParentGenericReadOnlyCollectionProperty", "ParentGenericReadOnlyListProperty", "ParentGenericReadOnlyDictionaryProperty1", "ParentGenericReadOnlyDictionaryProperty2", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty1", "ParentGenericPartiallyClosedReadOnlyDictionaryProperty2", "ChildStringProperty", "ChildIntProperty", "ChildEnumProperty", "ChildCustomClassProperty", "ChildGenericArgumentProperty", "ChildGenericArrayProperty", "ChildGenericNullableProperty", "ChildGenericCustomGenericClassProperty", "ChildGenericReadOnlyCollectionProperty", "ChildGenericReadOnlyListProperty", "ChildGenericReadOnlyDictionaryProperty1", "ChildGenericReadOnlyDictionaryProperty2", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty1", "ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        var comparisonValue = propertyName == scenario.WithPropertyName
                            ? scenario.WithValue
                            : propertyInfo.GetValue(scenario.SystemUnderTest);

                        if (actualPropertyValue == null)
                        {
                            comparisonValue.Must().BeNull(because: scenario.Id);
                        }
                        else
                        {
                            // We use the runtime type here to solve for the case where the object is a boxed value type.
                            var actualPropertyValueRuntimeType = actualPropertyValue.GetType();

                            if (actualPropertyValueRuntimeType.IsValueType || (actualPropertyValueRuntimeType == typeof(string)))
                            {
                                // actualPropertyValue and comparisonValue are declared as typeof(object), but
                                // BeEqualTo (which uses IsEqualTo), will do the right thing by comparing the
                                // objects using their runtime type.
                                actualPropertyValue.AsTest().Must().BeEqualTo(comparisonValue, because: scenario.Id);
                            }
                            else
                            {
                                if (propertyName == scenario.WithPropertyName)
                                {
                                    actualPropertyValue.AsTest().Must().BeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                                else
                                {
                                    actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(comparisonValue, because: scenario.Id);
                                }
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version>>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParent<Version, Guid> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals((ModelPrivateSetGenericParent<Version, Guid>)systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Comparability
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 < systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null < scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject < null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject < scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ < scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject < _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ < scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject < _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 > systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null > scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject > null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject > scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ > scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject > _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ > scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject > _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 <= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null <= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject <= null;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject <= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_true___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_return_false___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ <= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject <= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void LessThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ <= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject <= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest1 = null;
                ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 >= systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_null_and_parameter_right_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = null >= scenario.ReferenceObject;

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_right_is_null_and_parameter_left_is_not_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject >= null;

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject >= scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_and_right_are_equal_but_not_the_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_false___When_parameter_left_is_less_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_return_true___When_parameter_left_is_greater_than_parameter_right()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _ >= scenario.ReferenceObject).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject >= _ ).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GreaterThanOrEqualToOperator___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => _ >= scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject >= _ )).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParent<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((ModelPrivateSetGenericParent<Version, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_1___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareTo(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_0___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_negative_1___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_1___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_parameter_obj_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)null);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_parameter_obj_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareTo((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_0___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(0, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_negative_1___When_object_is_less_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(-1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_return_1___When_object_is_greater_than_parameter_obj()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareTo((object)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareTo((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(1, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareTo_with_Object___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareTo((object)_))).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals1.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");

                    actuals2.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals2.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParent<Version, Guid> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParent_of_Version_Guid___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder((ModelPrivateSetGenericParent<Version, Guid>)_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_parameter_other_is_null()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    ModelPrivateSetGenericParentGenericPartiallyClosedChild<Version> other = null;

                    // Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(other);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_parameter_other_is_same_object()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.CompareToForRelativeSortOrder(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceOccursInTheSamePositionAsTheOtherInstance___When_objects_being_compared_are_equal()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstancePrecedesTheOtherInstance___When_object_is_less_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstancePrecedesTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_return_RelativeSortOrder_ThisInstanceFollowsTheOtherInstance___When_object_is_greater_than_parameter_other()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreGreaterThanReferenceObject.Select(_ => _.CompareToForRelativeSortOrder(scenario.ReferenceObject)).ToList();
                    var actuals2 = scenario.ObjectsThatAreLessThanReferenceObject.Select(_ => scenario.ReferenceObject.CompareToForRelativeSortOrder(_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeEqualTo(RelativeSortOrder.ThisInstanceFollowsTheOtherInstance, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void CompareToForRelativeSortOrder_with_ModelPrivateSetGenericParentGenericPartiallyClosedChild_of_Version___Should_throw_ArgumentException___When_objects_being_compared_are_of_different_types()
            {
                var scenarios = ComparableTestScenarios.ValidateAndPrepareForTesting();

                foreach(var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => Record.Exception(() => scenario.ReferenceObject.CompareToForRelativeSortOrder(_))).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeOfType<ArgumentException>(because: scenario.Id);
                    actuals.Select(_ => _.Message).AsTest().Must().Each().StartWith("Attempting to compare objects of different types.");
                }
            }
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced OBeautifulCode.CodeGen.ModelObject.Test.CodeGeneratorTest.GenerateDummyFactory()
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.Collections.Generic;

    using FakeItEasy;

    using OBeautifulCode.AutoFakeItEasy;

    public class DummyFactory : IDummyFactory
    {
        public DummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnly(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnlyChild1(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnlyChild2(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelGettersOnlyParent>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSetters(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSettersChild1(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSettersChild2(
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<DateTime?>(),
                                 A.Dummy<DateTime[]>(),
                                 A.Dummy<DateTime?[]>(),
                                 A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 A.Dummy<IReadOnlyList<DateTime>>(),
                                 A.Dummy<IReadOnlyList<DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()));


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelPrivateSettersParent>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSetters
                             {
                                 DateTimeProperty                                                                         = A.Dummy<DateTime>(),
                                 NullableDateTimeProperty                                                                 = A.Dummy<DateTime?>(),
                                 ArrayOfDateTimeProperty                                                                  = A.Dummy<DateTime[]>(),
                                 ArrayOfNullableDateTimeProperty                                                          = A.Dummy<DateTime?[]>(),
                                 ReadOnlyCollectionOfDateTimeProperty                                                     = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ReadOnlyCollectionOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ReadOnlyListOfDateTimeProperty                                                           = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ReadOnlyListOfNullableDateTimeProperty                                                   = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ReadOnlyDictionaryOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 ReadOnlyDictionaryOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty                           = A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSettersChild1
                             {
                                 ParentDateTimeProperty                                                                         = A.Dummy<DateTime>(),
                                 ParentNullableDateTimeProperty                                                                 = A.Dummy<DateTime?>(),
                                 ParentArrayOfDateTimeProperty                                                                  = A.Dummy<DateTime[]>(),
                                 ParentArrayOfNullableDateTimeProperty                                                          = A.Dummy<DateTime?[]>(),
                                 ParentReadOnlyCollectionOfDateTimeProperty                                                     = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyListOfDateTimeProperty                                                           = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListOfNullableDateTimeProperty                                                   = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyDictionaryOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 ParentReadOnlyDictionaryOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty                           = A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 Child1DateTimeProperty                                                                         = A.Dummy<DateTime>(),
                                 Child1NullableDateTimeProperty                                                                 = A.Dummy<DateTime?>(),
                                 Child1ArrayOfDateTimeProperty                                                                  = A.Dummy<DateTime[]>(),
                                 Child1ArrayOfNullableDateTimeProperty                                                          = A.Dummy<DateTime?[]>(),
                                 Child1ReadOnlyCollectionOfDateTimeProperty                                                     = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child1ReadOnlyCollectionOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child1ReadOnlyListOfDateTimeProperty                                                           = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child1ReadOnlyListOfNullableDateTimeProperty                                                   = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child1ReadOnlyDictionaryOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 Child1ReadOnlyDictionaryOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 Child1ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 Child1ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty                           = A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSettersChild2
                             {
                                 ParentDateTimeProperty                                                                         = A.Dummy<DateTime>(),
                                 ParentNullableDateTimeProperty                                                                 = A.Dummy<DateTime?>(),
                                 ParentArrayOfDateTimeProperty                                                                  = A.Dummy<DateTime[]>(),
                                 ParentArrayOfNullableDateTimeProperty                                                          = A.Dummy<DateTime?[]>(),
                                 ParentReadOnlyCollectionOfDateTimeProperty                                                     = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 ParentReadOnlyCollectionOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 ParentReadOnlyListOfDateTimeProperty                                                           = A.Dummy<IReadOnlyList<DateTime>>(),
                                 ParentReadOnlyListOfNullableDateTimeProperty                                                   = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 ParentReadOnlyDictionaryOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 ParentReadOnlyDictionaryOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 ParentReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 ParentReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty                           = A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>(),
                                 Child2DateTimeProperty                                                                         = A.Dummy<DateTime>(),
                                 Child2NullableDateTimeProperty                                                                 = A.Dummy<DateTime?>(),
                                 Child2ArrayOfDateTimeProperty                                                                  = A.Dummy<DateTime[]>(),
                                 Child2ArrayOfNullableDateTimeProperty                                                          = A.Dummy<DateTime?[]>(),
                                 Child2ReadOnlyCollectionOfDateTimeProperty                                                     = A.Dummy<IReadOnlyCollection<DateTime>>(),
                                 Child2ReadOnlyCollectionOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyCollection<DateTime?>>(),
                                 Child2ReadOnlyListOfDateTimeProperty                                                           = A.Dummy<IReadOnlyList<DateTime>>(),
                                 Child2ReadOnlyListOfNullableDateTimeProperty                                                   = A.Dummy<IReadOnlyList<DateTime?>>(),
                                 Child2ReadOnlyDictionaryOfDateTimeProperty                                                     = A.Dummy<IReadOnlyDictionary<DateTime, DateTime>>(),
                                 Child2ReadOnlyDictionaryOfNullableDateTimeProperty                                             = A.Dummy<IReadOnlyDictionary<DateTime?, DateTime?>>(),
                                 Child2ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = A.Dummy<IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>>>(),
                                 Child2ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty                           = A.Dummy<IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>>>()
                             });


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelPublicSettersParent>();
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}
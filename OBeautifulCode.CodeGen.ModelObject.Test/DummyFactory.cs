// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced OBeautifulCode.CodeGen.ModelObject.Test.CodeGeneratorTest.GenerateDummyFactory()
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.Collections.Generic;

    using FakeItEasy;

    using OBeautifulCode.AutoFakeItEasy;

    public class DummyFactory : IDummyFactory
    {
        public DummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnly(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnlyChild1(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelGettersOnlyChild2(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelGettersOnlyParent>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSetters(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSettersChild1(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPrivateSettersChild2(
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 A.Dummy<int>(),
                                 A.Dummy<string>(),
                                 A.Dummy<ModelEquatableClass>(),
                                 A.Dummy<IReadOnlyList<int>>(),
                                 A.Dummy<IReadOnlyList<string>>(),
                                 A.Dummy<IReadOnlyList<ModelEquatableClass>>()));


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelPrivateSettersParent>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSetters
                             {
                                 IntProperty                               = A.Dummy<int>(),
                                 StringProperty                            = A.Dummy<string>(),
                                 ModelEquatableClassProperty               = A.Dummy<ModelEquatableClass>(),
                                 ReadOnlyListOfIntProperty                 = A.Dummy<IReadOnlyList<int>>(),
                                 ReadOnlyListOfStringProperty              = A.Dummy<IReadOnlyList<string>>(),
                                 ReadOnlyListOfModelEquatableClassProperty = A.Dummy<IReadOnlyList<ModelEquatableClass>>()
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = A.Dummy<int>(),
                                 ParentStringProperty                            = A.Dummy<string>(),
                                 ParentModelEquatableClassProperty               = A.Dummy<ModelEquatableClass>(),
                                 ParentReadOnlyListOfIntProperty                 = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListOfStringProperty              = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 Child1IntProperty                               = A.Dummy<int>(),
                                 Child1StringProperty                            = A.Dummy<string>(),
                                 Child1ModelEquatableClassProperty               = A.Dummy<ModelEquatableClass>(),
                                 Child1ReadOnlyListOfIntProperty                 = A.Dummy<IReadOnlyList<int>>(),
                                 Child1ReadOnlyListOfStringProperty              = A.Dummy<IReadOnlyList<string>>(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = A.Dummy<IReadOnlyList<ModelEquatableClass>>()
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MyModelPublicSettersChild2
                             {
                                 ParentIntProperty                               = A.Dummy<int>(),
                                 ParentStringProperty                            = A.Dummy<string>(),
                                 ParentModelEquatableClassProperty               = A.Dummy<ModelEquatableClass>(),
                                 ParentReadOnlyListOfIntProperty                 = A.Dummy<IReadOnlyList<int>>(),
                                 ParentReadOnlyListOfStringProperty              = A.Dummy<IReadOnlyList<string>>(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = A.Dummy<IReadOnlyList<ModelEquatableClass>>(),
                                 Child2IntProperty                               = A.Dummy<int>(),
                                 Child2StringProperty                            = A.Dummy<string>(),
                                 Child2ModelEquatableClassProperty               = A.Dummy<ModelEquatableClass>(),
                                 Child2ReadOnlyListOfIntProperty                 = A.Dummy<IReadOnlyList<int>>(),
                                 Child2ReadOnlyListOfStringProperty              = A.Dummy<IReadOnlyList<string>>(),
                                 Child2ReadOnlyListOfModelEquatableClassProperty = A.Dummy<IReadOnlyList<ModelEquatableClass>>()
                             });


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<MyModelPublicSettersParent>();
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}
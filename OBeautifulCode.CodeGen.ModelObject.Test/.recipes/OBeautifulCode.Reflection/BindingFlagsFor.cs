// --------------------------------------------------------------------------------------------------------------------
// <copyright file="BindingFlagsFor.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Reflection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using global::System.Reflection;
    using global::System.Diagnostics.CodeAnalysis;

    /// <summary>
    /// Contains some pre-configured <see cref="BindingFlags"/>.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "This type is a container for BindingFlags, so using the term 'Flags' is appropriate here.")]
#if !OBeautifulCodeReflectionSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Reflection.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class BindingFlagsFor
    {
        /// <summary>
        /// Finds public instance (not static) members that are declared at the level of the supplied type's hierarchy (not inherited).
        /// </summary>
        public static readonly BindingFlags DeclaredButNotInheritedPublicInstanceMembers = BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly;

        /// <summary>
        /// Finds public instance (not static) members that are declared at the level of the supplied type's hierarchy or inherited.
        /// </summary>
        /// <remarks>
        /// Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
        /// </remarks>
        public static readonly BindingFlags DeclaredAndInheritedPublicInstanceMembers = BindingFlags.Instance | BindingFlags.Public;
    }
}

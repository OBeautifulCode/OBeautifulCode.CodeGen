// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelPublicSetGeneric<TFirst, TSecond> : IModel<ModelPublicSetGeneric<TFirst, TSecond>>, IComparableForRelativeSortOrder<ModelPublicSetGeneric<TFirst, TSecond>>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelPublicSetGeneric<TFirst, TSecond> other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.StringProperty.IsEqualTo(other.StringProperty, StringComparer.Ordinal)
                      && this.IntProperty.IsEqualTo(other.IntProperty)
                      && this.EnumProperty.IsEqualTo(other.EnumProperty)
                      && this.ClassProperty.IsEqualTo(other.ClassProperty)
                      && this.GenericProperty.IsEqualTo(other.GenericProperty)
                      && this.ArrayProperty.IsEqualTo(other.ArrayProperty)
                      && this.NullableProperty.IsEqualTo(other.NullableProperty)
                      && this.GenericClassProperty.IsEqualTo(other.GenericClassProperty)
                      && this.ReadOnlyCollectionProperty.IsEqualTo(other.ReadOnlyCollectionProperty)
                      && this.ReadOnlyListProperty.IsEqualTo(other.ReadOnlyListProperty)
                      && this.ClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ClosedReadOnlyDictionaryProperty1)
                      && this.ClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ClosedReadOnlyDictionaryProperty2)
                      && this.PartiallyOpenReadOnlyDictionaryProperty1.IsEqualTo(other.PartiallyOpenReadOnlyDictionaryProperty1)
                      && this.PartiallyOpenReadOnlyDictionaryProperty2.IsEqualTo(other.PartiallyOpenReadOnlyDictionaryProperty2);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelPublicSetGeneric<TFirst, TSecond>);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> is less than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than operator.</param>
        /// <param name="right">The object to the right of the less-than operator.</param>
        /// <returns>true if <paramref name="left"/> is less than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return true;
            }

            if (ReferenceEquals(right, null))
            {
                return false;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstancePrecedesTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> is greater than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than operator.</param>
        /// <param name="right">The object to the right of the greater-than operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return false;
            }

            if (ReferenceEquals(right, null))
            {
                return true;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> is less than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the less-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <=(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right) => !(left > right);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGeneric{TFirst, TSecond}"/> is greater than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the greater-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >=(ModelPublicSetGeneric<TFirst, TSecond> left, ModelPublicSetGeneric<TFirst, TSecond> right) => !(left < right);

        /// <inheritdoc />
        public int CompareTo(ModelPublicSetGeneric<TFirst, TSecond> other)
        {
            if (ReferenceEquals(other, null))
            {
                return 1;
            }

            var relativeSortOrder = this.CompareToForRelativeSortOrder(other);

            switch(relativeSortOrder)
            {
                case RelativeSortOrder.ThisInstancePrecedesTheOtherInstance:
                    return -1;
                case RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance:
                    return 0;
                case RelativeSortOrder.ThisInstanceFollowsTheOtherInstance:
                    return 1;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(RelativeSortOrder)} is not supported: {relativeSortOrder}."));
            }
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if (ReferenceEquals(obj, null))
            {
                return 1;
            }

            if (!(obj is ModelPublicSetGeneric<TFirst, TSecond> other))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPublicSetGeneric<TFirst, TSecond>' whereas the other object is of type '{obj.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareTo(other);

            return result;
        }

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.StringProperty)
            .Hash(this.IntProperty)
            .Hash(this.EnumProperty)
            .Hash(this.ClassProperty)
            .Hash(this.GenericProperty)
            .Hash(this.ArrayProperty)
            .Hash(this.NullableProperty)
            .Hash(this.GenericClassProperty)
            .Hash(this.ReadOnlyCollectionProperty)
            .Hash(this.ReadOnlyListProperty)
            .Hash(this.ClosedReadOnlyDictionaryProperty1)
            .Hash(this.ClosedReadOnlyDictionaryProperty2)
            .Hash(this.PartiallyOpenReadOnlyDictionaryProperty1)
            .Hash(this.PartiallyOpenReadOnlyDictionaryProperty2)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public ModelPublicSetGeneric<TFirst, TSecond> DeepClone()
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="StringProperty" />.
        /// </summary>
        /// <param name="stringProperty">The new <see cref="StringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="stringProperty" /> for <see cref="StringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithStringProperty(string stringProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = stringProperty,
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="IntProperty" />.
        /// </summary>
        /// <param name="intProperty">The new <see cref="IntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="intProperty" /> for <see cref="IntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithIntProperty(int intProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = intProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="EnumProperty" />.
        /// </summary>
        /// <param name="enumProperty">The new <see cref="EnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="enumProperty" /> for <see cref="EnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithEnumProperty(CustomEnum enumProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = enumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ClassProperty" />.
        /// </summary>
        /// <param name="classProperty">The new <see cref="ClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="classProperty" /> for <see cref="ClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithClassProperty(CustomClass classProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = classProperty,
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="GenericProperty" />.
        /// </summary>
        /// <param name="genericProperty">The new <see cref="GenericProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="genericProperty" /> for <see cref="GenericProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithGenericProperty(TFirst genericProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = genericProperty,
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ArrayProperty" />.
        /// </summary>
        /// <param name="arrayProperty">The new <see cref="ArrayProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="arrayProperty" /> for <see cref="ArrayProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithArrayProperty(TFirst[] arrayProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = arrayProperty,
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="NullableProperty" />.
        /// </summary>
        /// <param name="nullableProperty">The new <see cref="NullableProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="nullableProperty" /> for <see cref="NullableProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithNullableProperty(Nullable<TSecond> nullableProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = nullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="GenericClassProperty" />.
        /// </summary>
        /// <param name="genericClassProperty">The new <see cref="GenericClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="genericClassProperty" /> for <see cref="GenericClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithGenericClassProperty(CustomGenericClass<TSecond> genericClassProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = genericClassProperty,
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionProperty">The new <see cref="ReadOnlyCollectionProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="readOnlyCollectionProperty" /> for <see cref="ReadOnlyCollectionProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithReadOnlyCollectionProperty(IReadOnlyCollection<TFirst> readOnlyCollectionProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = readOnlyCollectionProperty,
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListProperty" />.
        /// </summary>
        /// <param name="readOnlyListProperty">The new <see cref="ReadOnlyListProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="readOnlyListProperty" /> for <see cref="ReadOnlyListProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithReadOnlyListProperty(IReadOnlyList<TFirst> readOnlyListProperty)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = readOnlyListProperty,
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ClosedReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="closedReadOnlyDictionaryProperty1">The new <see cref="ClosedReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="closedReadOnlyDictionaryProperty1" /> for <see cref="ClosedReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<TFirst, TSecond> closedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = closedReadOnlyDictionaryProperty1,
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ClosedReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="closedReadOnlyDictionaryProperty2">The new <see cref="ClosedReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="closedReadOnlyDictionaryProperty2" /> for <see cref="ClosedReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<TSecond, TFirst> closedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = closedReadOnlyDictionaryProperty2,
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="PartiallyOpenReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="partiallyOpenReadOnlyDictionaryProperty1">The new <see cref="PartiallyOpenReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="partiallyOpenReadOnlyDictionaryProperty1" /> for <see cref="PartiallyOpenReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithPartiallyOpenReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, TSecond> partiallyOpenReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = partiallyOpenReadOnlyDictionaryProperty1,
                                 PartiallyOpenReadOnlyDictionaryProperty2 = this.PartiallyOpenReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="PartiallyOpenReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="partiallyOpenReadOnlyDictionaryProperty2">The new <see cref="PartiallyOpenReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGeneric{TFirst, TSecond}" /> using the specified <paramref name="partiallyOpenReadOnlyDictionaryProperty2" /> for <see cref="PartiallyOpenReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGeneric<TFirst, TSecond> DeepCloneWithPartiallyOpenReadOnlyDictionaryProperty2(IReadOnlyDictionary<TFirst, string> partiallyOpenReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetGeneric<TFirst, TSecond>
                             {
                                 StringProperty                           = this.StringProperty?.Clone().ToString(),
                                 IntProperty                              = this.IntProperty,
                                 EnumProperty                             = this.EnumProperty,
                                 ClassProperty                            = this.ClassProperty?.DeepClone(),
                                 GenericProperty                          = DeepCloneGeneric(this.GenericProperty),
                                 ArrayProperty                            = this.ArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 NullableProperty                         = this.NullableProperty,
                                 GenericClassProperty                     = this.GenericClassProperty?.DeepClone(),
                                 ReadOnlyCollectionProperty               = this.ReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ReadOnlyListProperty                     = this.ReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 ClosedReadOnlyDictionaryProperty1        = this.ClosedReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 ClosedReadOnlyDictionaryProperty2        = this.ClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 PartiallyOpenReadOnlyDictionaryProperty1 = this.PartiallyOpenReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 PartiallyOpenReadOnlyDictionaryProperty2 = partiallyOpenReadOnlyDictionaryProperty2,
                             };

            return result;
        }

        private TFirst DeepCloneGeneric(TFirst value)
        {
            TFirst result;

            var type = typeof(TFirst);

            if (type.IsValueType)
            {
                result = value;
            }
            else
            {
                if (ReferenceEquals(value, null))
                {
                    result = default;
                }
                else if (value is IDeepCloneable<TFirst> deepCloneableValue)
                {
                    result = deepCloneableValue.DeepClone();
                }
                else if (value is string stringValue)
                {
                    result = (TFirst)(object)stringValue.Clone().ToString();
                }
                else
                {
                    throw new NotSupportedException(Invariant($"I do not know how to deep clone an object of type '{type.ToStringReadable()}'"));
                }
            }

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPublicSetGeneric<TFirst, TSecond>: StringProperty = {this.StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, IntProperty = {this.IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, EnumProperty = {this.EnumProperty.ToString() ?? "<null>"}, ClassProperty = {this.ClassProperty?.ToString() ?? "<null>"}, GenericProperty = {this.GenericProperty?.ToString() ?? "<null>"}, ArrayProperty = {this.ArrayProperty?.ToString() ?? "<null>"}, NullableProperty = {this.NullableProperty?.ToString() ?? "<null>"}, GenericClassProperty = {this.GenericClassProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionProperty = {this.ReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ReadOnlyListProperty = {this.ReadOnlyListProperty?.ToString() ?? "<null>"}, ClosedReadOnlyDictionaryProperty1 = {this.ClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ClosedReadOnlyDictionaryProperty2 = {this.ClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, PartiallyOpenReadOnlyDictionaryProperty1 = {this.PartiallyOpenReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, PartiallyOpenReadOnlyDictionaryProperty2 = {this.PartiallyOpenReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> : IModel<ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>>, IComparableForRelativeSortOrder<ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right) => !(left == right);

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public bool Equals(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var genericArgumentsUsedAsKeyInDictionary = new[] { typeof(TFirst), typeof(TSecond) };

            if (genericArgumentsUsedAsKeyInDictionary.Any(_ => (_ == typeof(DateTime)) || (_ == typeof(DateTime?))))
            {
                throw new NotSupportedException("This model contains one or more properties that are OR have within their generic argument tree or array element type a System Dictionary that is keyed on DateTime or DateTime?; IsEqualTo may do the wrong thing when comparing the keys of two such dictionaries (because it uses dictionary's embedded equality comparer, which is most likely the default comparer, which determines two DateTime objects to be equal if they have the same Ticks, regardless of whether they have the same Kind).");
            }

            var result = this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentEnumProperty.IsEqualTo(other.ParentEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.ParentArrayProperty.IsEqualTo(other.ParentArrayProperty)
                      && this.ParentNullableProperty.IsEqualTo(other.ParentNullableProperty)
                      && this.ParentCustomGenericClassProperty.IsEqualTo(other.ParentCustomGenericClassProperty)
                      && this.ParentReadOnlyCollectionProperty.IsEqualTo(other.ParentReadOnlyCollectionProperty)
                      && this.ParentReadOnlyDictionaryProperty.IsEqualTo(other.ParentReadOnlyDictionaryProperty)
                      && this.ChildStringProperty.IsEqualTo(other.ChildStringProperty, StringComparer.Ordinal)
                      && this.ChildIntProperty.IsEqualTo(other.ChildIntProperty)
                      && this.ChildEnumProperty.IsEqualTo(other.ChildEnumProperty)
                      && this.ChildClassProperty.IsEqualTo(other.ChildClassProperty)
                      && this.ChildGenericArgumentProperty.IsEqualTo(other.ChildGenericArgumentProperty)
                      && this.ChildGenericArrayProperty.IsEqualTo(other.ChildGenericArrayProperty)
                      && this.ChildGenericNullableProperty.IsEqualTo(other.ChildGenericNullableProperty)
                      && this.ChildGenericCustomGenericClassProperty.IsEqualTo(other.ChildGenericCustomGenericClassProperty)
                      && this.ChildGenericReadOnlyCollectionProperty.IsEqualTo(other.ChildGenericReadOnlyCollectionProperty)
                      && this.ChildGenericReadOnlyListProperty.IsEqualTo(other.ChildGenericReadOnlyListProperty)
                      && this.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(other.ChildGenericReadOnlyDictionaryProperty1)
                      && this.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(other.ChildGenericReadOnlyDictionaryProperty2)
                      && this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)
                      && this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> is less than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than operator.</param>
        /// <param name="right">The object to the right of the less-than operator.</param>
        /// <returns>true if <paramref name="left"/> is less than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return true;
            }

            if (ReferenceEquals(right, null))
            {
                return false;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstancePrecedesTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> is greater than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than operator.</param>
        /// <param name="right">The object to the right of the greater-than operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return false;
            }

            if (ReferenceEquals(right, null))
            {
                return true;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> is less than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the less-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <=(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right) => !(left > right);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}"/> is greater than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the greater-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >=(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> left, ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> right) => !(left < right);

        /// <inheritdoc />
        public int CompareTo(ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> other)
        {
            if (ReferenceEquals(other, null))
            {
                return 1;
            }

            var relativeSortOrder = this.CompareToForRelativeSortOrder(other);

            switch(relativeSortOrder)
            {
                case RelativeSortOrder.ThisInstancePrecedesTheOtherInstance:
                    return -1;
                case RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance:
                    return 0;
                case RelativeSortOrder.ThisInstanceFollowsTheOtherInstance:
                    return 1;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(RelativeSortOrder)} is not supported: {relativeSortOrder}."));
            }
        }

        /// <inheritdoc />
        public override int CompareTo(object obj)
        {
            if (ReferenceEquals(obj, null))
            {
                return 1;
            }

            if (!(obj is ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> other))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>' whereas the other object is of type '{obj.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareTo(other);

            return result;
        }

        /// <inheritdoc />
        public override RelativeSortOrder CompareToForRelativeSortOrder(ModelPublicSetNonGenericParent other)
        {
            if (ReferenceEquals(other, null))
            {
                return RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;
            }

            if (!(other is ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> otherAsModelPublicSetNonGenericParentGenericChild))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>' whereas the other object is of type '{other.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareToForRelativeSortOrder(otherAsModelPublicSetNonGenericParentGenericChild);

            return result;
        }

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.ParentArrayProperty)
            .Hash(this.ParentNullableProperty)
            .Hash(this.ParentCustomGenericClassProperty)
            .Hash(this.ParentReadOnlyCollectionProperty)
            .Hash(this.ParentReadOnlyDictionaryProperty)
            .Hash(this.ChildStringProperty)
            .Hash(this.ChildIntProperty)
            .Hash(this.ChildEnumProperty)
            .Hash(this.ChildClassProperty)
            .Hash(this.ChildGenericArgumentProperty)
            .Hash(this.ChildGenericArrayProperty)
            .Hash(this.ChildGenericNullableProperty)
            .Hash(this.ChildGenericCustomGenericClassProperty)
            .Hash(this.ChildGenericReadOnlyCollectionProperty)
            .Hash(this.ChildGenericReadOnlyListProperty)
            .Hash(this.ChildGenericReadOnlyDictionaryProperty1)
            .Hash(this.ChildGenericReadOnlyDictionaryProperty2)
            .Hash(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)
            .Hash(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2)
            .Value;

        /// <inheritdoc />
        public new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepClone() => (ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = parentStringProperty,
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = parentIntProperty,
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentEnumProperty(CustomEnum parentEnumProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = parentEnumProperty,
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = parentCustomClassProperty,
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentArrayProperty(string[] parentArrayProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = parentArrayProperty,
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentNullableProperty(decimal? parentNullableProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = parentNullableProperty,
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentCustomGenericClassProperty(CustomGenericClass<string> parentCustomGenericClassProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = parentCustomGenericClassProperty,
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentReadOnlyCollectionProperty(IReadOnlyCollection<string> parentReadOnlyCollectionProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = parentReadOnlyCollectionProperty,
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetNonGenericParent DeepCloneWithParentReadOnlyDictionaryProperty(IReadOnlyDictionary<string, string> parentReadOnlyDictionaryProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = parentReadOnlyDictionaryProperty,
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildStringProperty" />.
        /// </summary>
        /// <param name="childStringProperty">The new <see cref="ChildStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childStringProperty" /> for <see cref="ChildStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildStringProperty(string childStringProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = childStringProperty,
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildIntProperty" />.
        /// </summary>
        /// <param name="childIntProperty">The new <see cref="ChildIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childIntProperty" /> for <see cref="ChildIntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildIntProperty(int childIntProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = childIntProperty,
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildEnumProperty" />.
        /// </summary>
        /// <param name="childEnumProperty">The new <see cref="ChildEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childEnumProperty" /> for <see cref="ChildEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildEnumProperty(CustomEnum childEnumProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = childEnumProperty,
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildClassProperty" />.
        /// </summary>
        /// <param name="childClassProperty">The new <see cref="ChildClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childClassProperty" /> for <see cref="ChildClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildClassProperty(CustomClass childClassProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = childClassProperty,
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericArgumentProperty" />.
        /// </summary>
        /// <param name="childGenericArgumentProperty">The new <see cref="ChildGenericArgumentProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericArgumentProperty" /> for <see cref="ChildGenericArgumentProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericArgumentProperty(TFirst childGenericArgumentProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = childGenericArgumentProperty,
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericArrayProperty" />.
        /// </summary>
        /// <param name="childGenericArrayProperty">The new <see cref="ChildGenericArrayProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericArrayProperty" /> for <see cref="ChildGenericArrayProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericArrayProperty(TFirst[] childGenericArrayProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = childGenericArrayProperty,
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericNullableProperty" />.
        /// </summary>
        /// <param name="childGenericNullableProperty">The new <see cref="ChildGenericNullableProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericNullableProperty" /> for <see cref="ChildGenericNullableProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericNullableProperty(Nullable<TSecond> childGenericNullableProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = childGenericNullableProperty,
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericCustomGenericClassProperty" />.
        /// </summary>
        /// <param name="childGenericCustomGenericClassProperty">The new <see cref="ChildGenericCustomGenericClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericCustomGenericClassProperty" /> for <see cref="ChildGenericCustomGenericClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericCustomGenericClassProperty(CustomGenericClass<TSecond> childGenericCustomGenericClassProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = childGenericCustomGenericClassProperty,
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyCollectionProperty" />.
        /// </summary>
        /// <param name="childGenericReadOnlyCollectionProperty">The new <see cref="ChildGenericReadOnlyCollectionProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericReadOnlyCollectionProperty" /> for <see cref="ChildGenericReadOnlyCollectionProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericReadOnlyCollectionProperty(IReadOnlyCollection<TFirst> childGenericReadOnlyCollectionProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = childGenericReadOnlyCollectionProperty,
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyListProperty" />.
        /// </summary>
        /// <param name="childGenericReadOnlyListProperty">The new <see cref="ChildGenericReadOnlyListProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericReadOnlyListProperty" /> for <see cref="ChildGenericReadOnlyListProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericReadOnlyListProperty(IReadOnlyList<TFirst> childGenericReadOnlyListProperty)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = childGenericReadOnlyListProperty,
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="childGenericReadOnlyDictionaryProperty1">The new <see cref="ChildGenericReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericReadOnlyDictionaryProperty1" /> for <see cref="ChildGenericReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericReadOnlyDictionaryProperty1(IReadOnlyDictionary<TFirst, TSecond> childGenericReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = childGenericReadOnlyDictionaryProperty1,
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="childGenericReadOnlyDictionaryProperty2">The new <see cref="ChildGenericReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericReadOnlyDictionaryProperty2" /> for <see cref="ChildGenericReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericReadOnlyDictionaryProperty2(IReadOnlyDictionary<TSecond, TFirst> childGenericReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = childGenericReadOnlyDictionaryProperty2,
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="childGenericPartiallyClosedReadOnlyDictionaryProperty1">The new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericPartiallyClosedReadOnlyDictionaryProperty1" /> for <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, TSecond> childGenericPartiallyClosedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = childGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="childGenericPartiallyClosedReadOnlyDictionaryProperty2">The new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetNonGenericParentGenericChild{TFirst, TSecond}" /> using the specified <paramref name="childGenericPartiallyClosedReadOnlyDictionaryProperty2" /> for <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond> DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<TFirst, string> childGenericPartiallyClosedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = childGenericPartiallyClosedReadOnlyDictionaryProperty2,
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        protected override ModelPublicSetNonGenericParent DeepCloneInternal()
        {
            var result = new ModelPublicSetNonGenericParentGenericChild<TFirst, TSecond>
                             {
                                 ParentStringProperty                                   = this.ParentStringProperty?.DeepClone(),
                                 ParentIntProperty                                      = this.ParentIntProperty.DeepClone(),
                                 ParentEnumProperty                                     = this.ParentEnumProperty.DeepClone(),
                                 ParentCustomClassProperty                              = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentArrayProperty                                    = this.ParentArrayProperty?.DeepClone(),
                                 ParentNullableProperty                                 = this.ParentNullableProperty?.DeepClone(),
                                 ParentCustomGenericClassProperty                       = this.ParentCustomGenericClassProperty?.DeepClone(),
                                 ParentReadOnlyCollectionProperty                       = this.ParentReadOnlyCollectionProperty?.DeepClone(),
                                 ParentReadOnlyDictionaryProperty                       = this.ParentReadOnlyDictionaryProperty?.DeepClone(),
                                 ChildStringProperty                                    = this.ChildStringProperty?.DeepClone(),
                                 ChildIntProperty                                       = this.ChildIntProperty.DeepClone(),
                                 ChildEnumProperty                                      = this.ChildEnumProperty.DeepClone(),
                                 ChildClassProperty                                     = this.ChildClassProperty?.DeepClone(),
                                 ChildGenericArgumentProperty                           = this.ChildGenericArgumentProperty == null ? default : this.ChildGenericArgumentProperty.DeepClone(),
                                 ChildGenericArrayProperty                              = this.ChildGenericArrayProperty?.DeepClone(),
                                 ChildGenericNullableProperty                           = this.ChildGenericNullableProperty?.DeepClone(),
                                 ChildGenericCustomGenericClassProperty                 = this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 ChildGenericReadOnlyCollectionProperty                 = this.ChildGenericReadOnlyCollectionProperty?.DeepClone(),
                                 ChildGenericReadOnlyListProperty                       = this.ChildGenericReadOnlyListProperty?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty1                = this.ChildGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericReadOnlyDictionaryProperty2                = this.ChildGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.{this.GetType().ToStringReadable()}: ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {this.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentArrayProperty = {this.ParentArrayProperty?.ToString() ?? "<null>"}, ParentNullableProperty = {this.ParentNullableProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomGenericClassProperty = {this.ParentCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyCollectionProperty = {this.ParentReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentReadOnlyDictionaryProperty = {this.ParentReadOnlyDictionaryProperty?.ToString() ?? "<null>"}, ChildStringProperty = {this.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {this.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {this.ChildEnumProperty.ToString() ?? "<null>"}, ChildClassProperty = {this.ChildClassProperty?.ToString() ?? "<null>"}, ChildGenericArgumentProperty = {this.ChildGenericArgumentProperty?.ToString() ?? "<null>"}, ChildGenericArrayProperty = {this.ChildGenericArrayProperty?.ToString() ?? "<null>"}, ChildGenericNullableProperty = {this.ChildGenericNullableProperty?.ToString() ?? "<null>"}, ChildGenericCustomGenericClassProperty = {this.ChildGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyCollectionProperty = {this.ChildGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyListProperty = {this.ChildGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty1 = {this.ChildGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty2 = {this.ChildGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = {this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = {this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}.");

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override IReadOnlyList<ValidationFailure> GetValidationFailures(
            ValidationOptions options = null,
            PropertyPathTracker propertyPathTracker = null)
        {
            options = options ?? new ValidationOptions();
            propertyPathTracker = propertyPathTracker ?? new PropertyPathTracker();

            bool stopOnFirstObjectWithFailures;
            switch (options.ValidateUntil)
            {
                case ValidateUntil.FullyTraversed:
                    stopOnFirstObjectWithFailures = false;
                    break;
                case ValidateUntil.FirstInvalidObject:
                    stopOnFirstObjectWithFailures = true;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidateUntil)} is not supported: {options.ValidateUntil}."));
            }

            bool validateProperties;
            switch (options.ValidationScope)
            {
                case ValidationScope.SelfAndProperties:
                    validateProperties = true;
                    break;
                case ValidationScope.SelfOnly:
                    validateProperties = false;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidationScope)} is not supported: {options.ValidationScope}."));
            }

            var result = new List<ValidationFailure>();

            void ValidateProperties()
            {
                IReadOnlyList<ValidationFailure> localValidationFailures;

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentStringProperty, options, propertyPathTracker, nameof(this.ParentStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentIntProperty, options, propertyPathTracker, nameof(this.ParentIntProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentEnumProperty, options, propertyPathTracker, nameof(this.ParentEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentCustomClassProperty, options, propertyPathTracker, nameof(this.ParentCustomClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentArrayProperty, options, propertyPathTracker, nameof(this.ParentArrayProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentNullableProperty, options, propertyPathTracker, nameof(this.ParentNullableProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentCustomGenericClassProperty, options, propertyPathTracker, nameof(this.ParentCustomGenericClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentReadOnlyCollectionProperty, options, propertyPathTracker, nameof(this.ParentReadOnlyCollectionProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentReadOnlyDictionaryProperty, options, propertyPathTracker, nameof(this.ParentReadOnlyDictionaryProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildStringProperty, options, propertyPathTracker, nameof(this.ChildStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildIntProperty, options, propertyPathTracker, nameof(this.ChildIntProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildEnumProperty, options, propertyPathTracker, nameof(this.ChildEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildClassProperty, options, propertyPathTracker, nameof(this.ChildClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericArgumentProperty, options, propertyPathTracker, nameof(this.ChildGenericArgumentProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericArrayProperty, options, propertyPathTracker, nameof(this.ChildGenericArrayProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericNullableProperty, options, propertyPathTracker, nameof(this.ChildGenericNullableProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericCustomGenericClassProperty, options, propertyPathTracker, nameof(this.ChildGenericCustomGenericClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericReadOnlyCollectionProperty, options, propertyPathTracker, nameof(this.ChildGenericReadOnlyCollectionProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericReadOnlyListProperty, options, propertyPathTracker, nameof(this.ChildGenericReadOnlyListProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericReadOnlyDictionaryProperty1, options, propertyPathTracker, nameof(this.ChildGenericReadOnlyDictionaryProperty1));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericReadOnlyDictionaryProperty2, options, propertyPathTracker, nameof(this.ChildGenericReadOnlyDictionaryProperty2));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1, options, propertyPathTracker, nameof(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2, options, propertyPathTracker, nameof(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }
            }

            void ValidateSelf()
            {
                var segmentSeparator = propertyPathTracker.HasSegments ? propertyPathTracker.SegmentSeparator : string.Empty;

                var selfValidationFailures = (this.GetSelfValidationFailures() ?? new SelfValidationFailure[0])
                    .Where(_ => _ != null)
                    .Select(_ =>
                    {
                        var propertyNames = _.PropertyNames.Count > 1
                            ? Invariant($"({string.Join("|", _.PropertyNames)})")
                            : _.PropertyNames.Single();

                        return new ValidationFailure(
                            this.GetType().ToStringReadable(),
                            Invariant($"{propertyPathTracker.FullPath}{segmentSeparator}{propertyNames}"),
                            _.Message);
                    })
                    .ToList();

                result.AddRange(selfValidationFailures);
            }

            if (options.ValidationOrder == ValidationOrder.PropertiesThenSelf)
            {
                if (validateProperties)
                {
                    ValidateProperties();
                }

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                ValidateSelf();
            }
            else if (options.ValidationOrder == ValidationOrder.SelfThenProperties)
            {
                ValidateSelf();

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                if (validateProperties)
                {
                    ValidateProperties();
                }
            }
            else
            {
                throw new NotSupportedException(Invariant($"This {nameof(ValidationOrder)} is not supported: {options.ValidationOrder}."));
            }

            return result;
        }

        /// <inheritdoc />
        public override IReadOnlyList<SelfValidationFailure> GetSelfValidationFailures()
        {
            var result = base.GetSelfValidationFailures();

            return result;
        }
    }
}
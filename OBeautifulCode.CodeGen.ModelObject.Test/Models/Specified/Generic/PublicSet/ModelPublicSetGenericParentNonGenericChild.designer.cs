// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelPublicSetGenericParentNonGenericChild : IModel<ModelPublicSetGenericParentNonGenericChild>, IComparableForRelativeSortOrder<ModelPublicSetGenericParentNonGenericChild>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelPublicSetGenericParentNonGenericChild other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentEnumProperty.IsEqualTo(other.ParentEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.ParentGenericArgumentProperty.IsEqualTo(other.ParentGenericArgumentProperty)
                      && this.ParentGenericArrayProperty.IsEqualTo(other.ParentGenericArrayProperty)
                      && this.ParentGenericNullableProperty.IsEqualTo(other.ParentGenericNullableProperty)
                      && this.ParentGenericCustomGenericClassProperty.IsEqualTo(other.ParentGenericCustomGenericClassProperty)
                      && this.ParentGenericReadOnlyCollectionProperty.IsEqualTo(other.ParentGenericReadOnlyCollectionProperty)
                      && this.ParentGenericReadOnlyListProperty.IsEqualTo(other.ParentGenericReadOnlyListProperty)
                      && this.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty1)
                      && this.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty2)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
                      && this.ChildStringProperty.IsEqualTo(other.ChildStringProperty, StringComparer.Ordinal)
                      && this.ChildIntProperty.IsEqualTo(other.ChildIntProperty)
                      && this.ChildEnumProperty.IsEqualTo(other.ChildEnumProperty)
                      && this.ChildCustomClassProperty.IsEqualTo(other.ChildCustomClassProperty)
                      && this.ChildArrayProperty.IsEqualTo(other.ChildArrayProperty)
                      && this.ChildNullableProperty.IsEqualTo(other.ChildNullableProperty)
                      && this.ChildCustomGenericClassProperty.IsEqualTo(other.ChildCustomGenericClassProperty)
                      && this.ChildReadOnlyCollectionProperty.IsEqualTo(other.ChildReadOnlyCollectionProperty)
                      && this.ChildReadOnlyDictionaryProperty.IsEqualTo(other.ChildReadOnlyDictionaryProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelPublicSetGenericParentNonGenericChild);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> is less than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than operator.</param>
        /// <param name="right">The object to the right of the less-than operator.</param>
        /// <returns>true if <paramref name="left"/> is less than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return true;
            }

            if (ReferenceEquals(right, null))
            {
                return false;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstancePrecedesTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> is greater than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than operator.</param>
        /// <param name="right">The object to the right of the greater-than operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return false;
            }

            if (ReferenceEquals(right, null))
            {
                return true;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> is less than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the less-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <=(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right) => !(left > right);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPublicSetGenericParentNonGenericChild"/> is greater than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the greater-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >=(ModelPublicSetGenericParentNonGenericChild left, ModelPublicSetGenericParentNonGenericChild right) => !(left < right);

        /// <inheritdoc />
        public int CompareTo(ModelPublicSetGenericParentNonGenericChild other)
        {
            if (ReferenceEquals(other, null))
            {
                return 1;
            }

            var relativeSortOrder = this.CompareToForRelativeSortOrder(other);

            switch(relativeSortOrder)
            {
                case RelativeSortOrder.ThisInstancePrecedesTheOtherInstance:
                    return -1;
                case RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance:
                    return 0;
                case RelativeSortOrder.ThisInstanceFollowsTheOtherInstance:
                    return 1;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(RelativeSortOrder)} is not supported: {relativeSortOrder}."));
            }
        }

        /// <inheritdoc />
        public override int CompareTo(object obj)
        {
            if (ReferenceEquals(obj, null))
            {
                return 1;
            }

            if (!(obj is ModelPublicSetGenericParentNonGenericChild other))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPublicSetGenericParentNonGenericChild' whereas the other object is of type '{obj.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareTo(other);

            return result;
        }

        /// <inheritdoc />
        public override RelativeSortOrder CompareToForRelativeSortOrder(ModelPublicSetGenericParent<CustomClass, Guid> other)
        {
            if (ReferenceEquals(other, null))
            {
                return RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;
            }

            if (!(other is ModelPublicSetGenericParentNonGenericChild otherAsModelPublicSetGenericParentNonGenericChild))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPublicSetGenericParentNonGenericChild' whereas the other object is of type '{other.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareToForRelativeSortOrder(otherAsModelPublicSetGenericParentNonGenericChild);

            return result;
        }

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.ParentGenericArgumentProperty)
            .Hash(this.ParentGenericArrayProperty)
            .Hash(this.ParentGenericNullableProperty)
            .Hash(this.ParentGenericCustomGenericClassProperty)
            .Hash(this.ParentGenericReadOnlyCollectionProperty)
            .Hash(this.ParentGenericReadOnlyListProperty)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty2)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
            .Hash(this.ChildStringProperty)
            .Hash(this.ChildIntProperty)
            .Hash(this.ChildEnumProperty)
            .Hash(this.ChildCustomClassProperty)
            .Hash(this.ChildArrayProperty)
            .Hash(this.ChildNullableProperty)
            .Hash(this.ChildCustomGenericClassProperty)
            .Hash(this.ChildReadOnlyCollectionProperty)
            .Hash(this.ChildReadOnlyDictionaryProperty)
            .Value;

        /// <inheritdoc />
        public new ModelPublicSetGenericParentNonGenericChild DeepClone() => (ModelPublicSetGenericParentNonGenericChild)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = parentStringProperty,
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = parentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentEnumProperty(CustomEnum parentEnumProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = parentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = parentCustomClassProperty,
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericArgumentProperty(CustomClass parentGenericArgumentProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = parentGenericArgumentProperty,
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericArrayProperty(CustomClass[] parentGenericArrayProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = parentGenericArrayProperty,
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericNullableProperty(Guid? parentGenericNullableProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = parentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericCustomGenericClassProperty(CustomGenericClass<Guid> parentGenericCustomGenericClassProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = parentGenericCustomGenericClassProperty,
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyCollectionProperty(IReadOnlyCollection<CustomClass> parentGenericReadOnlyCollectionProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = parentGenericReadOnlyCollectionProperty,
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyListProperty(IReadOnlyList<CustomClass> parentGenericReadOnlyListProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = parentGenericReadOnlyListProperty,
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty1(IReadOnlyDictionary<CustomClass, Guid> parentGenericReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = parentGenericReadOnlyDictionaryProperty1,
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty2(IReadOnlyDictionary<Guid, CustomClass> parentGenericReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = parentGenericReadOnlyDictionaryProperty2,
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, Guid> parentGenericPartiallyClosedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = parentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<CustomClass, string> parentGenericPartiallyClosedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = parentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildStringProperty" />.
        /// </summary>
        /// <param name="childStringProperty">The new <see cref="ChildStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childStringProperty" /> for <see cref="ChildStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildStringProperty(string childStringProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = childStringProperty,
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildIntProperty" />.
        /// </summary>
        /// <param name="childIntProperty">The new <see cref="ChildIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childIntProperty" /> for <see cref="ChildIntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildIntProperty(int childIntProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = childIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildEnumProperty" />.
        /// </summary>
        /// <param name="childEnumProperty">The new <see cref="ChildEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childEnumProperty" /> for <see cref="ChildEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildEnumProperty(CustomEnum childEnumProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = childEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildCustomClassProperty" />.
        /// </summary>
        /// <param name="childCustomClassProperty">The new <see cref="ChildCustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childCustomClassProperty" /> for <see cref="ChildCustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildCustomClassProperty(CustomClass childCustomClassProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = childCustomClassProperty,
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildArrayProperty" />.
        /// </summary>
        /// <param name="childArrayProperty">The new <see cref="ChildArrayProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childArrayProperty" /> for <see cref="ChildArrayProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildArrayProperty(string[] childArrayProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = childArrayProperty,
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildNullableProperty" />.
        /// </summary>
        /// <param name="childNullableProperty">The new <see cref="ChildNullableProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childNullableProperty" /> for <see cref="ChildNullableProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildNullableProperty(decimal? childNullableProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = childNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildCustomGenericClassProperty" />.
        /// </summary>
        /// <param name="childCustomGenericClassProperty">The new <see cref="ChildCustomGenericClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childCustomGenericClassProperty" /> for <see cref="ChildCustomGenericClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildCustomGenericClassProperty(CustomGenericClass<string> childCustomGenericClassProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = childCustomGenericClassProperty,
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildReadOnlyCollectionProperty" />.
        /// </summary>
        /// <param name="childReadOnlyCollectionProperty">The new <see cref="ChildReadOnlyCollectionProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childReadOnlyCollectionProperty" /> for <see cref="ChildReadOnlyCollectionProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildReadOnlyCollectionProperty(IReadOnlyCollection<string> childReadOnlyCollectionProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = childReadOnlyCollectionProperty,
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildReadOnlyDictionaryProperty" />.
        /// </summary>
        /// <param name="childReadOnlyDictionaryProperty">The new <see cref="ChildReadOnlyDictionaryProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPublicSetGenericParentNonGenericChild" /> using the specified <paramref name="childReadOnlyDictionaryProperty" /> for <see cref="ChildReadOnlyDictionaryProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPublicSetGenericParentNonGenericChild DeepCloneWithChildReadOnlyDictionaryProperty(IReadOnlyDictionary<string, string> childReadOnlyDictionaryProperty)
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = childReadOnlyDictionaryProperty,
                             };

            return result;
        }

        /// <inheritdoc />
        protected override ModelPublicSetGenericParent<CustomClass, Guid> DeepCloneInternal()
        {
            var result = new ModelPublicSetGenericParentNonGenericChild
                             {
                                 ParentStringProperty                                    = this.ParentStringProperty?.Clone().ToString(),
                                 ParentIntProperty                                       = this.ParentIntProperty,
                                 ParentEnumProperty                                      = this.ParentEnumProperty,
                                 ParentCustomClassProperty                               = this.ParentCustomClassProperty?.DeepClone(),
                                 ParentGenericArgumentProperty                           = this.ParentGenericArgumentProperty?.DeepClone(),
                                 ParentGenericArrayProperty                              = this.ParentGenericArrayProperty?.Select(i => i?.DeepClone()).ToArray(),
                                 ParentGenericNullableProperty                           = this.ParentGenericNullableProperty,
                                 ParentGenericCustomGenericClassProperty                 = this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 ParentGenericReadOnlyCollectionProperty                 = this.ParentGenericReadOnlyCollectionProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyListProperty                       = this.ParentGenericReadOnlyListProperty?.Select(i => i?.DeepClone()).ToList(),
                                 ParentGenericReadOnlyDictionaryProperty1                = this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value),
                                 ParentGenericReadOnlyDictionaryProperty2                = this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => v.Value?.DeepClone()),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key?.DeepClone(), v => v.Value?.Clone().ToString()),
                                 ChildStringProperty                                     = this.ChildStringProperty?.Clone().ToString(),
                                 ChildIntProperty                                        = this.ChildIntProperty,
                                 ChildEnumProperty                                       = this.ChildEnumProperty,
                                 ChildCustomClassProperty                                = this.ChildCustomClassProperty?.DeepClone(),
                                 ChildArrayProperty                                      = this.ChildArrayProperty?.Select(i => i?.Clone().ToString()).ToArray(),
                                 ChildNullableProperty                                   = this.ChildNullableProperty,
                                 ChildCustomGenericClassProperty                         = this.ChildCustomGenericClassProperty?.DeepClone(),
                                 ChildReadOnlyCollectionProperty                         = this.ChildReadOnlyCollectionProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ChildReadOnlyDictionaryProperty                         = this.ChildReadOnlyDictionaryProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()),
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPublicSetGenericParentNonGenericChild: ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {this.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {this.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {this.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {this.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {this.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {this.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {this.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {this.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {this.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {this.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {this.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {this.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {this.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildArrayProperty = {this.ChildArrayProperty?.ToString() ?? "<null>"}, ChildNullableProperty = {this.ChildNullableProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildCustomGenericClassProperty = {this.ChildCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildReadOnlyCollectionProperty = {this.ChildReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildReadOnlyDictionaryProperty = {this.ChildReadOnlyDictionaryProperty?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
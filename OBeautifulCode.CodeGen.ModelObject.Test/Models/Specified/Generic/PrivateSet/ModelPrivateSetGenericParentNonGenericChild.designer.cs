// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelPrivateSetGenericParentNonGenericChild : IModel<ModelPrivateSetGenericParentNonGenericChild>, IComparableForRelativeSortOrder<ModelPrivateSetGenericParentNonGenericChild>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelPrivateSetGenericParentNonGenericChild other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentEnumProperty.IsEqualTo(other.ParentEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.ParentGenericArgumentProperty.IsEqualTo(other.ParentGenericArgumentProperty)
                      && this.ParentGenericArrayProperty.IsEqualTo(other.ParentGenericArrayProperty)
                      && this.ParentGenericNullableProperty.IsEqualTo(other.ParentGenericNullableProperty)
                      && this.ParentGenericCustomGenericClassProperty.IsEqualTo(other.ParentGenericCustomGenericClassProperty)
                      && this.ParentGenericReadOnlyCollectionProperty.IsEqualTo(other.ParentGenericReadOnlyCollectionProperty)
                      && this.ParentGenericReadOnlyListProperty.IsEqualTo(other.ParentGenericReadOnlyListProperty)
                      && this.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty1)
                      && this.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty2)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
                      && this.ChildStringProperty.IsEqualTo(other.ChildStringProperty, StringComparer.Ordinal)
                      && this.ChildIntProperty.IsEqualTo(other.ChildIntProperty)
                      && this.ChildEnumProperty.IsEqualTo(other.ChildEnumProperty)
                      && this.ChildCustomClassProperty.IsEqualTo(other.ChildCustomClassProperty)
                      && this.ChildArrayProperty.IsEqualTo(other.ChildArrayProperty)
                      && this.ChildNullableProperty.IsEqualTo(other.ChildNullableProperty)
                      && this.ChildCustomGenericClassProperty.IsEqualTo(other.ChildCustomGenericClassProperty)
                      && this.ChildReadOnlyCollectionProperty.IsEqualTo(other.ChildReadOnlyCollectionProperty)
                      && this.ChildReadOnlyDictionaryProperty.IsEqualTo(other.ChildReadOnlyDictionaryProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelPrivateSetGenericParentNonGenericChild);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> is less than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than operator.</param>
        /// <param name="right">The object to the right of the less-than operator.</param>
        /// <returns>true if <paramref name="left"/> is less than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return true;
            }

            if (ReferenceEquals(right, null))
            {
                return false;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstancePrecedesTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> is greater than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than operator.</param>
        /// <param name="right">The object to the right of the greater-than operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return false;
            }

            if (ReferenceEquals(right, null))
            {
                return true;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> is less than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the less-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <=(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right) => !(left > right);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentNonGenericChild"/> is greater than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the greater-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >=(ModelPrivateSetGenericParentNonGenericChild left, ModelPrivateSetGenericParentNonGenericChild right) => !(left < right);

        /// <inheritdoc />
        public int CompareTo(ModelPrivateSetGenericParentNonGenericChild other)
        {
            if (ReferenceEquals(other, null))
            {
                return 1;
            }

            var relativeSortOrder = this.CompareToForRelativeSortOrder(other);

            switch(relativeSortOrder)
            {
                case RelativeSortOrder.ThisInstancePrecedesTheOtherInstance:
                    return -1;
                case RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance:
                    return 0;
                case RelativeSortOrder.ThisInstanceFollowsTheOtherInstance:
                    return 1;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(RelativeSortOrder)} is not supported: {relativeSortOrder}."));
            }
        }

        /// <inheritdoc />
        public override int CompareTo(object obj)
        {
            if (ReferenceEquals(obj, null))
            {
                return 1;
            }

            if (!(obj is ModelPrivateSetGenericParentNonGenericChild other))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPrivateSetGenericParentNonGenericChild' whereas the other object is of type '{obj.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareTo(other);

            return result;
        }

        /// <inheritdoc />
        public override RelativeSortOrder CompareToForRelativeSortOrder(ModelPrivateSetGenericParent<CustomClass, Guid> other)
        {
            if (ReferenceEquals(other, null))
            {
                return RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;
            }

            if (!(other is ModelPrivateSetGenericParentNonGenericChild otherAsModelPrivateSetGenericParentNonGenericChild))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPrivateSetGenericParentNonGenericChild' whereas the other object is of type '{other.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareToForRelativeSortOrder(otherAsModelPrivateSetGenericParentNonGenericChild);

            return result;
        }

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.ParentGenericArgumentProperty)
            .Hash(this.ParentGenericArrayProperty)
            .Hash(this.ParentGenericNullableProperty)
            .Hash(this.ParentGenericCustomGenericClassProperty)
            .Hash(this.ParentGenericReadOnlyCollectionProperty)
            .Hash(this.ParentGenericReadOnlyListProperty)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty2)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
            .Hash(this.ChildStringProperty)
            .Hash(this.ChildIntProperty)
            .Hash(this.ChildEnumProperty)
            .Hash(this.ChildCustomClassProperty)
            .Hash(this.ChildArrayProperty)
            .Hash(this.ChildNullableProperty)
            .Hash(this.ChildCustomGenericClassProperty)
            .Hash(this.ChildReadOnlyCollectionProperty)
            .Hash(this.ChildReadOnlyDictionaryProperty)
            .Value;

        /// <inheritdoc />
        public new ModelPrivateSetGenericParentNonGenericChild DeepClone() => (ModelPrivateSetGenericParentNonGenericChild)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 parentStringProperty,
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 parentIntProperty,
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentEnumProperty(CustomEnum parentEnumProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 parentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 parentCustomClassProperty,
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericArgumentProperty(CustomClass parentGenericArgumentProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 parentGenericArgumentProperty,
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericArrayProperty(CustomClass[] parentGenericArrayProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 parentGenericArrayProperty,
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericNullableProperty(Guid? parentGenericNullableProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 parentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericCustomGenericClassProperty(CustomGenericClass<Guid> parentGenericCustomGenericClassProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 parentGenericCustomGenericClassProperty,
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyCollectionProperty(IReadOnlyCollection<CustomClass> parentGenericReadOnlyCollectionProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 parentGenericReadOnlyCollectionProperty,
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyListProperty(IReadOnlyList<CustomClass> parentGenericReadOnlyListProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 parentGenericReadOnlyListProperty,
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty1(IReadOnlyDictionary<CustomClass, Guid> parentGenericReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 parentGenericReadOnlyDictionaryProperty1,
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty2(IReadOnlyDictionary<Guid, CustomClass> parentGenericReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 parentGenericReadOnlyDictionaryProperty2,
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, Guid> parentGenericPartiallyClosedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 parentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<CustomClass, string> parentGenericPartiallyClosedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 parentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildStringProperty" />.
        /// </summary>
        /// <param name="childStringProperty">The new <see cref="ChildStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childStringProperty" /> for <see cref="ChildStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildStringProperty(string childStringProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 childStringProperty,
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildIntProperty" />.
        /// </summary>
        /// <param name="childIntProperty">The new <see cref="ChildIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childIntProperty" /> for <see cref="ChildIntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildIntProperty(int childIntProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 childIntProperty,
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildEnumProperty" />.
        /// </summary>
        /// <param name="childEnumProperty">The new <see cref="ChildEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childEnumProperty" /> for <see cref="ChildEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildEnumProperty(CustomEnum childEnumProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 childEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildCustomClassProperty" />.
        /// </summary>
        /// <param name="childCustomClassProperty">The new <see cref="ChildCustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childCustomClassProperty" /> for <see cref="ChildCustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildCustomClassProperty(CustomClass childCustomClassProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 childCustomClassProperty,
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildArrayProperty" />.
        /// </summary>
        /// <param name="childArrayProperty">The new <see cref="ChildArrayProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childArrayProperty" /> for <see cref="ChildArrayProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildArrayProperty(string[] childArrayProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 childArrayProperty,
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildNullableProperty" />.
        /// </summary>
        /// <param name="childNullableProperty">The new <see cref="ChildNullableProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childNullableProperty" /> for <see cref="ChildNullableProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildNullableProperty(decimal? childNullableProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 childNullableProperty,
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildCustomGenericClassProperty" />.
        /// </summary>
        /// <param name="childCustomGenericClassProperty">The new <see cref="ChildCustomGenericClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childCustomGenericClassProperty" /> for <see cref="ChildCustomGenericClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildCustomGenericClassProperty(CustomGenericClass<string> childCustomGenericClassProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 childCustomGenericClassProperty,
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildReadOnlyCollectionProperty" />.
        /// </summary>
        /// <param name="childReadOnlyCollectionProperty">The new <see cref="ChildReadOnlyCollectionProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childReadOnlyCollectionProperty" /> for <see cref="ChildReadOnlyCollectionProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildReadOnlyCollectionProperty(IReadOnlyCollection<string> childReadOnlyCollectionProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 childReadOnlyCollectionProperty,
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildReadOnlyDictionaryProperty" />.
        /// </summary>
        /// <param name="childReadOnlyDictionaryProperty">The new <see cref="ChildReadOnlyDictionaryProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentNonGenericChild" /> using the specified <paramref name="childReadOnlyDictionaryProperty" /> for <see cref="ChildReadOnlyDictionaryProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentNonGenericChild DeepCloneWithChildReadOnlyDictionaryProperty(IReadOnlyDictionary<string, string> childReadOnlyDictionaryProperty)
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 childReadOnlyDictionaryProperty);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        protected override ModelPrivateSetGenericParent<CustomClass, Guid> DeepCloneInternal()
        {
            var result = new ModelPrivateSetGenericParentNonGenericChild(
                                 this.ParentStringProperty?.DeepClone(),
                                 this.ParentIntProperty.DeepClone(),
                                 this.ParentEnumProperty.DeepClone(),
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentGenericArgumentProperty?.DeepClone(),
                                 this.ParentGenericArrayProperty?.DeepClone(),
                                 this.ParentGenericNullableProperty?.DeepClone(),
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyListProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.DeepClone(),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.DeepClone(),
                                 this.ChildStringProperty?.DeepClone(),
                                 this.ChildIntProperty.DeepClone(),
                                 this.ChildEnumProperty.DeepClone(),
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 this.ChildArrayProperty?.DeepClone(),
                                 this.ChildNullableProperty?.DeepClone(),
                                 this.ChildCustomGenericClassProperty?.DeepClone(),
                                 this.ChildReadOnlyCollectionProperty?.DeepClone(),
                                 this.ChildReadOnlyDictionaryProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelPrivateSetGenericParentNonGenericChild: ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {this.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {this.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {this.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {this.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {this.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {this.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {this.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {this.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {this.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {this.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {this.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {this.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {this.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildArrayProperty = {this.ChildArrayProperty?.ToString() ?? "<null>"}, ChildNullableProperty = {this.ChildNullableProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildCustomGenericClassProperty = {this.ChildCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildReadOnlyCollectionProperty = {this.ChildReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildReadOnlyDictionaryProperty = {this.ChildReadOnlyDictionaryProperty?.ToString() ?? "<null>"}.");

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override IReadOnlyList<ValidationFailure> GetValidationFailures(
            ValidationOptions options = null,
            PropertyPathTracker propertyPathTracker = null)
        {
            options = options ?? new ValidationOptions();
            propertyPathTracker = propertyPathTracker ?? new PropertyPathTracker();

            bool stopOnFirstObjectWithFailures;
            switch (options.ValidateUntil)
            {
                case ValidateUntil.FullyTraversed:
                    stopOnFirstObjectWithFailures = false;
                    break;
                case ValidateUntil.FirstInvalidObject:
                    stopOnFirstObjectWithFailures = true;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidateUntil)} is not supported: {options.ValidateUntil}."));
            }

            bool validateProperties;
            switch (options.ValidationScope)
            {
                case ValidationScope.SelfAndProperties:
                    validateProperties = true;
                    break;
                case ValidationScope.SelfOnly:
                    validateProperties = false;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidationScope)} is not supported: {options.ValidationScope}."));
            }

            var result = new List<ValidationFailure>();

            void ValidateProperties()
            {
                IReadOnlyList<ValidationFailure> localValidationFailures;

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentStringProperty, options, propertyPathTracker, nameof(this.ParentStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentIntProperty, options, propertyPathTracker, nameof(this.ParentIntProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentEnumProperty, options, propertyPathTracker, nameof(this.ParentEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentCustomClassProperty, options, propertyPathTracker, nameof(this.ParentCustomClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericArgumentProperty, options, propertyPathTracker, nameof(this.ParentGenericArgumentProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericArrayProperty, options, propertyPathTracker, nameof(this.ParentGenericArrayProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericNullableProperty, options, propertyPathTracker, nameof(this.ParentGenericNullableProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericCustomGenericClassProperty, options, propertyPathTracker, nameof(this.ParentGenericCustomGenericClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericReadOnlyCollectionProperty, options, propertyPathTracker, nameof(this.ParentGenericReadOnlyCollectionProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericReadOnlyListProperty, options, propertyPathTracker, nameof(this.ParentGenericReadOnlyListProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericReadOnlyDictionaryProperty1, options, propertyPathTracker, nameof(this.ParentGenericReadOnlyDictionaryProperty1));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericReadOnlyDictionaryProperty2, options, propertyPathTracker, nameof(this.ParentGenericReadOnlyDictionaryProperty2));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1, options, propertyPathTracker, nameof(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2, options, propertyPathTracker, nameof(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildStringProperty, options, propertyPathTracker, nameof(this.ChildStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildIntProperty, options, propertyPathTracker, nameof(this.ChildIntProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildEnumProperty, options, propertyPathTracker, nameof(this.ChildEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildCustomClassProperty, options, propertyPathTracker, nameof(this.ChildCustomClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildArrayProperty, options, propertyPathTracker, nameof(this.ChildArrayProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildNullableProperty, options, propertyPathTracker, nameof(this.ChildNullableProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildCustomGenericClassProperty, options, propertyPathTracker, nameof(this.ChildCustomGenericClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildReadOnlyCollectionProperty, options, propertyPathTracker, nameof(this.ChildReadOnlyCollectionProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ChildReadOnlyDictionaryProperty, options, propertyPathTracker, nameof(this.ChildReadOnlyDictionaryProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }
            }

            void ValidateSelf()
            {
                var segmentSeparator = propertyPathTracker.HasSegments ? propertyPathTracker.SegmentSeparator : string.Empty;

                var selfValidationFailures = (this.GetSelfValidationFailures() ?? new SelfValidationFailure[0])
                    .Where(_ => _ != null)
                    .Select(_ =>
                    {
                        var propertyNames = _.PropertyNames.Count > 1
                            ? Invariant($"({string.Join("|", _.PropertyNames)})")
                            : _.PropertyNames.Single();

                        return new ValidationFailure(
                            this.GetType().ToStringReadable(),
                            Invariant($"{propertyPathTracker.FullPath}{segmentSeparator}{propertyNames}"),
                            _.Message);
                    })
                    .ToList();

                result.AddRange(selfValidationFailures);
            }

            if (options.ValidationOrder == ValidationOrder.PropertiesThenSelf)
            {
                if (validateProperties)
                {
                    ValidateProperties();
                }

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                ValidateSelf();
            }
            else if (options.ValidationOrder == ValidationOrder.SelfThenProperties)
            {
                ValidateSelf();

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                if (validateProperties)
                {
                    ValidateProperties();
                }
            }
            else
            {
                throw new NotSupportedException(Invariant($"This {nameof(ValidationOrder)} is not supported: {options.ValidationOrder}."));
            }

            return result;
        }

        /// <inheritdoc />
        public override IReadOnlyList<SelfValidationFailure> GetSelfValidationFailures()
        {
            var result = base.GetSelfValidationFailures();

            return result;
        }
    }
}
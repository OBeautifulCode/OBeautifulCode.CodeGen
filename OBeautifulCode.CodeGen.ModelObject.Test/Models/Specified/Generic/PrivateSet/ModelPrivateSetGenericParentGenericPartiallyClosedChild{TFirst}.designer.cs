// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> : IModel<ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>>, IComparableForRelativeSortOrder<ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right) => !(left == right);

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public bool Equals(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var genericArgumentsUsedAsKeyInDictionary = new[] { typeof(TFirst) };

            if (genericArgumentsUsedAsKeyInDictionary.Any(_=> (_ == typeof(DateTime)) || (_ == typeof(DateTime?))))
            {
                throw new NotSupportedException("This model contains one or more properties that are OR have within their generic argument tree or array element type a System Dictionary that is keyed on DateTime or DateTime?; IsEqualTo may do the wrong thing when comparing the keys of two such dictionaries (because it uses dictionary's embedded equality comparer, which is most likely the default comparer, which determines two DateTime objects to be equal if they have the same Ticks, regardless of whether they have the same Kind).");
            }

            var result = this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentEnumProperty.IsEqualTo(other.ParentEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.ParentGenericArgumentProperty.IsEqualTo(other.ParentGenericArgumentProperty)
                      && this.ParentGenericArrayProperty.IsEqualTo(other.ParentGenericArrayProperty)
                      && this.ParentGenericNullableProperty.IsEqualTo(other.ParentGenericNullableProperty)
                      && this.ParentGenericCustomGenericClassProperty.IsEqualTo(other.ParentGenericCustomGenericClassProperty)
                      && this.ParentGenericReadOnlyCollectionProperty.IsEqualTo(other.ParentGenericReadOnlyCollectionProperty)
                      && this.ParentGenericReadOnlyListProperty.IsEqualTo(other.ParentGenericReadOnlyListProperty)
                      && this.ParentGenericReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty1)
                      && this.ParentGenericReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericReadOnlyDictionaryProperty2)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
                      && this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
                      && this.ChildStringProperty.IsEqualTo(other.ChildStringProperty, StringComparer.Ordinal)
                      && this.ChildIntProperty.IsEqualTo(other.ChildIntProperty)
                      && this.ChildEnumProperty.IsEqualTo(other.ChildEnumProperty)
                      && this.ChildCustomClassProperty.IsEqualTo(other.ChildCustomClassProperty)
                      && this.ChildGenericArgumentProperty.IsEqualTo(other.ChildGenericArgumentProperty)
                      && this.ChildGenericArrayProperty.IsEqualTo(other.ChildGenericArrayProperty)
                      && this.ChildGenericNullableProperty.IsEqualTo(other.ChildGenericNullableProperty)
                      && this.ChildGenericCustomGenericClassProperty.IsEqualTo(other.ChildGenericCustomGenericClassProperty)
                      && this.ChildGenericReadOnlyCollectionProperty.IsEqualTo(other.ChildGenericReadOnlyCollectionProperty)
                      && this.ChildGenericReadOnlyListProperty.IsEqualTo(other.ChildGenericReadOnlyListProperty)
                      && this.ChildGenericReadOnlyDictionaryProperty1.IsEqualTo(other.ChildGenericReadOnlyDictionaryProperty1)
                      && this.ChildGenericReadOnlyDictionaryProperty2.IsEqualTo(other.ChildGenericReadOnlyDictionaryProperty2)
                      && this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1.IsEqualTo(other.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)
                      && this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2.IsEqualTo(other.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> is less than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than operator.</param>
        /// <param name="right">The object to the right of the less-than operator.</param>
        /// <returns>true if <paramref name="left"/> is less than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return true;
            }

            if (ReferenceEquals(right, null))
            {
                return false;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstancePrecedesTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> is greater than another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than operator.</param>
        /// <param name="right">The object to the right of the greater-than operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right)
        {
            if (ReferenceEquals(left, right))
            {
                return false;
            }

            if (ReferenceEquals(left, null))
            {
                return false;
            }

            if (ReferenceEquals(right, null))
            {
                return true;
            }

            if (left.GetType() != right.GetType())
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  The left operand is of type '{left.GetType().ToStringReadable()}' whereas the right operand is of type '{right.GetType().ToStringReadable()}'."));
            }

            var relativeSortOrder = left.CompareToForRelativeSortOrder(right);

            var result = relativeSortOrder == RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;

            return result;
        }

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> is less than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the less-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the less-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator <=(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right) => !(left > right);

        /// <summary>
        /// Determines whether an object of type <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}"/> is greater than or equal to another object of that type.
        /// </summary>
        /// <param name="left">The object to the left of the greater-than-or-equal-to operator.</param>
        /// <param name="right">The object to the right of the greater-than-or-equal-to operator.</param>
        /// <returns>true if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise false.</returns>
        public static bool operator >=(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> left, ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> right) => !(left < right);

        /// <inheritdoc />
        public int CompareTo(ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> other)
        {
            if (ReferenceEquals(other, null))
            {
                return 1;
            }

            var relativeSortOrder = this.CompareToForRelativeSortOrder(other);

            switch(relativeSortOrder)
            {
                case RelativeSortOrder.ThisInstancePrecedesTheOtherInstance:
                    return -1;
                case RelativeSortOrder.ThisInstanceOccursInTheSamePositionAsTheOtherInstance:
                    return 0;
                case RelativeSortOrder.ThisInstanceFollowsTheOtherInstance:
                    return 1;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(RelativeSortOrder)} is not supported: {relativeSortOrder}."));
            }
        }

        /// <inheritdoc />
        public override int CompareTo(object obj)
        {
            if (ReferenceEquals(obj, null))
            {
                return 1;
            }

            if (!(obj is ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> other))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>' whereas the other object is of type '{obj.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareTo(other);

            return result;
        }

        /// <inheritdoc />
        public override RelativeSortOrder CompareToForRelativeSortOrder(ModelPrivateSetGenericParent<TFirst, Guid> other)
        {
            if (ReferenceEquals(other, null))
            {
                return RelativeSortOrder.ThisInstanceFollowsTheOtherInstance;
            }

            if (!(other is ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> otherAsModelPrivateSetGenericParentGenericPartiallyClosedChild))
            {
                throw new ArgumentException(Invariant($"Attempting to compare objects of different types.  This object is of type 'ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>' whereas the other object is of type '{other.GetType().ToStringReadable()}'."));
            }

            var result = this.CompareToForRelativeSortOrder(otherAsModelPrivateSetGenericParentGenericPartiallyClosedChild);

            return result;
        }

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.ParentGenericArgumentProperty)
            .Hash(this.ParentGenericArrayProperty)
            .Hash(this.ParentGenericNullableProperty)
            .Hash(this.ParentGenericCustomGenericClassProperty)
            .Hash(this.ParentGenericReadOnlyCollectionProperty)
            .Hash(this.ParentGenericReadOnlyListProperty)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericReadOnlyDictionaryProperty2)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1)
            .Hash(this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2)
            .Hash(this.ChildStringProperty)
            .Hash(this.ChildIntProperty)
            .Hash(this.ChildEnumProperty)
            .Hash(this.ChildCustomClassProperty)
            .Hash(this.ChildGenericArgumentProperty)
            .Hash(this.ChildGenericArrayProperty)
            .Hash(this.ChildGenericNullableProperty)
            .Hash(this.ChildGenericCustomGenericClassProperty)
            .Hash(this.ChildGenericReadOnlyCollectionProperty)
            .Hash(this.ChildGenericReadOnlyListProperty)
            .Hash(this.ChildGenericReadOnlyDictionaryProperty1)
            .Hash(this.ChildGenericReadOnlyDictionaryProperty2)
            .Hash(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1)
            .Hash(this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2)
            .Value;

        /// <inheritdoc />
        public new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepClone() => (ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 parentStringProperty,
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 parentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentEnumProperty(CustomEnum parentEnumProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 parentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 parentCustomClassProperty,
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericArgumentProperty(TFirst parentGenericArgumentProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 parentGenericArgumentProperty,
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericArrayProperty(TFirst[] parentGenericArrayProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 parentGenericArrayProperty,
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericNullableProperty(Guid? parentGenericNullableProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 parentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericCustomGenericClassProperty(CustomGenericClass<Guid> parentGenericCustomGenericClassProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 parentGenericCustomGenericClassProperty,
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericReadOnlyCollectionProperty(IReadOnlyCollection<TFirst> parentGenericReadOnlyCollectionProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 parentGenericReadOnlyCollectionProperty,
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericReadOnlyListProperty(IReadOnlyList<TFirst> parentGenericReadOnlyListProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 parentGenericReadOnlyListProperty,
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty1(IReadOnlyDictionary<TFirst, Guid> parentGenericReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 parentGenericReadOnlyDictionaryProperty1,
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericReadOnlyDictionaryProperty2(IReadOnlyDictionary<Guid, TFirst> parentGenericReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 parentGenericReadOnlyDictionaryProperty2,
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, Guid> parentGenericPartiallyClosedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 parentGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneWithParentGenericPartiallyClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<TFirst, string> parentGenericPartiallyClosedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 parentGenericPartiallyClosedReadOnlyDictionaryProperty2,
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildStringProperty" />.
        /// </summary>
        /// <param name="childStringProperty">The new <see cref="ChildStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childStringProperty" /> for <see cref="ChildStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildStringProperty(string childStringProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 childStringProperty,
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildIntProperty" />.
        /// </summary>
        /// <param name="childIntProperty">The new <see cref="ChildIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childIntProperty" /> for <see cref="ChildIntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildIntProperty(int childIntProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 childIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildEnumProperty" />.
        /// </summary>
        /// <param name="childEnumProperty">The new <see cref="ChildEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childEnumProperty" /> for <see cref="ChildEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildEnumProperty(CustomEnum childEnumProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 childEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildCustomClassProperty" />.
        /// </summary>
        /// <param name="childCustomClassProperty">The new <see cref="ChildCustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childCustomClassProperty" /> for <see cref="ChildCustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildCustomClassProperty(CustomClass childCustomClassProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 childCustomClassProperty,
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericArgumentProperty" />.
        /// </summary>
        /// <param name="childGenericArgumentProperty">The new <see cref="ChildGenericArgumentProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericArgumentProperty" /> for <see cref="ChildGenericArgumentProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericArgumentProperty(TFirst childGenericArgumentProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 childGenericArgumentProperty,
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericArrayProperty" />.
        /// </summary>
        /// <param name="childGenericArrayProperty">The new <see cref="ChildGenericArrayProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericArrayProperty" /> for <see cref="ChildGenericArrayProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericArrayProperty(TFirst[] childGenericArrayProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 childGenericArrayProperty,
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericNullableProperty" />.
        /// </summary>
        /// <param name="childGenericNullableProperty">The new <see cref="ChildGenericNullableProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericNullableProperty" /> for <see cref="ChildGenericNullableProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericNullableProperty(Guid? childGenericNullableProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 childGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericCustomGenericClassProperty" />.
        /// </summary>
        /// <param name="childGenericCustomGenericClassProperty">The new <see cref="ChildGenericCustomGenericClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericCustomGenericClassProperty" /> for <see cref="ChildGenericCustomGenericClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericCustomGenericClassProperty(CustomGenericClass<TFirst> childGenericCustomGenericClassProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 childGenericCustomGenericClassProperty,
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyCollectionProperty" />.
        /// </summary>
        /// <param name="childGenericReadOnlyCollectionProperty">The new <see cref="ChildGenericReadOnlyCollectionProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericReadOnlyCollectionProperty" /> for <see cref="ChildGenericReadOnlyCollectionProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericReadOnlyCollectionProperty(IReadOnlyCollection<TFirst> childGenericReadOnlyCollectionProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 childGenericReadOnlyCollectionProperty,
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyListProperty" />.
        /// </summary>
        /// <param name="childGenericReadOnlyListProperty">The new <see cref="ChildGenericReadOnlyListProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericReadOnlyListProperty" /> for <see cref="ChildGenericReadOnlyListProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericReadOnlyListProperty(IReadOnlyList<TFirst> childGenericReadOnlyListProperty)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 childGenericReadOnlyListProperty,
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="childGenericReadOnlyDictionaryProperty1">The new <see cref="ChildGenericReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericReadOnlyDictionaryProperty1" /> for <see cref="ChildGenericReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericReadOnlyDictionaryProperty1(IReadOnlyDictionary<TFirst, Guid> childGenericReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 childGenericReadOnlyDictionaryProperty1,
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="childGenericReadOnlyDictionaryProperty2">The new <see cref="ChildGenericReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericReadOnlyDictionaryProperty2" /> for <see cref="ChildGenericReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericReadOnlyDictionaryProperty2(IReadOnlyDictionary<Guid, TFirst> childGenericReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 childGenericReadOnlyDictionaryProperty2,
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" />.
        /// </summary>
        /// <param name="childGenericPartiallyClosedReadOnlyDictionaryProperty1">The new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericPartiallyClosedReadOnlyDictionaryProperty1" /> for <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty1" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty1(IReadOnlyDictionary<string, TFirst> childGenericPartiallyClosedReadOnlyDictionaryProperty1)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 childGenericPartiallyClosedReadOnlyDictionaryProperty1,
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" />.
        /// </summary>
        /// <param name="childGenericPartiallyClosedReadOnlyDictionaryProperty2">The new <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelPrivateSetGenericParentGenericPartiallyClosedChild{TFirst}" /> using the specified <paramref name="childGenericPartiallyClosedReadOnlyDictionaryProperty2" /> for <see cref="ChildGenericPartiallyClosedReadOnlyDictionaryProperty2" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst> DeepCloneWithChildGenericPartiallyClosedReadOnlyDictionaryProperty2(IReadOnlyDictionary<TFirst, string> childGenericPartiallyClosedReadOnlyDictionaryProperty2)
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 childGenericPartiallyClosedReadOnlyDictionaryProperty2);

            return result;
        }

        /// <inheritdoc />
        protected override ModelPrivateSetGenericParent<TFirst, Guid> DeepCloneInternal()
        {
            var result = new ModelPrivateSetGenericParentGenericPartiallyClosedChild<TFirst>(
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentIntProperty,
                                 this.ParentEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ParentGenericArgumentProperty),
                                 this.ParentGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ParentGenericNullableProperty,
                                 this.ParentGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ParentGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ParentGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ParentGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value),
                                 this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()),
                                 this.ChildStringProperty?.Clone().ToString(),
                                 this.ChildIntProperty,
                                 this.ChildEnumProperty,
                                 this.ChildCustomClassProperty?.DeepClone(),
                                 DeepCloneGeneric(this.ChildGenericArgumentProperty),
                                 this.ChildGenericArrayProperty?.Select(i => DeepCloneGeneric(i)).ToArray(),
                                 this.ChildGenericNullableProperty,
                                 this.ChildGenericCustomGenericClassProperty?.DeepClone(),
                                 this.ChildGenericReadOnlyCollectionProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyListProperty?.Select(i => DeepCloneGeneric(i)).ToList(),
                                 this.ChildGenericReadOnlyDictionaryProperty1?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value),
                                 this.ChildGenericReadOnlyDictionaryProperty2?.ToDictionary(k => k.Key, v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToDictionary(k => k.Key?.Clone().ToString(), v => DeepCloneGeneric(v.Value)),
                                 this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToDictionary(k => DeepCloneGeneric(k.Key), v => v.Value?.Clone().ToString()));

            return result;
        }

        private TFirst DeepCloneGeneric(TFirst value)
        {
            TFirst result;

            var type = typeof(TFirst);

            if (type.IsValueType)
            {
                result = value;
            }
            else
            {
                if (ReferenceEquals(value, null))
                {
                    result = default;
                }
                else if (value is IDeepCloneable<TFirst> deepCloneableValue)
                {
                    result = deepCloneableValue.DeepClone();
                }
                else if (value is string valueAsString)
                {
                    result = (TFirst)(object)valueAsString.Clone().ToString();
                }
                else if (value is System.Version valueAsVersion)
                {
                    result = (TFirst)valueAsVersion.Clone();
                }
                else
                {
                    throw new NotSupportedException(Invariant($"I do not know how to deep clone an object of type '{type.ToStringReadable()}'"));
                }
            }

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.{this.GetType().ToStringReadable()}: ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentEnumProperty = {this.ParentEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentGenericArgumentProperty = {this.ParentGenericArgumentProperty?.ToString() ?? "<null>"}, ParentGenericArrayProperty = {this.ParentGenericArrayProperty?.ToString() ?? "<null>"}, ParentGenericNullableProperty = {this.ParentGenericNullableProperty?.ToString() ?? "<null>"}, ParentGenericCustomGenericClassProperty = {this.ParentGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyCollectionProperty = {this.ParentGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyListProperty = {this.ParentGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty1 = {this.ParentGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericReadOnlyDictionaryProperty2 = {this.ParentGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty1 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ParentGenericPartiallyClosedReadOnlyDictionaryProperty2 = {this.ParentGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildStringProperty = {this.ChildStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildIntProperty = {this.ChildIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ChildEnumProperty = {this.ChildEnumProperty.ToString() ?? "<null>"}, ChildCustomClassProperty = {this.ChildCustomClassProperty?.ToString() ?? "<null>"}, ChildGenericArgumentProperty = {this.ChildGenericArgumentProperty?.ToString() ?? "<null>"}, ChildGenericArrayProperty = {this.ChildGenericArrayProperty?.ToString() ?? "<null>"}, ChildGenericNullableProperty = {this.ChildGenericNullableProperty?.ToString() ?? "<null>"}, ChildGenericCustomGenericClassProperty = {this.ChildGenericCustomGenericClassProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyCollectionProperty = {this.ChildGenericReadOnlyCollectionProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyListProperty = {this.ChildGenericReadOnlyListProperty?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty1 = {this.ChildGenericReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericReadOnlyDictionaryProperty2 = {this.ChildGenericReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty1 = {this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty1?.ToString() ?? "<null>"}, ChildGenericPartiallyClosedReadOnlyDictionaryProperty2 = {this.ChildGenericPartiallyClosedReadOnlyDictionaryProperty2?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
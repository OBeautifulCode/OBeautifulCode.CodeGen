// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelAllPublicSetMisc : IModel<ModelAllPublicSetMisc>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPublicSetMisc"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelAllPublicSetMisc left, ModelAllPublicSetMisc right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPublicSetMisc"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelAllPublicSetMisc left, ModelAllPublicSetMisc right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelAllPublicSetMisc other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.CollectionInterfaceOfStringProperty.IsEqualTo(other.CollectionInterfaceOfStringProperty)
                      && this.ListInterfaceOfStringProperty.IsEqualTo(other.ListInterfaceOfStringProperty)
                      && this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty)
                      && this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty.IsEqualTo(other.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty)
                      && this.ListInterfaceOfCollectionInterfaceOfStringProperty.IsEqualTo(other.ListInterfaceOfCollectionInterfaceOfStringProperty)
                      && this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty.IsEqualTo(other.ReadOnlyListInterfaceOfListInterfaceOfStringProperty)
                      && this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(other.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
                      && this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty.IsEqualTo(other.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty)
                      && this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(other.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
                      && this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty.IsEqualTo(other.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelAllPublicSetMisc);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.CollectionInterfaceOfStringProperty)
            .Hash(this.ListInterfaceOfStringProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty)
            .Hash(this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty)
            .Hash(this.ListInterfaceOfCollectionInterfaceOfStringProperty)
            .Hash(this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty)
            .Hash(this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
            .Hash(this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty)
            .Hash(this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
            .Hash(this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public ModelAllPublicSetMisc DeepClone()
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CollectionInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="collectionInterfaceOfStringProperty">The new <see cref="CollectionInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="collectionInterfaceOfStringProperty" /> for <see cref="CollectionInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithCollectionInterfaceOfStringProperty(ICollection<string> collectionInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = collectionInterfaceOfStringProperty,
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ListInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="listInterfaceOfStringProperty">The new <see cref="ListInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="listInterfaceOfStringProperty" /> for <see cref="ListInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithListInterfaceOfStringProperty(IList<string> listInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = listInterfaceOfStringProperty,
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty(IReadOnlyCollection<ICollection<string>> readOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = readOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty,
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="collectionInterfaceOfReadOnlyListInterfaceOfStringProperty">The new <see cref="CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="collectionInterfaceOfReadOnlyListInterfaceOfStringProperty" /> for <see cref="CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithCollectionInterfaceOfReadOnlyListInterfaceOfStringProperty(ICollection<IReadOnlyList<string>> collectionInterfaceOfReadOnlyListInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = collectionInterfaceOfReadOnlyListInterfaceOfStringProperty,
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ListInterfaceOfCollectionInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="listInterfaceOfCollectionInterfaceOfStringProperty">The new <see cref="ListInterfaceOfCollectionInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="listInterfaceOfCollectionInterfaceOfStringProperty" /> for <see cref="ListInterfaceOfCollectionInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithListInterfaceOfCollectionInterfaceOfStringProperty(IList<ICollection<string>> listInterfaceOfCollectionInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = listInterfaceOfCollectionInterfaceOfStringProperty,
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListInterfaceOfListInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="readOnlyListInterfaceOfListInterfaceOfStringProperty">The new <see cref="ReadOnlyListInterfaceOfListInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="readOnlyListInterfaceOfListInterfaceOfStringProperty" /> for <see cref="ReadOnlyListInterfaceOfListInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithReadOnlyListInterfaceOfListInterfaceOfStringProperty(IReadOnlyList<IList<string>> readOnlyListInterfaceOfListInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = readOnlyListInterfaceOfListInterfaceOfStringProperty,
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.
        /// </summary>
        /// <param name="dictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty">The new <see cref="DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="dictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> for <see cref="DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty(IDictionary<string, IReadOnlyList<DateTime>> dictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = dictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty">The new <see cref="ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="readOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" /> for <see cref="ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty(IReadOnlyDictionary<string, ICollection<DateTime>> readOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = readOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty,
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty">The new <see cref="ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="readOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> for <see cref="ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty(IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>> readOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = readOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty">The new <see cref="ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetMisc" /> using the specified <paramref name="readOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> for <see cref="ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetMisc DeepCloneWithReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty(IReadOnlyDictionary<string, IReadOnlyDictionary<string, IDictionary<CustomClass, IReadOnlyList<DateTime>>>> readOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty)
        {
            var result = new ModelAllPublicSetMisc
                             {
                                 CollectionInterfaceOfStringProperty                                                                                    = this.CollectionInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfStringProperty                                                                                          = this.ListInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty                                                       = this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty                                                             = this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.DeepClone(),
                                 ListInterfaceOfCollectionInterfaceOfStringProperty                                                                     = this.ListInterfaceOfCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfListInterfaceOfStringProperty                                                                   = this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.DeepClone(),
                                 DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                                                           = this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty                                                     = this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty                            = this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = readOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty,
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetMisc: CollectionInterfaceOfStringProperty = {this.CollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ListInterfaceOfStringProperty = {this.ListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty = {this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty = {this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty?.ToString() ?? "<null>"}, ListInterfaceOfCollectionInterfaceOfStringProperty = {this.ListInterfaceOfCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyListInterfaceOfListInterfaceOfStringProperty = {this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty?.ToString() ?? "<null>"}, DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty = {this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty = {this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}.");

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public IReadOnlyList<ValidationFailure> GetValidationFailures(
            ValidationOptions options = null,
            PropertyPathTracker propertyPathTracker = null)
        {
            options = options ?? new ValidationOptions();
            propertyPathTracker = propertyPathTracker ?? new PropertyPathTracker();

            bool stopOnFirstObjectWithFailures;
            switch (options.ValidateUntil)
            {
                case ValidateUntil.FullyTraversed:
                    stopOnFirstObjectWithFailures = false;
                    break;
                case ValidateUntil.FirstInvalidObject:
                    stopOnFirstObjectWithFailures = true;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidateUntil)} is not supported: {options.ValidateUntil}."));
            }

            bool validateProperties;
            switch (options.ValidationScope)
            {
                case ValidationScope.SelfAndProperties:
                    validateProperties = true;
                    break;
                case ValidationScope.SelfOnly:
                    validateProperties = false;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidationScope)} is not supported: {options.ValidationScope}."));
            }

            var result = new List<ValidationFailure>();

            void ValidateProperties()
            {
                IReadOnlyList<ValidationFailure> localValidationFailures;

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.CollectionInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.CollectionInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ListInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.ListInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCollectionInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.CollectionInterfaceOfReadOnlyListInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ListInterfaceOfCollectionInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.ListInterfaceOfCollectionInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.ReadOnlyListInterfaceOfListInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty, options, propertyPathTracker, nameof(this.DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty, options, propertyPathTracker, nameof(this.ReadOnlyDictionaryInterfaceOfCollectionInterfaceOfDateTimeProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty, options, propertyPathTracker, nameof(this.ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty, options, propertyPathTracker, nameof(this.ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }
            }

            void ValidateSelf()
            {
                var segmentSeparator = propertyPathTracker.HasSegments ? propertyPathTracker.SegmentSeparator : string.Empty;

                var selfValidationFailures = (this.GetSelfValidationFailures() ?? new SelfValidationFailure[0])
                    .Where(_ => _ != null)
                    .Select(_ =>
                    {
                        var propertyNames = _.PropertyNames.Count > 1
                            ? Invariant($"({string.Join("|", _.PropertyNames)})")
                            : _.PropertyNames.Single();

                        return new ValidationFailure(
                            this.GetType().ToStringReadable(),
                            Invariant($"{propertyPathTracker.FullPath}{segmentSeparator}{propertyNames}"),
                            _.Message);
                    })
                    .ToList();

                result.AddRange(selfValidationFailures);
            }

            if (options.ValidationOrder == ValidationOrder.PropertiesThenSelf)
            {
                if (validateProperties)
                {
                    ValidateProperties();
                }

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                ValidateSelf();
            }
            else if (options.ValidationOrder == ValidationOrder.SelfThenProperties)
            {
                ValidateSelf();

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                if (validateProperties)
                {
                    ValidateProperties();
                }
            }
            else
            {
                throw new NotSupportedException(Invariant($"This {nameof(ValidationOrder)} is not supported: {options.ValidationOrder}."));
            }

            return result;
        }

        /// <inheritdoc />
        public IReadOnlyList<SelfValidationFailure> GetSelfValidationFailures()
        {
            var result = new SelfValidationFailure[0];

            return result;
        }
    }
}
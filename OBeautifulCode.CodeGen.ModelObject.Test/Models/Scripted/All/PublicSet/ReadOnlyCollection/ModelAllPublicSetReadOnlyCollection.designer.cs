// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Cloning.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelAllPublicSetReadOnlyCollection : IModel<ModelAllPublicSetReadOnlyCollection>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPublicSetReadOnlyCollection"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelAllPublicSetReadOnlyCollection left, ModelAllPublicSetReadOnlyCollection right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPublicSetReadOnlyCollection"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelAllPublicSetReadOnlyCollection left, ModelAllPublicSetReadOnlyCollection right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelAllPublicSetReadOnlyCollection other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ReadOnlyCollectionInterfaceOfBoolProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfBoolProperty)
                      && this.ReadOnlyCollectionInterfaceOfIntProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfIntProperty)
                      && this.ReadOnlyCollectionInterfaceOfStringProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfStringProperty)
                      && this.ReadOnlyCollectionInterfaceOfGuidProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfGuidProperty)
                      && this.ReadOnlyCollectionInterfaceOfDateTimeProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfDateTimeProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomEnumProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomEnumProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomClassProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomClassProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty)
                      && this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty.IsEqualTo(other.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelAllPublicSetReadOnlyCollection);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ReadOnlyCollectionInterfaceOfBoolProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfIntProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfStringProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfGuidProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfDateTimeProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomEnumProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomClassProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty)
            .Hash(this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public ModelAllPublicSetReadOnlyCollection DeepClone()
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfBoolProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfBoolProperty">The new <see cref="ReadOnlyCollectionInterfaceOfBoolProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfBoolProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfBoolProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfBoolProperty(IReadOnlyCollection<bool> readOnlyCollectionInterfaceOfBoolProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = readOnlyCollectionInterfaceOfBoolProperty,
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfIntProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfIntProperty">The new <see cref="ReadOnlyCollectionInterfaceOfIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfIntProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfIntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfIntProperty(IReadOnlyCollection<int> readOnlyCollectionInterfaceOfIntProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = readOnlyCollectionInterfaceOfIntProperty,
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfStringProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfStringProperty">The new <see cref="ReadOnlyCollectionInterfaceOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfStringProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfStringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfStringProperty(IReadOnlyCollection<string> readOnlyCollectionInterfaceOfStringProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = readOnlyCollectionInterfaceOfStringProperty,
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfGuidProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfGuidProperty">The new <see cref="ReadOnlyCollectionInterfaceOfGuidProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfGuidProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfGuidProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfGuidProperty(IReadOnlyCollection<Guid> readOnlyCollectionInterfaceOfGuidProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = readOnlyCollectionInterfaceOfGuidProperty,
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfDateTimeProperty">The new <see cref="ReadOnlyCollectionInterfaceOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfDateTimeProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfDateTimeProperty(IReadOnlyCollection<DateTime> readOnlyCollectionInterfaceOfDateTimeProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = readOnlyCollectionInterfaceOfDateTimeProperty,
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomEnumProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomEnumProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomEnumProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomEnumProperty(IReadOnlyCollection<CustomEnum> readOnlyCollectionInterfaceOfCustomEnumProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = readOnlyCollectionInterfaceOfCustomEnumProperty,
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty(IReadOnlyCollection<CustomEnumValidatedNotDefault> readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = readOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty,
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomFlagsEnumProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomFlagsEnumProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty(IReadOnlyCollection<CustomFlagsEnum> readOnlyCollectionInterfaceOfCustomFlagsEnumProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = readOnlyCollectionInterfaceOfCustomFlagsEnumProperty,
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomClassProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomClassProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomClassProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomClassProperty(IReadOnlyCollection<CustomClass> readOnlyCollectionInterfaceOfCustomClassProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = readOnlyCollectionInterfaceOfCustomClassProperty,
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomBaseClassProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomBaseClassProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomBaseClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomBaseClassProperty(IReadOnlyCollection<CustomBaseClass> readOnlyCollectionInterfaceOfCustomBaseClassProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = readOnlyCollectionInterfaceOfCustomBaseClassProperty,
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.DeepClone(),
                             };

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty">The new <see cref="ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPublicSetReadOnlyCollection" /> using the specified <paramref name="readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" /> for <see cref="ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [SuppressMessage("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPublicSetReadOnlyCollection DeepCloneWithReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty(IReadOnlyCollection<CustomGenericClass<CustomClass>> readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty)
        {
            var result = new ModelAllPublicSetReadOnlyCollection
                             {
                                 ReadOnlyCollectionInterfaceOfBoolProperty                            = this.ReadOnlyCollectionInterfaceOfBoolProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfIntProperty                             = this.ReadOnlyCollectionInterfaceOfIntProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfStringProperty                          = this.ReadOnlyCollectionInterfaceOfStringProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfGuidProperty                            = this.ReadOnlyCollectionInterfaceOfGuidProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfDateTimeProperty                        = this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumProperty                      = this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty   = this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty                 = this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomClassProperty                     = this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomBaseClassProperty                 = this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.DeepClone(),
                                 ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = readOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty,
                             };

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPublicSetReadOnlyCollection: ReadOnlyCollectionInterfaceOfBoolProperty = {this.ReadOnlyCollectionInterfaceOfBoolProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfIntProperty = {this.ReadOnlyCollectionInterfaceOfIntProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfStringProperty = {this.ReadOnlyCollectionInterfaceOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfGuidProperty = {this.ReadOnlyCollectionInterfaceOfGuidProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfDateTimeProperty = {this.ReadOnlyCollectionInterfaceOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomEnumProperty = {this.ReadOnlyCollectionInterfaceOfCustomEnumProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty = {this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty = {this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomClassProperty = {this.ReadOnlyCollectionInterfaceOfCustomClassProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomBaseClassProperty = {this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty = {this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty?.ToString() ?? "<null>"}.");

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public IReadOnlyList<ValidationFailure> GetValidationFailures(
            ValidationOptions options = null,
            PropertyPathTracker propertyPathTracker = null)
        {
            options = options ?? new ValidationOptions();
            propertyPathTracker = propertyPathTracker ?? new PropertyPathTracker();

            bool stopOnFirstObjectWithFailures;
            switch (options.ValidateUntil)
            {
                case ValidateUntil.FullyTraversed:
                    stopOnFirstObjectWithFailures = false;
                    break;
                case ValidateUntil.FirstInvalidObject:
                    stopOnFirstObjectWithFailures = true;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidateUntil)} is not supported: {options.ValidateUntil}."));
            }

            bool validateProperties;
            switch (options.ValidationScope)
            {
                case ValidationScope.SelfAndProperties:
                    validateProperties = true;
                    break;
                case ValidationScope.SelfOnly:
                    validateProperties = false;
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(ValidationScope)} is not supported: {options.ValidationScope}."));
            }

            var result = new List<ValidationFailure>();

            void ValidateProperties()
            {
                IReadOnlyList<ValidationFailure> localValidationFailures;

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfBoolProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfBoolProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfIntProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfIntProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfStringProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfStringProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfGuidProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfGuidProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfDateTimeProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfDateTimeProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomEnumProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomEnumValidatedNotDefaultProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomFlagsEnumProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomClassProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomBaseClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }

                localValidationFailures = ValidatableExtensions.GetValidationFailures(this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty, options, propertyPathTracker, nameof(this.ReadOnlyCollectionInterfaceOfCustomGenericClassOfCustomClassProperty));
                result.AddRange(localValidationFailures);
                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return;
                }
            }

            void ValidateSelf()
            {
                var segmentSeparator = propertyPathTracker.HasSegments ? propertyPathTracker.SegmentSeparator : string.Empty;

                var selfValidationFailures = (this.GetSelfValidationFailures() ?? new SelfValidationFailure[0])
                    .Where(_ => _ != null)
                    .Select(_ =>
                    {
                        var propertyNames = _.PropertyNames.Count > 1
                            ? Invariant($"({string.Join("|", _.PropertyNames)})")
                            : _.PropertyNames.Single();

                        return new ValidationFailure(
                            this.GetType().ToStringReadable(),
                            Invariant($"{propertyPathTracker.FullPath}{segmentSeparator}{propertyNames}"),
                            _.Message);
                    })
                    .ToList();

                result.AddRange(selfValidationFailures);
            }

            if (options.ValidationOrder == ValidationOrder.PropertiesThenSelf)
            {
                if (validateProperties)
                {
                    ValidateProperties();
                }

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                ValidateSelf();
            }
            else if (options.ValidationOrder == ValidationOrder.SelfThenProperties)
            {
                ValidateSelf();

                if (stopOnFirstObjectWithFailures && result.Any())
                {
                    return result;
                }

                if (validateProperties)
                {
                    ValidateProperties();
                }
            }
            else
            {
                throw new NotSupportedException(Invariant($"This {nameof(ValidationOrder)} is not supported: {options.ValidationOrder}."));
            }

            return result;
        }

        /// <inheritdoc />
        public IReadOnlyList<SelfValidationFailure> GetSelfValidationFailures()
        {
            var result = new SelfValidationFailure[0];

            return result;
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelAllPrivateSetNoneChild2 : IModel<ModelAllPrivateSetNoneChild2>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPrivateSetNoneChild2"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelAllPrivateSetNoneChild2 left, ModelAllPrivateSetNoneChild2 right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPrivateSetNoneChild2"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelAllPrivateSetNoneChild2 left, ModelAllPrivateSetNoneChild2 right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelAllPrivateSetNoneChild2 other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ParentBoolProperty.IsEqualTo(other.ParentBoolProperty)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentGuidProperty.IsEqualTo(other.ParentGuidProperty)
                      && this.ParentDateTimeProperty.IsEqualTo(other.ParentDateTimeProperty)
                      && this.ParentCustomEnumProperty.IsEqualTo(other.ParentCustomEnumProperty)
                      && this.ParentCustomFlagsEnumProperty.IsEqualTo(other.ParentCustomFlagsEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.ParentCustomBaseClassProperty.IsEqualTo(other.ParentCustomBaseClassProperty)
                      && this.Child2BoolProperty.IsEqualTo(other.Child2BoolProperty)
                      && this.Child2IntProperty.IsEqualTo(other.Child2IntProperty)
                      && this.Child2StringProperty.IsEqualTo(other.Child2StringProperty, StringComparer.Ordinal)
                      && this.Child2GuidProperty.IsEqualTo(other.Child2GuidProperty)
                      && this.Child2DateTimeProperty.IsEqualTo(other.Child2DateTimeProperty)
                      && this.Child2CustomEnumProperty.IsEqualTo(other.Child2CustomEnumProperty)
                      && this.Child2CustomFlagsEnumProperty.IsEqualTo(other.Child2CustomFlagsEnumProperty)
                      && this.Child2CustomClassProperty.IsEqualTo(other.Child2CustomClassProperty)
                      && this.Child2CustomBaseClassProperty.IsEqualTo(other.Child2CustomBaseClassProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelAllPrivateSetNoneChild2);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentBoolProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentGuidProperty)
            .Hash(this.ParentDateTimeProperty)
            .Hash(this.ParentCustomEnumProperty)
            .Hash(this.ParentCustomFlagsEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.ParentCustomBaseClassProperty)
            .Hash(this.Child2BoolProperty)
            .Hash(this.Child2IntProperty)
            .Hash(this.Child2StringProperty)
            .Hash(this.Child2GuidProperty)
            .Hash(this.Child2DateTimeProperty)
            .Hash(this.Child2CustomEnumProperty)
            .Hash(this.Child2CustomFlagsEnumProperty)
            .Hash(this.Child2CustomClassProperty)
            .Hash(this.Child2CustomBaseClassProperty)
            .Value;

        /// <inheritdoc />
        public new ModelAllPrivateSetNoneChild2 DeepClone() => (ModelAllPrivateSetNoneChild2)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentBoolProperty(bool parentBoolProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 parentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 parentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 parentStringProperty,
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentGuidProperty(Guid parentGuidProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 parentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentDateTimeProperty(DateTime parentDateTimeProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 parentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomEnumProperty(CustomEnum parentCustomEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 parentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomFlagsEnumProperty(CustomFlagsEnum parentCustomFlagsEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 parentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 parentCustomClassProperty,
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomBaseClassProperty(CustomBaseClass parentCustomBaseClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 parentCustomBaseClassProperty,
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2BoolProperty" />.
        /// </summary>
        /// <param name="child2BoolProperty">The new <see cref="Child2BoolProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2BoolProperty" /> for <see cref="Child2BoolProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2BoolProperty(bool child2BoolProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2IntProperty" />.
        /// </summary>
        /// <param name="child2IntProperty">The new <see cref="Child2IntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2IntProperty" /> for <see cref="Child2IntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2IntProperty(int child2IntProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2StringProperty" />.
        /// </summary>
        /// <param name="child2StringProperty">The new <see cref="Child2StringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2StringProperty" /> for <see cref="Child2StringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2StringProperty(string child2StringProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 child2StringProperty,
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2GuidProperty" />.
        /// </summary>
        /// <param name="child2GuidProperty">The new <see cref="Child2GuidProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2GuidProperty" /> for <see cref="Child2GuidProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2GuidProperty(Guid child2GuidProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2DateTimeProperty" />.
        /// </summary>
        /// <param name="child2DateTimeProperty">The new <see cref="Child2DateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2DateTimeProperty" /> for <see cref="Child2DateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2DateTimeProperty(DateTime child2DateTimeProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2CustomEnumProperty" />.
        /// </summary>
        /// <param name="child2CustomEnumProperty">The new <see cref="Child2CustomEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2CustomEnumProperty" /> for <see cref="Child2CustomEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2CustomEnumProperty(CustomEnum child2CustomEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2CustomFlagsEnumProperty" />.
        /// </summary>
        /// <param name="child2CustomFlagsEnumProperty">The new <see cref="Child2CustomFlagsEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2CustomFlagsEnumProperty" /> for <see cref="Child2CustomFlagsEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2CustomFlagsEnumProperty(CustomFlagsEnum child2CustomFlagsEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2CustomClassProperty" />.
        /// </summary>
        /// <param name="child2CustomClassProperty">The new <see cref="Child2CustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2CustomClassProperty" /> for <see cref="Child2CustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2CustomClassProperty(CustomClass child2CustomClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 child2CustomClassProperty,
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child2CustomBaseClassProperty" />.
        /// </summary>
        /// <param name="child2CustomBaseClassProperty">The new <see cref="Child2CustomBaseClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild2" /> using the specified <paramref name="child2CustomBaseClassProperty" /> for <see cref="Child2CustomBaseClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ModelAllPrivateSetNoneChild2 DeepCloneWithChild2CustomBaseClassProperty(CustomBaseClass child2CustomBaseClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 child2CustomBaseClassProperty);

            return result;
        }

        /// <inheritdoc />
        protected override ModelAllPrivateSetNoneParent DeepCloneInternal()
        {
            var result = new ModelAllPrivateSetNoneChild2(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.ParentCustomBaseClassProperty?.DeepClone(),
                                 this.Child2BoolProperty,
                                 this.Child2IntProperty,
                                 this.Child2StringProperty?.Clone().ToString(),
                                 this.Child2GuidProperty,
                                 this.Child2DateTimeProperty,
                                 this.Child2CustomEnumProperty,
                                 this.Child2CustomFlagsEnumProperty,
                                 this.Child2CustomClassProperty?.DeepClone(),
                                 this.Child2CustomBaseClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetNoneChild2: ParentBoolProperty = {this.ParentBoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentGuidProperty = {this.ParentGuidProperty.ToString() ?? "<null>"}, ParentDateTimeProperty = {this.ParentDateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomEnumProperty = {this.ParentCustomEnumProperty.ToString() ?? "<null>"}, ParentCustomFlagsEnumProperty = {this.ParentCustomFlagsEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, ParentCustomBaseClassProperty = {this.ParentCustomBaseClassProperty?.ToString() ?? "<null>"}, Child2BoolProperty = {this.Child2BoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2IntProperty = {this.Child2IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2StringProperty = {this.Child2StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2GuidProperty = {this.Child2GuidProperty.ToString() ?? "<null>"}, Child2DateTimeProperty = {this.Child2DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child2CustomEnumProperty = {this.Child2CustomEnumProperty.ToString() ?? "<null>"}, Child2CustomFlagsEnumProperty = {this.Child2CustomFlagsEnumProperty.ToString() ?? "<null>"}, Child2CustomClassProperty = {this.Child2CustomClassProperty?.ToString() ?? "<null>"}, Child2CustomBaseClassProperty = {this.Child2CustomBaseClassProperty?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
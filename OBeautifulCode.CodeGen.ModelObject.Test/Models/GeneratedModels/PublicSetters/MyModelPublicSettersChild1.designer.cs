// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;

    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Type;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPublicSettersChild1 : IModel<MyModelPublicSettersChild1>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPublicSettersChild1"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(MyModelPublicSettersChild1 left, MyModelPublicSettersChild1 right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.ParentIntProperty.Equals(right.ParentIntProperty)
                      && left.ParentStringProperty.Equals(right.ParentStringProperty, StringComparison.Ordinal)
                      && left.ParentModelEquatableClassProperty.Equals(right.ParentModelEquatableClassProperty)
                      && left.ParentReadOnlyListOfIntProperty.IsEqualTo(right.ParentReadOnlyListOfIntProperty)
                      && left.ParentReadOnlyListOfStringProperty.IsEqualTo(right.ParentReadOnlyListOfStringProperty)
                      && left.ParentReadOnlyListOfModelEquatableClassProperty.IsEqualTo(right.ParentReadOnlyListOfModelEquatableClassProperty)
                      && left.Child1IntProperty.Equals(right.Child1IntProperty)
                      && left.Child1StringProperty.Equals(right.Child1StringProperty, StringComparison.Ordinal)
                      && left.Child1ModelEquatableClassProperty.Equals(right.Child1ModelEquatableClassProperty)
                      && left.Child1ReadOnlyListOfIntProperty.IsEqualTo(right.Child1ReadOnlyListOfIntProperty)
                      && left.Child1ReadOnlyListOfStringProperty.IsEqualTo(right.Child1ReadOnlyListOfStringProperty)
                      && left.Child1ReadOnlyListOfModelEquatableClassProperty.IsEqualTo(right.Child1ReadOnlyListOfModelEquatableClassProperty);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPublicSettersChild1"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items not equal; otherwise false.</returns>
        public static bool operator !=(MyModelPublicSettersChild1 left, MyModelPublicSettersChild1 right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(MyModelPublicSettersChild1 other) => this == other;

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as MyModelPublicSettersChild1);
    
        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentModelEquatableClassProperty)
            .Hash(this.ParentReadOnlyListOfIntProperty)
            .Hash(this.ParentReadOnlyListOfStringProperty)
            .Hash(this.ParentReadOnlyListOfModelEquatableClassProperty)
            .Hash(this.Child1IntProperty)
            .Hash(this.Child1StringProperty)
            .Hash(this.Child1ModelEquatableClassProperty)
            .Hash(this.Child1ReadOnlyListOfIntProperty)
            .Hash(this.Child1ReadOnlyListOfStringProperty)
            .Hash(this.Child1ReadOnlyListOfModelEquatableClassProperty)
            .Value;
    
        /// <inheritdoc />
        public new object Clone() => this.DeepClone();

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepClone()
        {
            var result = ((IDeepCloneable<MyModelPublicSettersChild1>)this).DeepClone();

            return result;
        }

        /// <inheritdoc />
        MyModelPublicSettersChild1 IDeepCloneable<MyModelPublicSettersChild1>.DeepClone()
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };

            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = parentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = parentStringProperty,
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentModelEquatableClassProperty(ModelEquatableClass parentModelEquatableClassProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = parentModelEquatableClassProperty,
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentReadOnlyListOfIntProperty(IReadOnlyList<int> parentReadOnlyListOfIntProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = parentReadOnlyListOfIntProperty,
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentReadOnlyListOfStringProperty(IReadOnlyList<string> parentReadOnlyListOfStringProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = parentReadOnlyListOfStringProperty,
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <inheritdoc />
        public override MyModelPublicSettersParent DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty(IReadOnlyList<ModelEquatableClass> parentReadOnlyListOfModelEquatableClassProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = parentReadOnlyListOfModelEquatableClassProperty,
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1IntProperty" />.
        /// </summary>
        /// <param name="child1IntProperty">The new <see cref="Child1IntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1IntProperty" /> for <see cref="Child1IntProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1IntProperty(int child1IntProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1StringProperty" />.
        /// </summary>
        /// <param name="child1StringProperty">The new <see cref="Child1StringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1StringProperty" /> for <see cref="Child1StringProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1StringProperty(string child1StringProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = child1StringProperty,
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1ModelEquatableClassProperty" />.
        /// </summary>
        /// <param name="child1ModelEquatableClassProperty">The new <see cref="Child1ModelEquatableClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1ModelEquatableClassProperty" /> for <see cref="Child1ModelEquatableClassProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1ModelEquatableClassProperty(ModelEquatableClass child1ModelEquatableClassProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = child1ModelEquatableClassProperty,
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1ReadOnlyListOfIntProperty" />.
        /// </summary>
        /// <param name="child1ReadOnlyListOfIntProperty">The new <see cref="Child1ReadOnlyListOfIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1ReadOnlyListOfIntProperty" /> for <see cref="Child1ReadOnlyListOfIntProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1ReadOnlyListOfIntProperty(IReadOnlyList<int> child1ReadOnlyListOfIntProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = child1ReadOnlyListOfIntProperty,
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1ReadOnlyListOfStringProperty" />.
        /// </summary>
        /// <param name="child1ReadOnlyListOfStringProperty">The new <see cref="Child1ReadOnlyListOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1ReadOnlyListOfStringProperty" /> for <see cref="Child1ReadOnlyListOfStringProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1ReadOnlyListOfStringProperty(IReadOnlyList<string> child1ReadOnlyListOfStringProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = child1ReadOnlyListOfStringProperty,
                                 Child1ReadOnlyListOfModelEquatableClassProperty = this.Child1ReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList()
                             };
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1ReadOnlyListOfModelEquatableClassProperty" />.
        /// </summary>
        /// <param name="child1ReadOnlyListOfModelEquatableClassProperty">The new <see cref="Child1ReadOnlyListOfModelEquatableClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersChild1" /> using the specified <paramref name="child1ReadOnlyListOfModelEquatableClassProperty" /> for <see cref="Child1ReadOnlyListOfModelEquatableClassProperty" /> and a deep clone of every other property.</returns>
        public MyModelPublicSettersChild1 DeepCloneWithChild1ReadOnlyListOfModelEquatableClassProperty(IReadOnlyList<ModelEquatableClass> child1ReadOnlyListOfModelEquatableClassProperty)
        {
            var result = new MyModelPublicSettersChild1
                             {
                                 ParentIntProperty                               = this.ParentIntProperty,
                                 ParentStringProperty                            = this.ParentStringProperty?.Clone().ToString(),
                                 ParentModelEquatableClassProperty               = this.ParentModelEquatableClassProperty?.DeepClone(),
                                 ParentReadOnlyListOfIntProperty                 = this.ParentReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 ParentReadOnlyListOfStringProperty              = this.ParentReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 ParentReadOnlyListOfModelEquatableClassProperty = this.ParentReadOnlyListOfModelEquatableClassProperty?.Select(i => i?.DeepClone()).ToList(),
                                 Child1IntProperty                               = this.Child1IntProperty,
                                 Child1StringProperty                            = this.Child1StringProperty?.Clone().ToString(),
                                 Child1ModelEquatableClassProperty               = this.Child1ModelEquatableClassProperty?.DeepClone(),
                                 Child1ReadOnlyListOfIntProperty                 = this.Child1ReadOnlyListOfIntProperty?.Select(i => i).ToList(),
                                 Child1ReadOnlyListOfStringProperty              = this.Child1ReadOnlyListOfStringProperty?.Select(i => i?.Clone().ToString()).ToList(),
                                 Child1ReadOnlyListOfModelEquatableClassProperty = child1ReadOnlyListOfModelEquatableClassProperty
                             };
            
            return result;
        }
    
        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"{nameof(OBeautifulCode.CodeGen.ModelObject.Test)}.{nameof(MyModelPublicSettersChild1)}: ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {this.ParentStringProperty?.ToString() ?? "<null>"}, ParentModelEquatableClassProperty = {this.ParentModelEquatableClassProperty?.ToString() ?? "<null>"}, ParentReadOnlyListOfIntProperty = {this.ParentReadOnlyListOfIntProperty?.ToString() ?? "<null>"}, ParentReadOnlyListOfStringProperty = {this.ParentReadOnlyListOfStringProperty?.ToString() ?? "<null>"}, ParentReadOnlyListOfModelEquatableClassProperty = {this.ParentReadOnlyListOfModelEquatableClassProperty?.ToString() ?? "<null>"}, Child1IntProperty = {this.Child1IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1StringProperty = {this.Child1StringProperty?.ToString() ?? "<null>"}, Child1ModelEquatableClassProperty = {this.Child1ModelEquatableClassProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListOfIntProperty = {this.Child1ReadOnlyListOfIntProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListOfStringProperty = {this.Child1ReadOnlyListOfStringProperty?.ToString() ?? "<null>"}, Child1ReadOnlyListOfModelEquatableClassProperty = {this.Child1ReadOnlyListOfModelEquatableClassProperty?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;

    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Type;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPrivateSettersParent : IModel<MyModelPrivateSettersParent>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPrivateSettersParent"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(MyModelPrivateSettersParent left, MyModelPrivateSettersParent right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals((object)right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPrivateSettersParent"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items not equal; otherwise false.</returns>
        public static bool operator !=(MyModelPrivateSettersParent left, MyModelPrivateSettersParent right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(MyModelPrivateSettersParent other) => this == other;

        /// <inheritdoc />
        public abstract override bool Equals(object obj);
    
        /// <inheritdoc />
        public abstract override int GetHashCode();
    
        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public abstract MyModelPrivateSettersParent DeepClone();

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentIntProperty" />.
        /// </summary>
        /// <param name="parentIntProperty">The new <see cref="ParentIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentIntProperty" /> for <see cref="ParentIntProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentIntProperty(int parentIntProperty);

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentStringProperty" />.
        /// </summary>
        /// <param name="parentStringProperty">The new <see cref="ParentStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentStringProperty" /> for <see cref="ParentStringProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentStringProperty(string parentStringProperty);

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentModelEquatableClassProperty" />.
        /// </summary>
        /// <param name="parentModelEquatableClassProperty">The new <see cref="ParentModelEquatableClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentModelEquatableClassProperty" /> for <see cref="ParentModelEquatableClassProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentModelEquatableClassProperty(ModelEquatableClass parentModelEquatableClassProperty);

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentReadOnlyListOfIntProperty" />.
        /// </summary>
        /// <param name="parentReadOnlyListOfIntProperty">The new <see cref="ParentReadOnlyListOfIntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentReadOnlyListOfIntProperty" /> for <see cref="ParentReadOnlyListOfIntProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentReadOnlyListOfIntProperty(IReadOnlyList<int> parentReadOnlyListOfIntProperty);

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentReadOnlyListOfStringProperty" />.
        /// </summary>
        /// <param name="parentReadOnlyListOfStringProperty">The new <see cref="ParentReadOnlyListOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentReadOnlyListOfStringProperty" /> for <see cref="ParentReadOnlyListOfStringProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentReadOnlyListOfStringProperty(IReadOnlyList<string> parentReadOnlyListOfStringProperty);

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentReadOnlyListOfModelEquatableClassProperty" />.
        /// </summary>
        /// <param name="parentReadOnlyListOfModelEquatableClassProperty">The new <see cref="ParentReadOnlyListOfModelEquatableClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPrivateSettersParent" /> using the specified <paramref name="parentReadOnlyListOfModelEquatableClassProperty" /> for <see cref="ParentReadOnlyListOfModelEquatableClassProperty" /> and a deep clone of every other property.</returns>
        public abstract MyModelPrivateSettersParent DeepCloneWithParentReadOnlyListOfModelEquatableClassProperty(IReadOnlyList<ModelEquatableClass> parentReadOnlyListOfModelEquatableClassProperty);
    
        /// <inheritdoc />
        public abstract override string ToString();
    }
}
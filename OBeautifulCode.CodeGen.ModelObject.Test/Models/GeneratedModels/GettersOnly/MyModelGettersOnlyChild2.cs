// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MyModelGettersOnlyChild2.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced OBeautifulCode.CodeGen.ModelObject.Test.CodeGeneratorTest.GenerateModel()
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.Collections.Generic;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Type;

    public partial class MyModelGettersOnlyChild2 : MyModelGettersOnlyParent, IModelViaCodeGen
    {
        public MyModelGettersOnlyChild2(
            int parentIntProperty,
            string parentStringProperty,
            ModelEquatableClass parentModelEquatableClassProperty,
            IReadOnlyList<int> parentReadOnlyListOfIntProperty,
            IReadOnlyList<string> parentReadOnlyListOfStringProperty,
            IReadOnlyList<ModelEquatableClass> parentReadOnlyListOfModelEquatableClassProperty,
            int child2IntProperty,
            string child2StringProperty,
            ModelEquatableClass child2ModelEquatableClassProperty,
            IReadOnlyList<int> child2ReadOnlyListOfIntProperty,
            IReadOnlyList<string> child2ReadOnlyListOfStringProperty,
            IReadOnlyList<ModelEquatableClass> child2ReadOnlyListOfModelEquatableClassProperty)
            : base(parentIntProperty, parentStringProperty, parentModelEquatableClassProperty, parentReadOnlyListOfIntProperty, parentReadOnlyListOfStringProperty, parentReadOnlyListOfModelEquatableClassProperty)
        {
            new { child2StringProperty }.AsArg().Must().NotBeNullNorWhiteSpace();
            new { child2ModelEquatableClassProperty }.AsArg().Must().NotBeNull();
            new { child2ReadOnlyListOfIntProperty }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();
            new { child2ReadOnlyListOfStringProperty }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();
            new { child2ReadOnlyListOfModelEquatableClassProperty }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();

            this.Child2IntProperty = child2IntProperty;
            this.Child2StringProperty = child2StringProperty;
            this.Child2ModelEquatableClassProperty = child2ModelEquatableClassProperty;
            this.Child2ReadOnlyListOfIntProperty = child2ReadOnlyListOfIntProperty;
            this.Child2ReadOnlyListOfStringProperty = child2ReadOnlyListOfStringProperty;
            this.Child2ReadOnlyListOfModelEquatableClassProperty = child2ReadOnlyListOfModelEquatableClassProperty;
        }

        public int Child2IntProperty { get; }

        public string Child2StringProperty { get; }

        public ModelEquatableClass Child2ModelEquatableClassProperty { get; }

        public IReadOnlyList<int> Child2ReadOnlyListOfIntProperty { get; }

        public IReadOnlyList<string> Child2ReadOnlyListOfStringProperty { get; }

        public IReadOnlyList<ModelEquatableClass> Child2ReadOnlyListOfModelEquatableClassProperty { get; }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;

    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Type;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelGettersOnly : IModel<MyModelGettersOnly>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelGettersOnly"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(MyModelGettersOnly left, MyModelGettersOnly right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.DateTimeProperty.Equals(right.DateTimeProperty)
                      && left.NullableDateTimeProperty.IsEqualTo(right.NullableDateTimeProperty)
                      && left.ArrayOfDateTimeProperty.IsEqualTo(right.ArrayOfDateTimeProperty)
                      && left.ArrayOfNullableDateTimeProperty.IsEqualTo(right.ArrayOfNullableDateTimeProperty)
                      && left.ReadOnlyCollectionOfDateTimeProperty.IsEqualTo(right.ReadOnlyCollectionOfDateTimeProperty)
                      && left.ReadOnlyCollectionOfNullableDateTimeProperty.IsEqualTo(right.ReadOnlyCollectionOfNullableDateTimeProperty)
                      && left.ReadOnlyListOfDateTimeProperty.IsEqualTo(right.ReadOnlyListOfDateTimeProperty)
                      && left.ReadOnlyListOfNullableDateTimeProperty.IsEqualTo(right.ReadOnlyListOfNullableDateTimeProperty)
                      && left.ReadOnlyDictionaryOfDateTimeProperty.IsEqualTo(right.ReadOnlyDictionaryOfDateTimeProperty)
                      && left.ReadOnlyDictionaryOfNullableDateTimeProperty.IsEqualTo(right.ReadOnlyDictionaryOfNullableDateTimeProperty)
                      && left.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.IsEqualTo(right.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)
                      && left.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty.IsEqualTo(right.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelGettersOnly"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items not equal; otherwise false.</returns>
        public static bool operator !=(MyModelGettersOnly left, MyModelGettersOnly right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(MyModelGettersOnly other) => this == other;

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as MyModelGettersOnly);
    
        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.DateTimeProperty)
            .Hash(this.NullableDateTimeProperty)
            .Hash(this.ArrayOfDateTimeProperty)
            .Hash(this.ArrayOfNullableDateTimeProperty)
            .Hash(this.ReadOnlyCollectionOfDateTimeProperty)
            .Hash(this.ReadOnlyCollectionOfNullableDateTimeProperty)
            .Hash(this.ReadOnlyListOfDateTimeProperty)
            .Hash(this.ReadOnlyListOfNullableDateTimeProperty)
            .Hash(this.ReadOnlyDictionaryOfDateTimeProperty)
            .Hash(this.ReadOnlyDictionaryOfNullableDateTimeProperty)
            .Hash(this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)
            .Hash(this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)
            .Value;
    
        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public MyModelGettersOnly DeepClone()
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DateTimeProperty" />.
        /// </summary>
        /// <param name="dateTimeProperty">The new <see cref="DateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="dateTimeProperty" /> for <see cref="DateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithDateTimeProperty(DateTime dateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 dateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="NullableDateTimeProperty" />.
        /// </summary>
        /// <param name="nullableDateTimeProperty">The new <see cref="NullableDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="nullableDateTimeProperty" /> for <see cref="NullableDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithNullableDateTimeProperty(DateTime? nullableDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 nullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ArrayOfDateTimeProperty" />.
        /// </summary>
        /// <param name="arrayOfDateTimeProperty">The new <see cref="ArrayOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="arrayOfDateTimeProperty" /> for <see cref="ArrayOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithArrayOfDateTimeProperty(DateTime[] arrayOfDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 arrayOfDateTimeProperty,
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ArrayOfNullableDateTimeProperty" />.
        /// </summary>
        /// <param name="arrayOfNullableDateTimeProperty">The new <see cref="ArrayOfNullableDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="arrayOfNullableDateTimeProperty" /> for <see cref="ArrayOfNullableDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithArrayOfNullableDateTimeProperty(DateTime?[] arrayOfNullableDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 arrayOfNullableDateTimeProperty,
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionOfDateTimeProperty">The new <see cref="ReadOnlyCollectionOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyCollectionOfDateTimeProperty" /> for <see cref="ReadOnlyCollectionOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyCollectionOfDateTimeProperty(IReadOnlyCollection<DateTime> readOnlyCollectionOfDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 readOnlyCollectionOfDateTimeProperty,
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyCollectionOfNullableDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyCollectionOfNullableDateTimeProperty">The new <see cref="ReadOnlyCollectionOfNullableDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyCollectionOfNullableDateTimeProperty" /> for <see cref="ReadOnlyCollectionOfNullableDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyCollectionOfNullableDateTimeProperty(IReadOnlyCollection<DateTime?> readOnlyCollectionOfNullableDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 readOnlyCollectionOfNullableDateTimeProperty,
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyListOfDateTimeProperty">The new <see cref="ReadOnlyListOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyListOfDateTimeProperty" /> for <see cref="ReadOnlyListOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyListOfDateTimeProperty(IReadOnlyList<DateTime> readOnlyListOfDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 readOnlyListOfDateTimeProperty,
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListOfNullableDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyListOfNullableDateTimeProperty">The new <see cref="ReadOnlyListOfNullableDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyListOfNullableDateTimeProperty" /> for <see cref="ReadOnlyListOfNullableDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyListOfNullableDateTimeProperty(IReadOnlyList<DateTime?> readOnlyListOfNullableDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 readOnlyListOfNullableDateTimeProperty,
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDictionaryOfDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyDictionaryOfDateTimeProperty">The new <see cref="ReadOnlyDictionaryOfDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyDictionaryOfDateTimeProperty" /> for <see cref="ReadOnlyDictionaryOfDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyDictionaryOfDateTimeProperty(IReadOnlyDictionary<DateTime, DateTime> readOnlyDictionaryOfDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 readOnlyDictionaryOfDateTimeProperty,
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDictionaryOfNullableDateTimeProperty" />.
        /// </summary>
        /// <param name="readOnlyDictionaryOfNullableDateTimeProperty">The new <see cref="ReadOnlyDictionaryOfNullableDateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyDictionaryOfNullableDateTimeProperty" /> for <see cref="ReadOnlyDictionaryOfNullableDateTimeProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyDictionaryOfNullableDateTimeProperty(IReadOnlyDictionary<DateTime?, DateTime?> readOnlyDictionaryOfNullableDateTimeProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 readOnlyDictionaryOfNullableDateTimeProperty,
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" />.
        /// </summary>
        /// <param name="readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty">The new <see cref="ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" /> for <see cref="ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(IReadOnlyDictionary<string, IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>> readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 readOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty,
                                 this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.Select(i => (IReadOnlyDictionary<DateTime, IReadOnlyList<string>>)i?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyList<string>)v2.Value?.Select(i3 => i3?.Clone().ToString()).ToList())).ToList());
            
            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" />.
        /// </summary>
        /// <param name="readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty">The new <see cref="ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelGettersOnly" /> using the specified <paramref name="readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" /> for <see cref="ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty" /> and a deep clone of every other property.</returns>
        public MyModelGettersOnly DeepCloneWithReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty(IReadOnlyList<IReadOnlyDictionary<DateTime, IReadOnlyList<string>>> readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty)
        {
            var result = new MyModelGettersOnly(
                                 this.DateTimeProperty,
                                 this.NullableDateTimeProperty,
                                 this.ArrayOfDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ArrayOfNullableDateTimeProperty?.Select(i => i).ToArray(),
                                 this.ReadOnlyCollectionOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyCollectionOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyListOfNullableDateTimeProperty?.Select(i => i).ToList(),
                                 this.ReadOnlyDictionaryOfDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToDictionary(k => k.Key, v => v.Value),
                                 this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToDictionary(k => k.Key?.Clone().ToString(), v => (IReadOnlyDictionary<DateTime, IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>>)v.Value?.ToDictionary(k2 => k2.Key, v2 => (IReadOnlyDictionary<ModelClass, IReadOnlyList<string>>)v2.Value?.ToDictionary(k3 => k3.Key?.DeepClone(), v3 => (IReadOnlyList<string>)v3.Value?.Select(i4 => i4?.Clone().ToString()).ToList()))),
                                 readOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty);
            
            return result;
        }
    
        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"{nameof(OBeautifulCode.CodeGen.ModelObject.Test)}.{nameof(MyModelGettersOnly)}: DateTimeProperty = {this.DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, NullableDateTimeProperty = {this.NullableDateTimeProperty?.ToString() ?? "<null>"}, ArrayOfDateTimeProperty = {this.ArrayOfDateTimeProperty?.ToString() ?? "<null>"}, ArrayOfNullableDateTimeProperty = {this.ArrayOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionOfDateTimeProperty = {this.ReadOnlyCollectionOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyCollectionOfNullableDateTimeProperty = {this.ReadOnlyCollectionOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyListOfDateTimeProperty = {this.ReadOnlyListOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyListOfNullableDateTimeProperty = {this.ReadOnlyListOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfDateTimeProperty = {this.ReadOnlyDictionaryOfDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfNullableDateTimeProperty = {this.ReadOnlyDictionaryOfNullableDateTimeProperty?.ToString() ?? "<null>"}, ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = {this.ReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToString() ?? "<null>"}, ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty = {this.ReadOnlyListOfReadOnlyDictionaryOfReadOnlyListOfStringProperty?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MyModelGettersOnlyChild1.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced OBeautifulCode.CodeGen.ModelObject.Test.CodeGeneratorTest.GenerateModel()
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.Collections.Generic;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Type;

    public partial class MyModelGettersOnlyChild1 : MyModelGettersOnlyParent, IModelViaCodeGen
    {
        public MyModelGettersOnlyChild1(
            int parentIntProperty,
            string parentStringProperty,
            ModelEquatableClass parentModelEquatableClassProperty,
            IReadOnlyList<int> parentReadOnlyListOfIntProperty,
            IReadOnlyList<string> parentReadOnlyListOfStringProperty,
            IReadOnlyList<ModelEquatableClass> parentReadOnlyListOfModelEquatableClassProperty,
            int child1IntProperty,
            string child1StringProperty,
            ModelEquatableClass child1ModelEquatableClassProperty,
            IReadOnlyList<int> child1ReadOnlyListOfIntProperty,
            IReadOnlyList<string> child1ReadOnlyListOfStringProperty,
            IReadOnlyList<ModelEquatableClass> child1ReadOnlyListOfModelEquatableClassProperty)
            : base(parentIntProperty, parentStringProperty, parentModelEquatableClassProperty, parentReadOnlyListOfIntProperty, parentReadOnlyListOfStringProperty, parentReadOnlyListOfModelEquatableClassProperty)
        {
            new { child1StringProperty }.AsArg().Must().NotBeNullNorWhiteSpace();
            new { child1ModelEquatableClassProperty }.AsArg().Must().NotBeNull();
            new { child1ReadOnlyListOfIntProperty }.AsArg().Must().NotBeNullNorEmptyEnumerable();
            new { child1ReadOnlyListOfStringProperty }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();
            new { child1ReadOnlyListOfModelEquatableClassProperty }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();

            this.Child1IntProperty = child1IntProperty;
            this.Child1StringProperty = child1StringProperty;
            this.Child1ModelEquatableClassProperty = child1ModelEquatableClassProperty;
            this.Child1ReadOnlyListOfIntProperty = child1ReadOnlyListOfIntProperty;
            this.Child1ReadOnlyListOfStringProperty = child1ReadOnlyListOfStringProperty;
            this.Child1ReadOnlyListOfModelEquatableClassProperty = child1ReadOnlyListOfModelEquatableClassProperty;
        }

        public int Child1IntProperty { get; }

        public string Child1StringProperty { get; }

        public ModelEquatableClass Child1ModelEquatableClassProperty { get; }

        public IReadOnlyList<int> Child1ReadOnlyListOfIntProperty { get; }

        public IReadOnlyList<string> Child1ReadOnlyListOfStringProperty { get; }

        public IReadOnlyList<ModelEquatableClass> Child1ReadOnlyListOfModelEquatableClassProperty { get; }
    }
}
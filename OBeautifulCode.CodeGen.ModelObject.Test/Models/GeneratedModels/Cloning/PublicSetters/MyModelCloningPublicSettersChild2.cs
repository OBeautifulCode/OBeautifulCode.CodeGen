// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MyModelCloningPublicSettersChild2.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced OBeautifulCode.CodeGen.ModelObject.Test.CodeGeneratorTest.GenerateModel()
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;

    using FakeItEasy;

    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Type;

    public partial class MyModelCloningPublicSettersChild2 : MyModelCloningPublicSettersParent, IDeepCloneableViaCodeGen, IDeclareDeepCloneMethod<MyModelCloningPublicSettersChild2>
    {
        public bool Child2BoolProperty { get; set; }

        public int Child2IntProperty { get; set; }

        public string Child2StringProperty { get; set; }

        public Guid Child2GuidProperty { get; set; }

        public DateTime Child2DateTimeProperty { get; set; }

        public ModelEnum Child2ModelEnumProperty { get; set; }

        public ModelFlagsEnum Child2ModelFlagsEnumProperty { get; set; }

        public ModelClass Child2ModelClassProperty { get; set; }

        public bool? Child2NullableBoolProperty { get; set; }

        public int? Child2NullableIntProperty { get; set; }

        public Guid? Child2NullableGuidProperty { get; set; }

        public DateTime? Child2NullableDateTimeProperty { get; set; }

        public ModelEnum? Child2NullableModelEnumProperty { get; set; }

        public ModelFlagsEnum? Child2NullableModelFlagsEnumProperty { get; set; }

        public bool[] Child2ArrayOfBoolProperty { get; set; }

        public int[] Child2ArrayOfIntProperty { get; set; }

        public string[] Child2ArrayOfStringProperty { get; set; }

        public Guid[] Child2ArrayOfGuidProperty { get; set; }

        public DateTime[] Child2ArrayOfDateTimeProperty { get; set; }

        public ModelEnum[] Child2ArrayOfModelEnumProperty { get; set; }

        public ModelFlagsEnum[] Child2ArrayOfModelFlagsEnumProperty { get; set; }

        public ModelClass[] Child2ArrayOfModelClassProperty { get; set; }

        public bool?[] Child2ArrayOfNullableBoolProperty { get; set; }

        public int?[] Child2ArrayOfNullableIntProperty { get; set; }

        public Guid?[] Child2ArrayOfNullableGuidProperty { get; set; }

        public DateTime?[] Child2ArrayOfNullableDateTimeProperty { get; set; }

        public ModelEnum?[] Child2ArrayOfNullableModelEnumProperty { get; set; }

        public ModelFlagsEnum?[] Child2ArrayOfNullableModelFlagsEnumProperty { get; set; }

        public IReadOnlyCollection<bool> Child2ReadOnlyCollectionInterfaceOfBoolProperty { get; set; }

        public IReadOnlyCollection<int> Child2ReadOnlyCollectionInterfaceOfIntProperty { get; set; }

        public IReadOnlyCollection<string> Child2ReadOnlyCollectionInterfaceOfStringProperty { get; set; }

        public IReadOnlyCollection<Guid> Child2ReadOnlyCollectionInterfaceOfGuidProperty { get; set; }

        public IReadOnlyCollection<DateTime> Child2ReadOnlyCollectionInterfaceOfDateTimeProperty { get; set; }

        public IReadOnlyCollection<ModelEnum> Child2ReadOnlyCollectionInterfaceOfModelEnumProperty { get; set; }

        public IReadOnlyCollection<ModelFlagsEnum> Child2ReadOnlyCollectionInterfaceOfModelFlagsEnumProperty { get; set; }

        public IReadOnlyCollection<ModelClass> Child2ReadOnlyCollectionInterfaceOfModelClassProperty { get; set; }

        public IReadOnlyCollection<bool?> Child2ReadOnlyCollectionInterfaceOfNullableBoolProperty { get; set; }

        public IReadOnlyCollection<int?> Child2ReadOnlyCollectionInterfaceOfNullableIntProperty { get; set; }

        public IReadOnlyCollection<Guid?> Child2ReadOnlyCollectionInterfaceOfNullableGuidProperty { get; set; }

        public IReadOnlyCollection<DateTime?> Child2ReadOnlyCollectionInterfaceOfNullableDateTimeProperty { get; set; }

        public IReadOnlyCollection<ModelEnum?> Child2ReadOnlyCollectionInterfaceOfNullableModelEnumProperty { get; set; }

        public IReadOnlyCollection<ModelFlagsEnum?> Child2ReadOnlyCollectionInterfaceOfNullableModelFlagsEnumProperty { get; set; }

        public IReadOnlyList<bool> Child2ReadOnlyListInterfaceOfBoolProperty { get; set; }

        public IReadOnlyList<int> Child2ReadOnlyListInterfaceOfIntProperty { get; set; }

        public IReadOnlyList<string> Child2ReadOnlyListInterfaceOfStringProperty { get; set; }

        public IReadOnlyList<Guid> Child2ReadOnlyListInterfaceOfGuidProperty { get; set; }

        public IReadOnlyList<DateTime> Child2ReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public IReadOnlyList<ModelEnum> Child2ReadOnlyListInterfaceOfModelEnumProperty { get; set; }

        public IReadOnlyList<ModelFlagsEnum> Child2ReadOnlyListInterfaceOfModelFlagsEnumProperty { get; set; }

        public IReadOnlyList<ModelClass> Child2ReadOnlyListInterfaceOfModelClassProperty { get; set; }

        public IReadOnlyList<bool?> Child2ReadOnlyListInterfaceOfNullableBoolProperty { get; set; }

        public IReadOnlyList<int?> Child2ReadOnlyListInterfaceOfNullableIntProperty { get; set; }

        public IReadOnlyList<Guid?> Child2ReadOnlyListInterfaceOfNullableGuidProperty { get; set; }

        public IReadOnlyList<DateTime?> Child2ReadOnlyListInterfaceOfNullableDateTimeProperty { get; set; }

        public IReadOnlyList<ModelEnum?> Child2ReadOnlyListInterfaceOfNullableModelEnumProperty { get; set; }

        public IReadOnlyList<ModelFlagsEnum?> Child2ReadOnlyListInterfaceOfNullableModelFlagsEnumProperty { get; set; }

        public IReadOnlyDictionary<bool, bool> Child2ReadOnlyDictionaryInterfaceOfBoolProperty { get; set; }

        public IReadOnlyDictionary<int, int> Child2ReadOnlyDictionaryInterfaceOfIntProperty { get; set; }

        public IReadOnlyDictionary<string, string> Child2ReadOnlyDictionaryInterfaceOfStringProperty { get; set; }

        public IReadOnlyDictionary<Guid, Guid> Child2ReadOnlyDictionaryInterfaceOfGuidProperty { get; set; }

        public IReadOnlyDictionary<ModelEnum, ModelEnum> Child2ReadOnlyDictionaryInterfaceOfModelEnumProperty { get; set; }

        public IReadOnlyDictionary<ModelFlagsEnum, ModelFlagsEnum> Child2ReadOnlyDictionaryInterfaceOfModelFlagsEnumProperty { get; set; }

        public IReadOnlyDictionary<ModelClass, ModelClass> Child2ReadOnlyDictionaryInterfaceOfModelClassProperty { get; set; }

        public IReadOnlyDictionary<bool?, bool?> Child2ReadOnlyDictionaryInterfaceOfNullableBoolProperty { get; set; }

        public IReadOnlyDictionary<int?, int?> Child2ReadOnlyDictionaryInterfaceOfNullableIntProperty { get; set; }

        public IReadOnlyDictionary<Guid?, Guid?> Child2ReadOnlyDictionaryInterfaceOfNullableGuidProperty { get; set; }

        public IReadOnlyDictionary<ModelEnum?, ModelEnum?> Child2ReadOnlyDictionaryInterfaceOfNullableModelEnumProperty { get; set; }

        public IReadOnlyDictionary<ModelFlagsEnum?, ModelFlagsEnum?> Child2ReadOnlyDictionaryInterfaceOfNullableModelFlagsEnumProperty { get; set; }

        public ICollection<string> Child2CollectionInterfaceOfStringProperty { get; set; }

        public Collection<ICollection<string>> Child2CollectionOfCollectionInterfaceOfStringProperty { get; set; }

        public IList<ICollection<string>> Child2ListInterfaceOfCollectionInterfaceOfStringProperty { get; set; }

        public List<ICollection<string>> Child2ListOfCollectionInterfaceOfStringProperty { get; set; }

        public ReadOnlyCollection<ICollection<string>> Child2ReadOnlyCollectionOfCollectionInterfaceOfStringProperty { get; set; }

        public IDictionary<string, IReadOnlyList<DateTime>> Child2DictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public Dictionary<string, IReadOnlyList<DateTime>> Child2DictionaryOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public ReadOnlyDictionary<string, IReadOnlyList<DateTime>> Child2ReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public ConcurrentDictionary<string, IReadOnlyList<DateTime>> Child2ConcurrentDictionaryOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public IReadOnlyList<IReadOnlyDictionary<string, IReadOnlyList<DateTime>>> Child2ReadOnlyListInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        public IReadOnlyDictionary<string, IReadOnlyDictionary<string, ReadOnlyDictionary<ModelClass, IReadOnlyList<DateTime>>>> Child2ReadOnlyDictionaryInterfaceOfReadOnlyDictionaryInterfaceOfReadOnlyDictionaryOfReadOnlyListInterfaceOfDateTimeProperty { get; set; }

        /// <inheritdoc />
        MyModelCloningPublicSettersChild2 IDeclareDeepCloneMethod<MyModelCloningPublicSettersChild2>.DeepClone()
        {
            var result = this.DeepCloneInternal();

            return result;
        }

        private MyModelCloningPublicSettersChild2 DeepCloneInternal()
        {
            var referenceModel = A.Dummy<MyModelAllPublicSettersChild2>();

            var referenceModelProperties = referenceModel.GetType().GetProperties();

            foreach (var referenceModelProperty in referenceModelProperties)
            {
                referenceModelProperty.DeclaringType.GetProperty(referenceModelProperty.Name).SetValue(referenceModel, this.GetType().GetProperty(referenceModelProperty.Name).GetValue(this));
            }

            referenceModel = (MyModelAllPublicSettersChild2)referenceModel.GetType().GetMethod("DeepClone").Invoke(referenceModel, new object[0]);

            var thisModelProperties = this.GetType().GetProperties();

            var result = A.Dummy<MyModelCloningPublicSettersChild2>();

            foreach (var thisModelProperty in thisModelProperties)
            {
                thisModelProperty.DeclaringType.GetProperty(thisModelProperty.Name).SetValue(result, referenceModel.GetType().GetProperty(thisModelProperty.Name).GetValue(referenceModel));
            }

            return result;
        }
    }
}
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ModelAllPrivateSetNoneChild1 : IModel<ModelAllPrivateSetNoneChild1>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPrivateSetNoneChild1"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ModelAllPrivateSetNoneChild1 left, ModelAllPrivateSetNoneChild1 right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ModelAllPrivateSetNoneChild1"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ModelAllPrivateSetNoneChild1 left, ModelAllPrivateSetNoneChild1 right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ModelAllPrivateSetNoneChild1 other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.ParentBoolProperty.IsEqualTo(other.ParentBoolProperty)
                      && this.ParentIntProperty.IsEqualTo(other.ParentIntProperty)
                      && this.ParentStringProperty.IsEqualTo(other.ParentStringProperty, StringComparer.Ordinal)
                      && this.ParentGuidProperty.IsEqualTo(other.ParentGuidProperty)
                      && this.ParentDateTimeProperty.IsEqualTo(other.ParentDateTimeProperty)
                      && this.ParentCustomEnumProperty.IsEqualTo(other.ParentCustomEnumProperty)
                      && this.ParentCustomFlagsEnumProperty.IsEqualTo(other.ParentCustomFlagsEnumProperty)
                      && this.ParentCustomClassProperty.IsEqualTo(other.ParentCustomClassProperty)
                      && this.Child1BoolProperty.IsEqualTo(other.Child1BoolProperty)
                      && this.Child1IntProperty.IsEqualTo(other.Child1IntProperty)
                      && this.Child1StringProperty.IsEqualTo(other.Child1StringProperty, StringComparer.Ordinal)
                      && this.Child1GuidProperty.IsEqualTo(other.Child1GuidProperty)
                      && this.Child1DateTimeProperty.IsEqualTo(other.Child1DateTimeProperty)
                      && this.Child1CustomEnumProperty.IsEqualTo(other.Child1CustomEnumProperty)
                      && this.Child1CustomFlagsEnumProperty.IsEqualTo(other.Child1CustomFlagsEnumProperty)
                      && this.Child1CustomClassProperty.IsEqualTo(other.Child1CustomClassProperty);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ModelAllPrivateSetNoneChild1);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.ParentBoolProperty)
            .Hash(this.ParentIntProperty)
            .Hash(this.ParentStringProperty)
            .Hash(this.ParentGuidProperty)
            .Hash(this.ParentDateTimeProperty)
            .Hash(this.ParentCustomEnumProperty)
            .Hash(this.ParentCustomFlagsEnumProperty)
            .Hash(this.ParentCustomClassProperty)
            .Hash(this.Child1BoolProperty)
            .Hash(this.Child1IntProperty)
            .Hash(this.Child1StringProperty)
            .Hash(this.Child1GuidProperty)
            .Hash(this.Child1DateTimeProperty)
            .Hash(this.Child1CustomEnumProperty)
            .Hash(this.Child1CustomFlagsEnumProperty)
            .Hash(this.Child1CustomClassProperty)
            .Value;

        /// <inheritdoc />
        public new ModelAllPrivateSetNoneChild1 DeepClone() => (ModelAllPrivateSetNoneChild1)this.DeepCloneInternal();

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentBoolProperty(bool parentBoolProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 parentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentIntProperty(int parentIntProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 parentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentStringProperty(string parentStringProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 parentStringProperty,
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentGuidProperty(Guid parentGuidProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 parentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentDateTimeProperty(DateTime parentDateTimeProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 parentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomEnumProperty(CustomEnum parentCustomEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 parentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomFlagsEnumProperty(CustomFlagsEnum parentCustomFlagsEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 parentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public override ModelAllPrivateSetNoneParent DeepCloneWithParentCustomClassProperty(CustomClass parentCustomClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 parentCustomClassProperty,
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1BoolProperty" />.
        /// </summary>
        /// <param name="child1BoolProperty">The new <see cref="Child1BoolProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1BoolProperty" /> for <see cref="Child1BoolProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1BoolProperty(bool child1BoolProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1IntProperty" />.
        /// </summary>
        /// <param name="child1IntProperty">The new <see cref="Child1IntProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1IntProperty" /> for <see cref="Child1IntProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1IntProperty(int child1IntProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1StringProperty" />.
        /// </summary>
        /// <param name="child1StringProperty">The new <see cref="Child1StringProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1StringProperty" /> for <see cref="Child1StringProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1StringProperty(string child1StringProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 child1StringProperty,
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1GuidProperty" />.
        /// </summary>
        /// <param name="child1GuidProperty">The new <see cref="Child1GuidProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1GuidProperty" /> for <see cref="Child1GuidProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1GuidProperty(Guid child1GuidProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1DateTimeProperty" />.
        /// </summary>
        /// <param name="child1DateTimeProperty">The new <see cref="Child1DateTimeProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1DateTimeProperty" /> for <see cref="Child1DateTimeProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1DateTimeProperty(DateTime child1DateTimeProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1CustomEnumProperty" />.
        /// </summary>
        /// <param name="child1CustomEnumProperty">The new <see cref="Child1CustomEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1CustomEnumProperty" /> for <see cref="Child1CustomEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1CustomEnumProperty(CustomEnum child1CustomEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1CustomFlagsEnumProperty" />.
        /// </summary>
        /// <param name="child1CustomFlagsEnumProperty">The new <see cref="Child1CustomFlagsEnumProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1CustomFlagsEnumProperty" /> for <see cref="Child1CustomFlagsEnumProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1CustomFlagsEnumProperty(CustomFlagsEnum child1CustomFlagsEnumProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Child1CustomClassProperty" />.
        /// </summary>
        /// <param name="child1CustomClassProperty">The new <see cref="Child1CustomClassProperty" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ModelAllPrivateSetNoneChild1" /> using the specified <paramref name="child1CustomClassProperty" /> for <see cref="Child1CustomClassProperty" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public ModelAllPrivateSetNoneChild1 DeepCloneWithChild1CustomClassProperty(CustomClass child1CustomClassProperty)
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 child1CustomClassProperty);

            return result;
        }

        /// <inheritdoc />
        protected override ModelAllPrivateSetNoneParent DeepCloneInternal()
        {
            var result = new ModelAllPrivateSetNoneChild1(
                                 this.ParentBoolProperty,
                                 this.ParentIntProperty,
                                 this.ParentStringProperty?.Clone().ToString(),
                                 this.ParentGuidProperty,
                                 this.ParentDateTimeProperty,
                                 this.ParentCustomEnumProperty,
                                 this.ParentCustomFlagsEnumProperty,
                                 this.ParentCustomClassProperty?.DeepClone(),
                                 this.Child1BoolProperty,
                                 this.Child1IntProperty,
                                 this.Child1StringProperty?.Clone().ToString(),
                                 this.Child1GuidProperty,
                                 this.Child1DateTimeProperty,
                                 this.Child1CustomEnumProperty,
                                 this.Child1CustomFlagsEnumProperty,
                                 this.Child1CustomClassProperty?.DeepClone());

            return result;
        }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.CodeGen.ModelObject.Test.ModelAllPrivateSetNoneChild1: ParentBoolProperty = {this.ParentBoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentIntProperty = {this.ParentIntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentStringProperty = {this.ParentStringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentGuidProperty = {this.ParentGuidProperty.ToString() ?? "<null>"}, ParentDateTimeProperty = {this.ParentDateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ParentCustomEnumProperty = {this.ParentCustomEnumProperty.ToString() ?? "<null>"}, ParentCustomFlagsEnumProperty = {this.ParentCustomFlagsEnumProperty.ToString() ?? "<null>"}, ParentCustomClassProperty = {this.ParentCustomClassProperty?.ToString() ?? "<null>"}, Child1BoolProperty = {this.Child1BoolProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1IntProperty = {this.Child1IntProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1StringProperty = {this.Child1StringProperty?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1GuidProperty = {this.Child1GuidProperty.ToString() ?? "<null>"}, Child1DateTimeProperty = {this.Child1DateTimeProperty.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Child1CustomEnumProperty = {this.Child1CustomEnumProperty.ToString() ?? "<null>"}, Child1CustomFlagsEnumProperty = {this.Child1CustomFlagsEnumProperty.ToString() ?? "<null>"}, Child1CustomClassProperty = {this.Child1CustomClassProperty?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}
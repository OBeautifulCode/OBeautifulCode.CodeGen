// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.0.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;

    using OBeautifulCode.Equality.Recipes;
    using OBeautifulCode.Type;
    using OBeautifulCode.Type.Recipes;

    using static System.FormattableString;

    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.0.0")]
    public partial class MyModelPublicSettersNotEmptyParent : IModel<MyModelPublicSettersNotEmptyParent>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPublicSettersNotEmptyParent"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(MyModelPublicSettersNotEmptyParent left, MyModelPublicSettersNotEmptyParent right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals((object)right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="MyModelPublicSettersNotEmptyParent"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items not equal; otherwise false.</returns>
        public static bool operator !=(MyModelPublicSettersNotEmptyParent left, MyModelPublicSettersNotEmptyParent right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(MyModelPublicSettersNotEmptyParent other) => this == other;

        /// <inheritdoc />
        public abstract override bool Equals(object obj);

        /// <inheritdoc />
        public abstract override int GetHashCode();

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public abstract MyModelPublicSettersNotEmptyParent DeepClone();

        /// <summary>
        /// Deep clones this object with a new <see cref="ParentReadOnlyDictionaryOfStringString" />.
        /// </summary>
        /// <param name="parentReadOnlyDictionaryOfStringString">The new <see cref="ParentReadOnlyDictionaryOfStringString" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="MyModelPublicSettersNotEmptyParent" /> using the specified <paramref name="parentReadOnlyDictionaryOfStringString" /> for <see cref="ParentReadOnlyDictionaryOfStringString" /> and a deep clone of every other property.</returns>
        public abstract MyModelPublicSettersNotEmptyParent DeepCloneWithParentReadOnlyDictionaryOfStringString(IReadOnlyDictionary<string, string> parentReadOnlyDictionaryOfStringString);

        /// <inheritdoc />
        public abstract override string ToString();
    }
}
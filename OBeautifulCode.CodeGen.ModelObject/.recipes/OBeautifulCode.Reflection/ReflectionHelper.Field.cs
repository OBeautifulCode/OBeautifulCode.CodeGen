// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReflectionHelper.Field.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Reflection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Reflection;

    using OBeautifulCode.Type.Recipes;

#if !OBeautifulCodeReflectionSolution
    internal
#else
    public
#endif
    static partial class ReflectionHelper
    {
        /// <summary>
        /// Determines if an object has a given field.
        /// </summary>
        /// <param name="item">Object to check for field.</param>
        /// <param name="fieldName">The name of the field to check for.</param>
        /// <param name="bindingFlags">Optional binding flags to use during reflection operations.</param>
        /// <returns>
        /// true if the object has the specified field, false if not.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="item"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static bool HasField(
            this object item,
            string fieldName,
            BindingFlags bindingFlags = DefaultBindingFlags) =>
            GetFieldInfo(item?.GetType(), fieldName, bindingFlags) != null;

        /// <summary>
        /// Gets the names of all fields.
        /// </summary>
        /// <param name="type">The type.</param>
        /// <param name="bindingFlags">The binding flags to use.</param>
        /// <returns>Collection of property names.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static IReadOnlyCollection<string> GetFieldNames(
            this Type type,
            BindingFlags bindingFlags = DefaultBindingFlags)
        {
            if (type == null)
            {
                throw new ArgumentNullException(nameof(type));
            }

            var allProperties = type.GetFields(bindingFlags);

            var result = allProperties.Select(_ => _.Name).ToList();

            return result;
        }

        /// <summary>
        /// Returns a field value from a given object.
        /// </summary>
        /// <typeparam name="T">Type of the field.</typeparam>
        /// <param name="type">Type to get field value on (will only get static fields).</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <param name="bindingFlags">Optional binding flags to use during reflection operations.</param>
        /// <returns>
        /// The value of the field.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="type"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        /// <exception cref="InvalidOperationException">The field was not found.</exception>
        /// <exception cref="InvalidCastException">The field is not of type T.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static T GetFieldValue<T>(
            this Type type,
            string fieldName,
            BindingFlags bindingFlags = DefaultBindingFlags)
        {
            if (type == null)
            {
                throw new ArgumentNullException(nameof(type));
            }

            var fi = type.GetFieldInfo(fieldName, bindingFlags);

            if (fi == null)
            {
                throw new InvalidOperationException($"Field {fieldName} was not found on type {type.FullName}");
            }

            var result = fi.GetFieldValue<T>(null);

            return result;
        }

        /// <summary>
        /// Returns a field value from a given object.
        /// </summary>
        /// <typeparam name="T">Type of the field.</typeparam>
        /// <param name="item">Object from which the field value is returned.</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <param name="bindingFlags">Optional binding flags to use during reflection operations.</param>
        /// <returns>
        /// The value of the field.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="item"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        /// <exception cref="InvalidOperationException">The field was not found.</exception>
        /// <exception cref="InvalidCastException">The field is not of type T.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static T GetFieldValue<T>(
            this object item,
            string fieldName,
            BindingFlags bindingFlags = DefaultBindingFlags)
        {
            if (item == null)
            {
                throw new ArgumentNullException(nameof(item));
            }

            var fi = item.GetType().GetFieldInfo(fieldName, bindingFlags);

            if (fi == null)
            {
                throw new InvalidOperationException($"Field {fieldName} was not found on type {item.GetType().FullName}");
            }

            var result = fi.GetFieldValue<T>(item);

            return result;
        }

        /// <summary>
        /// Set a field value in a given Object.
        /// </summary>
        /// <typeparam name="T">Type of the field.</typeparam>
        /// <param name="type">Type to set field value on (will only set static fields).</param>
        /// <param name="fieldName">The name of the field to set..</param>
        /// <param name="value">The value to set.</param>
        /// <param name="bindingFlags">Optional binding flags to use during reflection operations.</param>
        /// <exception cref="ArgumentNullException"><paramref name="type"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        /// <exception cref="InvalidOperationException">The field was not found.</exception>
        /// <exception cref="InvalidCastException">The property is not of type T.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static void SetFieldValue<T>(
            this Type type,
            string fieldName,
            T value,
            BindingFlags bindingFlags = DefaultBindingFlags)
        {
            if (type == null)
            {
                throw new ArgumentNullException(nameof(type));
            }

            var fi = type.GetFieldInfo(fieldName, bindingFlags);

            if (fi == null)
            {
                throw new InvalidOperationException($"Field {fieldName} was not found in Type {type.FullName}");
            }

            fi.SetFieldValue(null, value);
        }

        /// <summary>
        /// Set a field value in a given Object.
        /// </summary>
        /// <typeparam name="T">Type of the field.</typeparam>
        /// <param name="item">Object containing field to set.</param>
        /// <param name="fieldName">The name of the field to set..</param>
        /// <param name="value">The value to set.</param>
        /// <param name="bindingFlags">Optional binding flags to use during reflection operations.</param>
        /// <exception cref="ArgumentNullException"><paramref name="item"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        /// <exception cref="InvalidOperationException">The field was not found.</exception>
        /// <exception cref="InvalidCastException">The property is not of type T.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms", MessageId = "Flags", Justification = "Correct name.")]
        public static void SetFieldValue<T>(
            this object item,
            string fieldName,
            T value,
            BindingFlags bindingFlags = DefaultBindingFlags)
        {
            if (item == null)
            {
                throw new ArgumentNullException(nameof(item));
            }

            var fi = item.GetType().GetFieldInfo(fieldName, bindingFlags);
            if (fi == null)
            {
                throw new InvalidOperationException($"Field {fieldName} was not found in Type {item.GetType().FullName}");
            }

            fi.SetFieldValue(item, value);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        private static T GetFieldValue<T>(
            this FieldInfo fi,
            object item)
        {
            if (fi == null)
            {
                throw new ArgumentNullException(nameof(fi));
            }

            Type returnType = typeof(T);
            try
            {
                var value = fi.GetValue(item);

                if (value == null)
                {
                    // can't solely rely on the ( T ) cast - if fi.GetValue returns null, then null can be cast to any reference type.
                    if (!fi.FieldType.IsAssignableTo(returnType))
                    {
                        throw new InvalidCastException($"Unable to cast object of type '{fi.FieldType.FullName}' to type '{returnType.FullName}'.");
                    }
                }

                var result = (T)value;

                return result;
            }
            catch (NullReferenceException)
            {
                // if result of GetValue is null, then attempt to cast to value type will result in NullReferenceException
                throw new InvalidCastException($"Unable to cast object of type '{fi.FieldType.FullName}' to type '{returnType.FullName}'.");
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "This is a developer-facing string, not a user-facing string.")]
        private static void SetFieldValue<T>(
            this FieldInfo fi,
            object item,
            T value)
        {
            if (fi == null)
            {
                throw new ArgumentException(nameof(FieldInfo) + " must not be null", nameof(fi));
            }

            try
            {
                fi.SetValue(item, value);
            }
            catch (ArgumentException ex)
            {
                throw new InvalidCastException(ex.Message);
            }
        }

        private static FieldInfo GetFieldInfo(
            this Type type,
            string fieldName,
            BindingFlags bindingFlags)
        {
            if (type == null)
            {
                throw new ArgumentNullException(nameof(type));
            }

            if (fieldName == null)
            {
                throw new ArgumentNullException(nameof(fieldName));
            }

            if (string.IsNullOrWhiteSpace(fieldName))
            {
                throw new ArgumentException("The name of the field is whitespace.", nameof(fieldName));
            }

            FieldInfo result = null;

            while ((result == null) && (type != null))
            {
                result = type.GetField(fieldName, bindingFlags);

                type = type.BaseType;
            }

            return result;
        }
    }
}

        private static readonly [model-type-name-in-code-here] ReferenceObjectForEquatableTestScenarios = A.Dummy<[model-type-name-in-code-here]>();

        private static readonly [model-type-name-in-code-here] ObjectThatIsEqualToButNotTheSameAsReferenceObject = A.Dummy<[model-type-name-in-code-here]>().Whose(_ => _.GetType() == ReferenceObjectForEquatableTestScenarios.GetType());

        private static readonly EquatableTestScenarios<[model-type-name-in-code-here]> LocalEquatableTestScenarios = new EquatableTestScenarios<[model-type-name-in-code-here]>()
            .AddScenario(() =>
                new EquatableTestScenario<[model-type-name-in-code-here]>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new [model-type-name-in-code-here][]
                    {
                        ObjectThatIsEqualToButNotTheSameAsReferenceObject,
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new [model-type-name-in-code-here][]
                    {
                        // no good way to do this without DeepCloneWith...()
                    },[objects-that-derive-from-scenario-type-but-are-not-of-the-same-type-as-reference-object-here]
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });
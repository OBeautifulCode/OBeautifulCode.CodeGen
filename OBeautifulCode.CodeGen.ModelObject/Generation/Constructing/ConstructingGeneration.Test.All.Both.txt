[nested-test-class-code-analysis-suppressions]
        public static class Constructing
        {
            [Fact]
[test-method-code-analysis-suppressions]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
[test-method-code-analysis-suppressions]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    var systemUnderTestAndExpected = scenario.SystemUnderTestExpectedPropertyValueFunc();

                    systemUnderTestAndExpected.SystemUnderTest.AsTest().Must().NotBeNull(because: scenario.Id);

                    // Act
                    var actual = scenario.PropertyGetterFunc(systemUnderTestAndExpected.SystemUnderTest);

                    // Assert
                    if (systemUnderTestAndExpected.ExpectedPropertyValue == null)
                    {
                        actual.AsTest().Must().BeNull(because: scenario.Id);
                    }
                    else if (systemUnderTestAndExpected.ExpectedPropertyValue.GetType().IsValueType)
                    {
                        actual.AsTest().Must().BeEqualTo(systemUnderTestAndExpected.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        actual.AsTest().Must().BeSameReferenceAs(systemUnderTestAndExpected.ExpectedPropertyValue, because: scenario.Id);
                    }
                }
            }
        }
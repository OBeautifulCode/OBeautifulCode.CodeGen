// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ComparableTestScenarios{T}.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.CodeGen.ModelObject.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.CodeGen.ModelObject.Recipes
{
    using System;
    using System.Collections.Generic;

    using OBeautifulCode.Assertion.Recipes;

    using static System.FormattableString;

    /// <summary>
    /// Specifies various scenarios for comparability tests.
    /// </summary>
    /// <typeparam name="T">The type of the object being tested.</typeparam>
#if !OBeautifulCodeCodeGenRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.CodeGen.ModelObject.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class ComparableTestScenarios<T>
        where T : class
    {
        private readonly object lockScenarios = new object();

        private readonly List<Lazy<ComparableTestScenario<T>>> scenarios = new List<Lazy<ComparableTestScenario<T>>>();

        /// <summary>
        /// Adds the specified scenarios to the list of scenarios.
        /// </summary>
        /// <param name="scenario">The scenario to add.</param>
        /// <returns>
        /// This object.
        /// </returns>
        public ComparableTestScenarios<T> AddScenario(
            ComparableTestScenario<T> scenario)
        {
            new { scenario }.AsTest().Must().NotBeNull();

            this.AddScenario(() => scenario);

            return this;
        }

        /// <summary>
        /// Adds the specified scenarios to the list of scenarios.
        /// </summary>
        /// <param name="scenarioFunc">A func that returns the scenario to add.</param>
        /// <returns>
        /// This object.
        /// </returns>
        public ComparableTestScenarios<T> AddScenario(
            Func<ComparableTestScenario<T>> scenarioFunc)
        {
            new { scenarioFunc }.AsTest().Must().NotBeNull();

            lock (this.lockScenarios)
            {
                var lazyScenario = new Lazy<ComparableTestScenario<T>>(scenarioFunc);

                this.scenarios.Add(lazyScenario);
            }

            return this;
        }

        /// <summary>
        /// Removes all scenarios.
        /// </summary>
        public void RemoveAllScenarios()
        {
            lock (this.lockScenarios)
            {
                this.scenarios.Clear();
            }
        }

        /// <summary>
        /// Validates the scenarios and prepares them for testing.
        /// </summary>
        /// <returns>
        /// The validated/prepared scenarios.
        /// </returns>
        public IReadOnlyList<ValidatedComparableTestScenario<T>> ValidateAndPrepareForTesting()
        {
            lock (this.lockScenarios)
            {
                var becauseNoScenarios = new[]
                {
                    "Use a static constructor on your test class to add scenarios by calling ComparableTestScenarios.AddScenario(...).",
                    "If you need to force the consuming unit test to pass and you'll write your own unit tests, clear all scenarios by calling ComparableTestScenarios.RemoveAllScenarios() and then add ComparableTestScenario<T>.ForceGeneratedTestsToPassAndWriteMyOwnScenario.",
                };

                this.scenarios.AsTest("ComparableTestScenarios.Scenarios").Must().NotBeEmptyEnumerable(because: string.Join(Environment.NewLine, becauseNoScenarios), applyBecause: ApplyBecause.SuffixedToDefaultMessage);

                var result = new List<ValidatedComparableTestScenario<T>>();

                var scenariosCount = this.scenarios.Count;

                for (var x = 0; x < scenariosCount; x++)
                {
                    var scenario = this.scenarios[x].Value;

                    var scenarioNumber = x + 1;

                    var scenarioName = string.IsNullOrWhiteSpace(scenario.Name) ? "<Unnamed Scenario>" : scenario.Name;

                    var scenarioId = Invariant($"{scenarioName} (comparable test scenario #{scenarioNumber} of {scenariosCount}):");

                    var validatedScenario = new ValidatedComparableTestScenario<T>(
                        scenarioId,
                        scenario.ReferenceObject,
                        scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject ?? new List<T>(),
                        scenario.ObjectsThatAreLessThanReferenceObject ?? new List<T>(),
                        scenario.ObjectsThatAreGreaterThanReferenceObject ?? new List<T>(),
                        scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject ?? new List<T>(),
                        scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject ?? new List<object>());

                    result.Add(validatedScenario);
                }

                return result;
            }
        }
    }
}

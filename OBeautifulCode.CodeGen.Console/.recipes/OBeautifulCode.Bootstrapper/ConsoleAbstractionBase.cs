// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ConsoleAbstractionBase.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Bootstrapper.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Bootstrapper.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;

    using CLAP;

    using static global::System.FormattableString;

    /// <summary>
    /// Instance for use in CLAP.
    /// </summary>
#if !OBeautifulCodeBootstrapperSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Bootstrapper.Recipes", "See package version number")]
    internal
#else
    public
#endif
    abstract class ConsoleAbstractionBase
    {
        /// <summary>
        /// Gets the exception types for which only the exception message should be displayed (omits the stack trace).
        /// </summary>
        public static IReadOnlyCollection<Type> MessageOnlyExceptionTypes => null;

        /// <summary>
        /// Error method to call from CLAP; a 1 will be returned as the exit code if this is entered since an exception was thrown.
        /// </summary>
        /// <param name="context">Context provided with details.</param>
        [Error]
#pragma warning disable CS3001 // Argument type is not CLS-compliant - needed for CLAP
        public static void Error(
            ExceptionContext context)
#pragma warning restore CS3001 // Argument type is not CLS-compliant - needed for CLAP
        {
            // change color to red
            var originalColor = Console.ForegroundColor;
            Console.ForegroundColor = ConsoleColor.Red;

            // parser exception or
            if (context.Exception is CommandLineParserException)
            {
                Console.WriteLine("Failure parsing command line arguments.  Run the exe with the 'help' command for usage.");
                Console.WriteLine("   " + context.Exception.Message);
            }
            else if ((MessageOnlyExceptionTypes ?? new Type[0]).Any(_ => _ == context.Exception.GetType()))
            {
                Console.WriteLine("Failure during execution; configured to omit stack trace.");
                Console.WriteLine(string.Empty);
                Console.WriteLine("   " + context.Exception.Message);
            }
            else
            {
                Console.WriteLine("Failure during execution.");
                Console.WriteLine("   " + context.Exception.Message);
                Console.WriteLine(string.Empty);
                Console.WriteLine("   " + context.Exception);
            }

            // restore color
            Console.WriteLine();
            Console.ForegroundColor = originalColor;
        }

        /// <summary>
        /// Help method to call from CLAP.
        /// </summary>
        /// <param name="helpText">Generated help text to display.</param>
        [Empty]
        [Help(Aliases = "help,h,?")]
        public static void ShowUsage(
            string helpText)
        {
            if (string.IsNullOrWhiteSpace(helpText))
            {
                throw new ArgumentException(Invariant($"{helpText} is null or white space"), nameof(helpText));
            }

            Console.WriteLine("   Usage");
            Console.Write("   -----");

            Console.WriteLine(helpText);
            Console.WriteLine();
        }
    }
}